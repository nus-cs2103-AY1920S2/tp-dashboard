[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "mainClassName \u003d \u0027seedu.diary.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        \u0027site-name\u0027: \u0027My Internship Diary\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F10-2/main\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "gradle.projectsEvaluated {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        options.compilerArgs \u003c\u003c \"-Xlint:unchecked\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 7,
      "gerhean": 12,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/diary/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 4,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/diary/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/diary/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.storage.InternshipDiaryStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.storage.JsonInternshipDiaryStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing InternshipDiary ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiaryStorage internshipDiaryStorage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new JsonInternshipDiaryStorage(userPrefs.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        storage \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s internship diary and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * The data from the sample internship diary will be used instead if {@code storage}\u0027s internship diary is not"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * found, or an empty internship diary will be used instead if errors occur when reading {@code storage}\u0027s"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * internship diary."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Optional\u003cReadOnlyInternshipDiary\u003e internshipDiaryOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ReadOnlyInternshipDiary initialData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            internshipDiaryOptional \u003d storage.readInternshipDiary();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            if (!internshipDiaryOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample InternshipDiary\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            initialData \u003d internshipDiaryOptional.orElseGet(SampleDataUtil::getSampleInternshipDiary);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty InternshipDiary\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            initialData \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty InternshipDiary\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            initialData \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty InternshipDiary\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        logger.info(\"Starting InternshipDiary \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping InternshipDiary ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 7,
      "wxwxwxwx9": 1,
      "gerhean": 39,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String LOG_FILE \u003d \"internshipdiary.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 3,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \"The internship application index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_INTERNSHIP_LISTED_OVERVIEW \u003d \"%1$d internship application listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \"The interview index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String IS_ARCHIVED \u003d \"isArchived\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 5,
      "wxwxwxwx9": 1,
      "gerhean": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 2,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/core/archival/InternshipApplicationViewType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.core.archival;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Represents an enumeration of interview application view type."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Each internship application can either be \"archived\" or \"unarchived\"."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public enum InternshipApplicationViewType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    ARCHIVED, UNARCHIVED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 8,
      "gerhean": 1
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/core/commandexecutiontype/RemovalBasedCommandExecutionType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.diary.commons.core.commandexecutiontype;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.ALL_PREFIXES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.logic.util.PrefixUtil.areAnyPrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.diary.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Represents an enumeration of command execution type for removal-based commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A removal-based command may want to mass execute on multiple items by available fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * or it may want to cherry-pick items to execute on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public enum RemovalBasedCommandExecutionType {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    BY_INDEX, BY_INDICES, BY_FIELD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String INDICES_DELIMITER \u003d \",\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_USAGE_EXECUTION_TYPE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        \"You may only execute either by INDEX, multiple INDEX-es, or by STATUS.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"If you wish to execute by INDEX, please do not include \u0027\" + PREFIX_STATUS + \"\u0027 in your input.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"If you wish to execute by STATUS, please do not include \u0027\" + INDICES_DELIMITER + \"\u0027 in your input\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Retrieves the appropriate command execution type based on the argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @return the appropriate command execution type."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static RemovalBasedCommandExecutionType getExecutionType(String args, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        boolean hasPrefixes \u003d areAnyPrefixesPresent(argMultimap, ALL_PREFIXES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        boolean hasDelimiter \u003d args.contains(RemovalBasedCommandExecutionType.INDICES_DELIMITER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (hasPrefixes \u0026\u0026 hasDelimiter) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new ParseException(MESSAGE_USAGE_EXECUTION_TYPE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return hasPrefixes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            ? RemovalBasedCommandExecutionType.BY_FIELD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            : hasDelimiter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            ? RemovalBasedCommandExecutionType.BY_INDICES"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            : RemovalBasedCommandExecutionType.BY_INDEX;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 45
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public Index getDecrementIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if ((zeroBasedIndex - 1) \u003c 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return fromZeroBased(zeroBasedIndex - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 7,
      "gerhean": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/core/interviewcode/InterviewCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.core.interviewcode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an enumeration of interview command code. This code should be either \"add\", \"edit\", or \"delete\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * which will be used in interview command to manipulate interviews in an {@code Internship Application}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * InterviewCode should come right after {@code Index} when inputting interview command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public enum InterviewCode {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    LIST, ADD, EDIT, DELETE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Interview should have an add, edit or delete after index.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true is the given {@code code} is a valid {@code InterviewCode}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static boolean isValidCode(String code) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String upperCaseCode \u003d code.toUpperCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return \"ADD\".equals(upperCaseCode) || \"EDIT\".equals(upperCaseCode)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            || \"DELETE\".equals(upperCaseCode) || \"LIST\".equals(upperCaseCode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 19,
      "gerhean": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/util/BooleanUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Helper functions for handling boolean(s)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class BooleanUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String INVALID_BOOLEAN \u003d \"Please use a valid boolean!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns true if the {@code str} is a valid boolean."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param str"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static boolean isValidBoolean(String str) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return \"true\".equalsIgnoreCase(str) || \"false\".equalsIgnoreCase(str);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 16,
      "gerhean": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/util/DateTimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Class containing DateTime parser."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static DateTimeFormatter getDateTimeFormatter(int index, int defaultYear) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .appendPattern(\"uuuu M d\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .toFormatter()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .appendPattern(\"d M uuuu\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .toFormatter()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .parseDefaulting(ChronoField.YEAR, defaultYear)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .appendPattern(\"d M\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .toFormatter()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .appendPattern(\"d MMM uuuu\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .toFormatter()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withLocale(Locale.ENGLISH)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            // default should never be triggered but just in case."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalStateException(\"DateTimeUtil illegal case.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Parse the input string as a LocalDateTime if possible."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param dateString String to be parsed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @return The parsed string as a LocalDateTime."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws DateTimeParseException if string unable to be parsed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static LocalDate parseDate(String dateString) throws DateTimeParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        int currentYear \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String formattedDateString \u003d dateString.replaceAll(\"[\\\\\\\\/\\\\- ]+\", \" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                return LocalDate.parse(formattedDateString, getDateTimeFormatter(i, currentYear));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                // It\u0027s fine if DateTimeParseException is thrown now, it\u0027s only used to check format of date."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                // DateTimeParseException will be thrown if all cases fail."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // This throws a DateTimeParseException"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return LocalDate.parse(formattedDateString, getDateTimeFormatter(1, currentYear));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 70
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 3,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    protected static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    protected static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 9,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/diary/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 4,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ListenerPropertyType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.statistics.Statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the InternshipDiary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @see seedu.diary.model.Model#getInternshipDiary()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    ReadOnlyInternshipDiary getInternshipDiary();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of internship applications"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Adds a property listener for any changes in {@code propertyType} used."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the user prefs\u0027 internship diary file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    Path getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns a statistics object that can compute relevant internship application statistics."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 13,
      "wxwxwxwx9": 7,
      "gerhean": 20,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.InternshipDiaryParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ListenerPropertyType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.statistics.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final InternshipDiaryParser internshipDiaryParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private InternshipDiaryParser nextParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipDiaryParser \u003d new InternshipDiaryParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiaryParser nextParser \u003d this.nextParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.nextParser \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (nextParser \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            command \u003d internshipDiaryParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            command \u003d nextParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.nextParser \u003d command.getNextInternshipDiaryParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            storage.saveInternshipDiary(model.getInternshipDiary());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ReadOnlyInternshipDiary getInternshipDiary() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return model.getInternshipDiary();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        model.addPropertyChangeListener(propertyType, l);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return model.getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return model.getStatistics();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 17,
      "wxwxwxwx9": 7,
      "gerhean": 34,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Adds an internship application to the internship diary."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \": Adds an internship application to the internship diary.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_COMPANY + \"COMPANY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_ROLE + \"ROLE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_DATE + \"APPLICATION DATE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_STATUS + \"STATUS \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_COMPANY + \"Google \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_ROLE + \"Software Engineer \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_ADDRESS + \"123 Kent Ridge Road \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_PHONE + \"67654321 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_EMAIL + \"example@google.com \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        + PREFIX_DATE + \"10 01 2020 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_PRIORITY + \"5 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        + PREFIX_STATUS + \"APPLIED\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New internship application added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERNSHIP \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \"This internship application already exists in the internship diary\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final InternshipApplication toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates an AddCommand to add the specified {@code internshipApplication}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public AddCommand(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        toAdd \u003d internshipApplication;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (model.hasInternshipApplication(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.addInternshipApplication(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 22,
      "FeliciaTay": 3,
      "gerhean": 19,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/ArchivalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Lists all archived internship application(s) from the internship diary to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ArchivalCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archival\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all archived internship applications\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 21,
      "gerhean": 2
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Archives an internship application identified using its displayed index from the internship diary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \": Archives the internship application \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"identified by the index number used in the displayed internship list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_INTERNSHIP_SUCCESS \u003d \"Archived Internship Application: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_ALREADY_ARCHIVED \u003d \"Internship Application already archived!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public ArchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication internshipToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (internshipToArchive.isArchived()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_ARCHIVED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.archiveInternshipApplication(internshipToArchive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String feedback \u003d internshipToArchive.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            || (other instanceof ArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((ArchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 57,
      "gerhean": 6
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Clears the internship diary."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Internship diary has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.setInternshipDiary(new InternshipDiary());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 3,
      "gerhean": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.InternshipDiaryParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Gets the next parser to use, if any."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @return a InternshipDiaryParser, or {@code null} if there is none."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public InternshipDiaryParser getNextInternshipDiaryParser() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 13,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Statistics should be shown to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final boolean showStatistics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean showStatistics, boolean exit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.showStatistics \u003d showStatistics;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean isShowStatistics() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return showStatistics;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 showStatistics \u003d\u003d otherCommandResult.showStatistics"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, showStatistics, exit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 1,
      "wxwxwxwx9": 11,
      "gerhean": 11,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Deletes an internship application identified using its displayed index from the internship diary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication internshipToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.deleteInternshipApplication(internshipToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String feedback \u003d internshipToDelete.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 2,
      "wxwxwxwx9": 17,
      "gerhean": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Company;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Role;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Edits the details of an existing internship application in the internship diary."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \": Edits the details of the internship application identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"by the index number used in the displayed internship application list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_COMPANY + \"COMPANY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_ROLE + \"ROLE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_DATE + \"APPLICATION DATE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_STATUS + \"STATUS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"\\nExample: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_EDIT_INTERNSHIP_SUCCESS \u003d \"Edited Internship Application: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERNSHIP \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \"This internship application already exists in the internship diary.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final EditInternshipDescriptor editInternshipDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param index of the internship application in the filtered internship application list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param editInternshipDescriptor details to edit the internship application with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditCommand(Index index, EditInternshipDescriptor editInternshipDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(editInternshipDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.editInternshipDescriptor \u003d new EditInternshipDescriptor(editInternshipDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication editedInternship \u003d createEditedInternship(internshipToEdit, editInternshipDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (editedInternship.getIsGhostedOrRejected() \u0026\u0026 (internshipToEdit.getStatus() !\u003d Status.GHOSTED)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u0026\u0026 (internshipToEdit.getStatus() !\u003d Status.REJECTED)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            editedInternship.setLastStage(internshipToEdit.getStatus());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!internshipToEdit.isSameInternshipApplication(editedInternship)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 model.hasInternshipApplication(editedInternship)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.setInternshipApplication(internshipToEdit, editedInternship);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.displayInternshipDetail(editedInternship);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_INTERNSHIP_SUCCESS, editedInternship));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates and returns a {@code InternshipApplication} with the details of {@code internshipToEdit}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * edited with {@code editInternshipDescriptor}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static InternshipApplication createEditedInternship(InternshipApplication internshipToEdit,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor editInternshipDescriptor) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assert internshipToEdit !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Company updatedCompany \u003d editInternshipDescriptor.getCompany().orElse(internshipToEdit.getCompany());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Role updatedRole \u003d editInternshipDescriptor.getRole().orElse(internshipToEdit.getRole());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Address updatedAddress \u003d editInternshipDescriptor.getAddress().orElse(internshipToEdit.getAddress());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Phone updatedPhone \u003d editInternshipDescriptor.getPhone().orElse(internshipToEdit.getPhone());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Email updatedEmail \u003d editInternshipDescriptor.getEmail().orElse(internshipToEdit.getEmail());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDate updatedDate \u003d editInternshipDescriptor.getDate().orElse(internshipToEdit.getApplicationDate());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Priority updatedPriority \u003d editInternshipDescriptor.getPriority().orElse(internshipToEdit.getPriority());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Optional\u003cStatus\u003e toBeUpdatedStatus \u003d editInternshipDescriptor.getStatus();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Status updatedStatus \u003d toBeUpdatedStatus.orElse(internshipToEdit.getStatus());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Boolean isArchived \u003d internshipToEdit.isArchived();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInterview\u003e interviews \u003d internshipToEdit.getInterviews();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication updatedInternshipApplication \u003d new InternshipApplication(updatedCompany, updatedRole,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            updatedAddress, updatedPhone, updatedEmail, updatedDate, updatedPriority,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            updatedStatus, isArchived, interviews);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (toBeUpdatedStatus.isPresent()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            if (toBeUpdatedStatus.get() \u003d\u003d Status.GHOSTED || toBeUpdatedStatus.get() \u003d\u003d Status.REJECTED) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                updatedInternshipApplication.setIsGhostedOrRejected(true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                updatedInternshipApplication.setIsGhostedOrRejected(false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (internshipToEdit.getStatus() \u003d\u003d Status.GHOSTED || internshipToEdit.getStatus() \u003d\u003d Status.REJECTED) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            updatedInternshipApplication \u003d updatedInternshipApplication.setLastStage(internshipToEdit.getLastStage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            updatedInternshipApplication \u003d updatedInternshipApplication.setLastStage(internshipToEdit.getStatus());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return updatedInternshipApplication;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 editInternshipDescriptor.equals(e.editInternshipDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Stores the details to edit the internship application with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * corresponding field value of the internship application."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static class EditInternshipDescriptor {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Company company;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Role role;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        private ApplicationDate date;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Status status;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        private Boolean isGhostedOrRejected;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        private Status lastStage;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        public EditInternshipDescriptor() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public EditInternshipDescriptor(EditInternshipDescriptor toCopy) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setCompany(toCopy.company);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setRole(toCopy.role);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            setIsGhostedOrRejected(toCopy.isGhostedOrRejected);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            setLastStage(toCopy.lastStage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return CollectionUtil.isAnyNonNull("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                company, role, address, phone, email, date, priority, status"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            );"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setCompany(Company company) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.company \u003d company;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cCompany\u003e getCompany() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(company);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setRole(Role role) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.role \u003d role;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cRole\u003e getRole() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(role);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        public void setDate(ApplicationDate date) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        public Optional\u003cApplicationDate\u003e getDate() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setStatus(Status status) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        public void setLastStage(Status lastStage) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            this.lastStage \u003d lastStage;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        public Optional\u003cStatus\u003e getLastStage() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return Optional.ofNullable(lastStage);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        public void setIsGhostedOrRejected(Boolean bool) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            this.isGhostedOrRejected \u003d bool;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (!(other instanceof EditInternshipDescriptor)) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            EditInternshipDescriptor e \u003d (EditInternshipDescriptor) other;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return getCompany().equals(e.getCompany())"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 getRole().equals(e.getRole())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 getStatus().equals(e.getStatus());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 102,
      "FeliciaTay": 41,
      "wxwxwxwx9": 4,
      "gerhean": 28,
      "-": 124,
      "ongch00": 4
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Internship Diary as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 1,
      "wxwxwxwx9": 1,
      "gerhean": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.CustomToStringPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Finds and lists all internship applications in internship diary"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * whose fields contains any of the field\u0027s argument keywords."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Email and Phone matching is based on whether there is a substring that matches."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \": Finds all internship applications whose fields contain all of \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"the specified field keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"At least one of the following optional parameters must be given:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"[KEYWORDS] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"[\" + PREFIX_COMPANY + \"COMPANY] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"[\" + PREFIX_ROLE + \"ROLE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"[\" + PREFIX_STATUS + \"STATUS]\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" c/Google r/Engineer\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final boolean isPreamble;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public FindCommand(List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates, boolean isPreamble) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.isPreamble \u003d isPreamble;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e predicate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (isPreamble) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicate \u003d predicates.stream().reduce(x -\u003e false, Predicate::or);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicate \u003d predicates.stream().reduce(x -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        predicate \u003d new CustomToStringPredicate\u003c\u003e(predicate, this.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.updateFilteredInternshipApplicationList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            String.format(Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                model.getFilteredInternshipApplicationList().size()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 predicates.equals(((FindCommand) other).predicates)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 isPreamble \u003d\u003d ((FindCommand) other).isPreamble); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String delimiter \u003d isPreamble ? \" OR \" : \" AND \";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return predicates.stream().map(Object::toString).collect(Collectors.joining(delimiter));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 5,
      "gerhean": 22,
      "-": 21,
      "ongch00": 38
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 1,
      "gerhean": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/InitClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.ClearCommandConfirmationParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.InternshipDiaryParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Asks for confirmation to clear the internship diary."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class InitClearCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Do you really want to clear all data in Internship Diary?\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Type \u0027yes\u0027 to confirm.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Type anything else to cancel the command.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public InternshipDiaryParser getNextInternshipDiaryParser() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new ClearCommandConfirmationParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 3,
      "gerhean": 23
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/InterviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an abstract interview command that modifies interviews in an Internship Application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public abstract class InterviewCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"interview\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \": Modifies Interviews in an Internship Application by using an index to specify application followed\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"by a command word to specify action to be taken.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"COMMAND_CODE (must be either add, edit, delete, or list) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"other parameters as defined by the command code. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"type help or interview INDEX COMMAND_CODE to find out the respective required parameters.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_INTERVIEW_DATE_ERROR \u003d \"Interview Date should not \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"be before Internship Application Date.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    protected InternshipApplication getInternshipApplication(Model model, Index index) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Checks if interviewDate is before applicationDate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    protected boolean isInterviewBeforeApplication(InternshipApplication internshipApplication, Interview interview) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interview.getInterviewDate()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .compareTo(internshipApplication.getApplicationDate().fullApplicationDate) \u003c 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 36,
      "gerhean": 9
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Lists all unarchived internship application(s) from the internship diary to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all internship applications\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.viewUnarchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 1,
      "wxwxwxwx9": 3,
      "gerhean": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/ReminderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.ApplicationDateAndInterviewDateComparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.ApplicationDateDuePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.CustomToStringPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.InterviewDateDuePredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.IsNotArchivedPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusIsInterviewPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusIsWishlistPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Lists all internship applications in the internship diary that are due or have interview dates in 7 days."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows applications that have are due or have interview\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        + \"dates in 7 days.\\n\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed applications that are due or have interviews in 7 days.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDateDuePredicate appDateWithin7DaysPredicate \u003d new ApplicationDateDuePredicate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        StatusIsWishlistPredicate statusIsWishlistPredicate \u003d new StatusIsWishlistPredicate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e wishlistPredicate \u003d appDateWithin7DaysPredicate.and(statusIsWishlistPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InterviewDateDuePredicate interviewDateWithin7DaysPredicate \u003d new InterviewDateDuePredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        StatusIsInterviewPredicate statusIsInterviewPredicate \u003d new StatusIsInterviewPredicate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e interviewPredicate \u003d interviewDateWithin7DaysPredicate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .and(statusIsInterviewPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e datePredicate \u003d wishlistPredicate.or(interviewPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        IsNotArchivedPredicate isNotArchivedPredicate \u003d new IsNotArchivedPredicate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e predicate \u003d isNotArchivedPredicate.and(datePredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e customPredicate \u003d new CustomToStringPredicate\u003c\u003e(predicate,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \"Reminder\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        model.updateFilteredInternshipApplicationList(customPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        model.updateFilteredInternshipApplicationList(new ApplicationDateAndInterviewDateComparator());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            || (other instanceof ReminderCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 50,
      "gerhean": 10
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/RemovalBasedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Represents a command that can execute based on the different command execution type available."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * It acts as the connector between a removal-based command and the ability to execute on multiple items"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * or by a specific field."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class RemovalBasedCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Function\u003cString, String\u003e MESSAGE_USAGE_BY_INDEX \u003d (commandWord) -\u003e commandWord.toUpperCase()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"S the internship application.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Identified by the index number used in the displayed internship list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Example: \" + commandWord + \" 1\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Function\u003cString, String\u003e MESSAGE_USAGE_BY_INDICES \u003d (commandWord) -\u003e commandWord.toUpperCase()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"S the internship application.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Identified by the index number used in the displayed internship list.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Parameters: INDEX, [INDEX], [INDEX], ... (all index must be positive integer with comma as separator)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Note that INDEX enclosed in bracket is optional.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Example: \" + commandWord + \" 3, 1, 5\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Function\u003cString, String\u003e MESSAGE_USAGE_BY_FIELD \u003d (commandWord) -\u003e commandWord.toUpperCase()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"S all internship applications with the specified status.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Note that you can only execute based on Status field!\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"You may archive based on any number of valid status field (but there must be at least one valid status)\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"As long as there is one valid status, the command will execute.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + PREFIX_STATUS + \"STATUS\" + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Example: \" + commandWord + \" s/rejected\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Example: \" + commandWord + \" s/sss rejected\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Function\u003cString, String\u003e MESSAGE_COMMAND_INTERNSHIP_SUCCESS \u003d (commandWord) -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        commandWord.toUpperCase() + \"D internship application(s) — \\n\\n%1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_COMMAND_UNEXPECTED_FAILURE \u003d \"Something went wrong!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Optional\u003cIndex\u003e targetIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Optional\u003cList\u003cIndex\u003e\u003e targetIndices;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Optional\u003cPredicate\u003cInternshipApplication\u003e\u003e targetPredicate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final RemovalBasedCommandExecutionType executionType;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public RemovalBasedCommand(Index targetIndex, RemovalBasedCommandExecutionType executionType, String commandWord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetIndex \u003d Optional.of(targetIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetPredicate \u003d Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.executionType \u003d executionType;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public RemovalBasedCommand(List\u003cIndex\u003e indices, RemovalBasedCommandExecutionType executionType,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String commandWord) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetIndices \u003d Optional.of(indices);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetPredicate \u003d Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.executionType \u003d executionType;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public RemovalBasedCommand(Predicate\u003cInternshipApplication\u003e predicate,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommandExecutionType executionType,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String commandWord) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetPredicate \u003d Optional.of(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.executionType \u003d executionType;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Function\u003cIndex, Command\u003e lazyCommand \u003d generateLazyCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        switch (executionType) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case BY_INDEX:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return executeByIndex(model, lazyCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case BY_INDICES:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return executeByIndices(model, lazyCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case BY_FIELD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return executeByField(model, lazyCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            // this should never happen"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalStateException(\"unreachable\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Executes the command by a single index."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param model model for execution of command."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param lazyCommand a function that creates the command."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws CommandException if the index is out of range."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private CommandResult executeByIndex(Model model, Function\u003cIndex, Command\u003e lazyCommand) throws CommandException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index index \u003d targetIndex.get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String commandFeedback \u003d executeLazyCommandByIndex(model, lazyCommand, index) + \"\\n\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String resultFeedback \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            String.format(MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord), commandFeedback);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(resultFeedback);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Executes the command by multiple indexes."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * It runs through the list of indices to execute on the internship application"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * retrieved from the underlying internship applications list in the internship diary."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param model model for execution of command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param lazyCommand a function that creates the command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws CommandException if the indices are out of range."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private CommandResult executeByIndices(Model model, Function\u003cIndex, Command\u003e lazyCommand) throws CommandException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cIndex\u003e indices \u003d targetIndices.get();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        checkValidIndices(model, indices);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String commandFeedback \u003d executeLazyCommandByIndices(model, lazyCommand, indices);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String resultFeedback \u003d String.format(MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord), commandFeedback);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(resultFeedback);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Executes the command by the field specified and its relevant input."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Converts the list of predicate-filtered internship applications into the corresponding indices"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * and runs through that list of indices to execute on the internship applications retrieved"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * from the underlying internship applications list in the internship diary."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param model model for execution of command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param lazyCommand a function that creates the command."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws CommandException if the indices are out of range."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private CommandResult executeByField(Model model, Function\u003cIndex, Command\u003e lazyCommand) throws CommandException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e internshipApplicationsToExecuteOn \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            getPredicateFilteredInternshipApplications(model);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cIndex\u003e indices \u003d convertInternshipApplicationsToIndices(model, internshipApplicationsToExecuteOn);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        checkValidIndices(model, indices);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String commandFeedback \u003d executeLazyCommandByIndices(model, lazyCommand, indices);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String resultFeedback \u003d String.format(MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord), commandFeedback);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(resultFeedback);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Generates the appropriate lazy function to create the command based on the command word given by input."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The lazy command will be created and executed when this RemovalBasedCommand is executed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @return a function that takes in an index and creates a command."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Function\u003cIndex, Command\u003e generateLazyCommand() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return (Index index) -\u003e new DeleteCommand(index);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return (Index index) -\u003e new ArchiveCommand(index);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case UnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return (Index index) -\u003e new UnarchiveCommand(index);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            // this should never happen"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalStateException(\"unreachable\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Executes the lazy command by index."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Retrieves the feedback from the command for output to user."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param model model for execution of command."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param lazyCommand a function that creates the command."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param index to execute upon."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @return the command feedback for user."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws CommandException if the indices are out of range."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private String executeLazyCommandByIndex(Model model, Function\u003cIndex, Command\u003e lazyCommand,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index index) throws CommandException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Command actualCommand \u003d lazyCommand.apply(index);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String commandFeedback \u003d actualCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return commandFeedback;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Executes the lazy command by indices iteratively."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The function will also decrement the indices after the current index upon each execution of"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * a removal-based command because each execution will shift the remaining indices forward (decrement"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * index by 1)."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Retrieves the feedback from the command for output to user."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param model model for execution of command."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param lazyCommand a function that creates the command."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param indices to execute upon."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @return the command feedback for user."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws CommandException if the indices are out of range."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private String executeLazyCommandByIndices(Model model, Function\u003cIndex, Command\u003e lazyCommand,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cIndex\u003e indices) throws CommandException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String commandFeedback \u003d \"\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (int i \u003d 0; i \u003c indices.size(); i++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            for (int j \u003d i + 1; j \u003c indices.size(); j++) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                // decrements the following indices because of the removal of the head index in the list"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                Index newIndex \u003d indices.get(j).getDecrementIndex();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                indices.set(j, newIndex);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            commandFeedback +\u003d executeLazyCommandByIndex(model, lazyCommand, indices.get(i)) + \"\\n\\n\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return commandFeedback;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Retrieves the predicate-filtered internship applications."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param model model for execution of command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @return the internship applications that was filtered by the predicate."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private List\u003cInternshipApplication\u003e getPredicateFilteredInternshipApplications(Model model) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // filter appropriate internship applications into a new list"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e copy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (InternshipApplication internshipApplication : model.getFilteredInternshipApplicationList()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            copy.add(internshipApplication);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e internshipsToExecuteOn \u003d copy.stream()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .filter(targetPredicate.get()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return internshipsToExecuteOn;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Converts the given internship applications to their corresponding indices in the"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * underlying internship applications list in the internship diary."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * It will also sort the indices by order as users may not enter the indices sequentially."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param model model for execution of command."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param predicateFilteredInternshipApplications internship applications to be converted to indices."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @return the appropriate indices."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private List\u003cIndex\u003e convertInternshipApplicationsToIndices(Model model,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e predicateFilteredInternshipApplications) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInteger\u003e integerIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (int i \u003d 0; i \u003c model.getFilteredInternshipApplicationList().size(); i++) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList().get(i);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            if (predicateFilteredInternshipApplications.contains(internshipApplication)) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                integerIndices.add(i);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cIndex\u003e indices \u003d integerIndices.stream()"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .sorted()"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .map(number -\u003e Index.fromZeroBased(number))"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return indices;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Verifies that all the given indices by user are valid and not out of bounds according to the"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * underlying internship applications list in the internship diary."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param model model for execution of command."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param indices to check for validity."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws CommandException if the indices are out of range, with the specified indices that are out of range."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void checkValidIndices(Model model, List\u003cIndex\u003e indices) throws CommandException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInteger\u003e invalidIndices \u003d indices.stream()"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .filter(index -\u003e index.getZeroBased() \u003e\u003d lastShownList.size())"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .map(index -\u003e index.getOneBased())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        boolean hasInvalidIndices \u003d !invalidIndices.isEmpty();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (hasInvalidIndices) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            String exceptionMessage \u003d Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX + \": \" + invalidIndices;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new CommandException(exceptionMessage);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            || (other instanceof RemovalBasedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((RemovalBasedCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 targetIndices.equals(((RemovalBasedCommand) other).targetIndices) // state check"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 targetPredicate.equals(((RemovalBasedCommand) other).targetPredicate) // state check"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 executionType.equals(((RemovalBasedCommand) other).executionType) // state check"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 commandWord.equals(((RemovalBasedCommand) other).commandWord)); // state check"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 304,
      "gerhean": 10
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/SelectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Selects an internship application to display in the GUI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \": displays the details of the internship application selected based on \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"the index number in the displayed internship application list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"\\nExample: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SELECT_SUCCESS \u003d \"Internship Application Displayed!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public SelectCommand(Index index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInternshipApplication\u003e currentList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d currentList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication internshipApplication \u003d currentList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        model.displayInternshipDetail(internshipApplication);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new CommandResult(MESSAGE_SELECT_SUCCESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 index.equals(((SelectCommand) other).index)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 46,
      "gerhean": 10
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Finds and lists all internship applications in internship diary"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * whose company name contains any of the argument keywords."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String REVERSE_KEYWORD \u003d \"reverse\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \": Sorts current list by given parameter.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"Parameters: [\" + REVERSE_KEYWORD + \"] KEYWORD\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"Available sorts:\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"Company: \" + PREFIX_COMPANY + \", \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"Role: \" + PREFIX_ROLE + \", \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"Date: \" + PREFIX_DATE + \", \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"Priority: \" + PREFIX_PRIORITY + \", \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"Status: \" + PREFIX_STATUS + \".\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_COMPANY + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        + \"Remarks: sort order is detailed in the User Guide.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final Comparator\u003cInternshipApplication\u003e comparator;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public SortCommand(Comparator\u003cInternshipApplication\u003e comparator) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        model.updateFilteredInternshipApplicationList(comparator);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            String.format(Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                model.getFilteredInternshipApplicationList().size()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            \u0026\u0026 comparator.equals(((SortCommand) other).comparator)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 60
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/StatisticsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Displays statistics window UI to users."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows internship application statistics.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String SHOWING_STATISTICS_MESSAGE \u003d \"Opened statistics window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(SHOWING_STATISTICS_MESSAGE, false, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 19,
      "gerhean": 2
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/UnarchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Unarchives an internship application identified using its displayed index from the internship diary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class UnarchiveCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unarchive\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \": Unarchives the internship application \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"identified by the index number used in the displayed internship list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_UNARCHIVE_INTERNSHIP_SUCCESS \u003d \"Unarchived Internship Application: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_ALREADY_UNARCHIVED \u003d \"Internship Application already unarchived!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public UnarchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication internshipToUnarchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (!internshipToUnarchive.isArchived()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_UNARCHIVED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.unarchiveInternshipApplication(internshipToUnarchive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String feedback \u003d internshipToUnarchive.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            || (other instanceof UnarchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((UnarchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 57,
      "gerhean": 6
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/exceptions/InterviewCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.diary.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Represents an exception caused by an execution of an interview sub-command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewCommandException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a new {@code InterviewCommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewCommandException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 10,
      "gerhean": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/interviewsubcommands/InterviewAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.logic.commands.exceptions.InterviewCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Adds an interview into an Internship Application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewAddCommand extends InterviewCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Interview added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERVIEW \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \"This interview already exists in the internship application: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Adds an interview into an Internship Application.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) add \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_IS_ONLINE + \"is it an online interview (true/false)] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS (optional if online interview, compulsory if offline interview)] \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 add \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_IS_ONLINE + \"false \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_ADDRESS + \"123 road \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_DATE + \"01 02 2020 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_OFFLINE_INTERVIEW_ADDRESS \u003d \"Offline interviews require address tag [\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_ADDRESS + \"ADDRESS] non-empty\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final Interview interviewToAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewAddCommand(Index index, Interview interview) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(interview);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviewToAdd \u003d interview;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipToModify \u003d super.getInternshipApplication(model, index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (internshipToModify.hasInterview(interviewToAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_INTERVIEW, internshipToModify));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (super.isInterviewBeforeApplication(internshipToModify, interviewToAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new InterviewCommandException(MESSAGE_INTERVIEW_DATE_ERROR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipToModify.addInterview(interviewToAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        model.displayInternshipDetail(internshipToModify);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, interviewToAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            || (other instanceof InterviewAddCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 interviewToAdd.equals(((InterviewAddCommand) other).interviewToAdd)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 index.equals(((InterviewAddCommand) other).index));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 59,
      "gerhean": 12
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/interviewsubcommands/InterviewDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Deletes an interview from an Internship Application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewDeleteCommand extends InterviewCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted Interview: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Deletes an Interview from an Internship Application \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"by using an index of the internship application, followed by an index of interview to be deleted.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"Parameters: INDEX(index of internship application) delete INDEX (index of interview to be deleted). \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 delete 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Index internshipIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Index interviewIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewDeleteCommand(Index internshipIndex, Index interviewIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(internshipIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(interviewIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.internshipIndex \u003d internshipIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewIndex \u003d interviewIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipToModify \u003d super.getInternshipApplication(model, internshipIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInterview\u003e interviews \u003d internshipToModify.getInterviews();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interviewIndex.getZeroBased() \u003e\u003d interviews.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interviewToDelete \u003d interviews.get(interviewIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipToModify.deleteInterview(interviewToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.displayInternshipDetail(internshipToModify);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, interviewToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            || (other instanceof InterviewDeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 interviewIndex.equals(((InterviewDeleteCommand) other).interviewIndex)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 internshipIndex.equals(((InterviewDeleteCommand) other).internshipIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 48,
      "gerhean": 10
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/interviewsubcommands/InterviewEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.logic.commands.exceptions.InterviewCommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Edits the details of an existing interview in an Internship Application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewEditCommand extends InterviewCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Edits an Interview from an Internship Application \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"by using an index of the internship application, followed by an index of interview to be edited.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"Parameters: INDEX(index of internship application) edit INDEX (index of interview to be edited) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_IS_ONLINE + \"is it an online interview (true/false)] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS (optional if online interview] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 edit \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_IS_ONLINE + \"false \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_ADDRESS + \"123 road \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + PREFIX_DATE + \"01 02 2020 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_EDIT_INTERVIEW_SUCCESS \u003d \"Edited Interview: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERVIEW \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \"This interview already exists in the following internship application: %1$s.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_REQUIRE_ADDRESS \u003d \"You are changing an Online Interview \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        + \"into an Offline Interview, Address field is required.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final Index internshipIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final Index interviewIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final EditInterviewDescriptor editInterviewDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param internshipIndex index of the internship application to modify the interviews in."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param interviewIndex index of the interview under the internship application above."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param editInterviewDescriptor details to edit the interview with."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewEditCommand(Index internshipIndex,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index interviewIndex, EditInterviewDescriptor editInterviewDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(internshipIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(interviewIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(editInterviewDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.internshipIndex \u003d internshipIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewIndex \u003d interviewIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.editInterviewDescriptor \u003d editInterviewDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipToModify \u003d super.getInternshipApplication(model, internshipIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInterview\u003e lastShownList \u003d internshipToModify.getInterviews();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interviewIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interviewToEdit \u003d lastShownList.get(interviewIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview editedInterview \u003d createEditedInterview(interviewToEdit, editInterviewDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (internshipToModify.hasInterview(editedInterview)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_INTERVIEW, internshipToModify));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (super.isInterviewBeforeApplication(internshipToModify, editedInterview)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new InterviewCommandException(MESSAGE_INTERVIEW_DATE_ERROR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipToModify.setInterview(interviewIndex, editedInterview);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.displayInternshipDetail(internshipToModify);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_INTERVIEW_SUCCESS, editedInterview));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates and returns a {@code InternshipApplication} with the details of {@code internshipToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * edited with {@code editInternshipDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static Interview createEditedInterview(Interview interviewToEdit,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInterviewDescriptor editInterviewDescriptor) throws InterviewCommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assert interviewToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        boolean updatedIsOnline \u003d editInterviewDescriptor.getIsOnline().orElse(interviewToEdit.getIsOnline());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interviewToEdit.getIsOnline() \u0026\u0026 !updatedIsOnline \u0026\u0026 editInterviewDescriptor.getAddress().isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new InterviewCommandException(MESSAGE_REQUIRE_ADDRESS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Address updatedAddress \u003d editInterviewDescriptor.getAddress().orElse(interviewToEdit.getInterviewAddress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ApplicationDate updatedDate \u003d editInterviewDescriptor.getInterviewDate()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .orElse(interviewToEdit.getDate());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return Interview.createInterview(updatedIsOnline, updatedDate, updatedAddress);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!(other instanceof InterviewEditCommand)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand e \u003d (InterviewEditCommand) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviewIndex.equals(e.interviewIndex)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 internshipIndex.equals(e.internshipIndex)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 editInterviewDescriptor.equals(e.editInterviewDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Stores the details to edit the interview with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * corresponding field value of the interview."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static class EditInterviewDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Boolean isOnline;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private ApplicationDate date;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        public EditInterviewDescriptor() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public EditInterviewDescriptor(EditInterviewDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setOnline(toCopy.isOnline);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return CollectionUtil.isAnyNonNull(address, date, isOnline);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setDate(ApplicationDate date) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cApplicationDate\u003e getInterviewDate() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setOnline(boolean isOnline) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.isOnline \u003d isOnline;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cBoolean\u003e getIsOnline() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(isOnline);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (!(other instanceof EditInterviewDescriptor)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            EditInterviewDescriptor e \u003d (EditInterviewDescriptor) other;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 getInterviewDate().equals(e.getInterviewDate())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 getIsOnline().equals(e.getIsOnline());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 186,
      "gerhean": 19
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/commands/interviewsubcommands/InterviewListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Lists all interviews inside an Internship Application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewListCommand extends InterviewCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"listed all interviews in %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewListCommand(Index index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipToList \u003d super.getInternshipApplication(model, index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.displayInternshipDetail(internshipToList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, internshipToList));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            || (other instanceof InterviewListCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 index.equals(((InterviewListCommand) other).index));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 31,
      "gerhean": 8
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/comparator/ApplicationDateAndInterviewDateComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Comparator for sorting InternshipApplication by application date and interview date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class ApplicationDateAndInterviewDateComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate dateOfInternship1 \u003d internship1.getEarliestApplicationOrInterviewDate().fullApplicationDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate dateOfInternship2 \u003d internship2.getEarliestApplicationOrInterviewDate().fullApplicationDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return dateOfInternship1.compareTo(dateOfInternship2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return \"Earliest application/ interview date\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return other instanceof ApplicationDateAndInterviewDateComparator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 28,
      "gerhean": 2
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/comparator/ApplicationDateComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class ApplicationDateComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internship1.getApplicationDate().compareTo(internship2.getApplicationDate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Comparator\u003cInternshipApplication\u003e reversed() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new ReversedComparator(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // equal only if todayDate is same"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other instanceof ApplicationDateComparator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_DATE.getPrefix();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 34
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/comparator/CompanyComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by companies in lexicographical order."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class CompanyComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internship1.getCompany().compareTo(internship2.getCompany());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Comparator\u003cInternshipApplication\u003e reversed() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new ReversedComparator(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other instanceof CompanyComparator; // All CompanyComparator are the same."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_COMPANY.getPrefix();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 33
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/comparator/PriorityComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by Priority."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class PriorityComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internship1.getPriority().compareTo(internship2.getPriority());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Comparator\u003cInternshipApplication\u003e reversed() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new ReversedComparator(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other instanceof PriorityComparator; // All PriorityComparator are the same."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_PRIORITY.getPrefix();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 33
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/comparator/ReversedComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Identical to Comparator.reversed(). However, the string is overwritten."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "class ReversedComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Comparator\u003cInternshipApplication\u003e internalComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    protected ReversedComparator(Comparator\u003cInternshipApplication\u003e comparator) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.internalComparator \u003d comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return -internalComparator.compare(internship1, internship2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return SortCommand.REVERSE_KEYWORD + \" \" + internalComparator.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other instanceof ReversedComparator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            \u0026\u0026 internalComparator.equals(((ReversedComparator) other).internalComparator);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 33
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/comparator/RoleComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by Role."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class RoleComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internship1.getRole().compareTo(internship2.getRole());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Comparator\u003cInternshipApplication\u003e reversed() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new ReversedComparator(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other instanceof RoleComparator; // All RoleComparator are the same."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_ROLE.getPrefix();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 33
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/comparator/StatusComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by Status."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class StatusComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internship1.getStatus().compareTo(internship2.getStatus());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Comparator\u003cInternshipApplication\u003e reversed() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new ReversedComparator(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other instanceof StatusComparator; // All StatusComparator are the same."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_STATUS.getPrefix();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 33
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.util.PrefixUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Company;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_COMPANY, PREFIX_ROLE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_STATUS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_COMPANY, PREFIX_ROLE, PREFIX_DATE, PREFIX_STATUS)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Company company \u003d ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(\"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDate date \u003d ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).orElse(\"5\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Status status \u003d ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InternshipApplication(company, role, address, phone, email, date, priority, status);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new AddCommand(internshipApplication);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 8,
      "wxwxwxwx9": 1,
      "gerhean": 28,
      "-": 24,
      "ongch00": 1
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/ArchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Parses input arguments and creates a new ArchiveCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * and returns a ArchiveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new ArchiveCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 24,
      "gerhean": 6
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns the number of prefixes contained in argument multimap."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public Integer getSize() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Checks if the multimap contains a particular prefix."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param prefix prefix to check for."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean contains(Prefix prefix) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return argMultimap.containsKey(prefix);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 20,
      "gerhean": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        protected PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        protected int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        protected Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 1,
      "gerhean": 4,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/ClearCommandConfirmationParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ClearCommandConfirmationParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Parses user input to confirm clear command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class ClearCommandConfirmationParser extends InternshipDiaryParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String CONFIRMATION_COMMAND_WORD \u003d \"yes\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String CANCEL_CLEAR_COMMAND \u003d \"Internship diary is not cleared. No data will be lost.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (userInput.trim().equalsIgnoreCase(CONFIRMATION_COMMAND_WORD)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new ClearCommandConfirmationParseException(CANCEL_CLEAR_COMMAND);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 1,
      "gerhean": 22
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_COMPANY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_IS_ONLINE \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Prefix[] ALL_PREFIXES \u003d {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        PREFIX_COMPANY, PREFIX_ROLE, PREFIX_STATUS, PREFIX_ADDRESS, PREFIX_DATE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        PREFIX_PHONE, PREFIX_PRIORITY, PREFIX_IS_ONLINE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 7,
      "wxwxwxwx9": 5,
      "gerhean": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_COMPANY, PREFIX_ROLE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_STATUS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor editInternshipDescriptor \u003d new EditCommand.EditInternshipDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPANY).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setCompany(ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setRole(ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            editInternshipDescriptor.setDate(ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setStatus(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!editInternshipDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new EditCommand(index, editInternshipDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 23,
      "gerhean": 14,
      "-": 38,
      "ongch00": 1
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.ApplicationDateIsDatePredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private static final Prefix[] ACCEPTED_PREFIXES \u003d new Prefix[]{PREFIX_COMPANY, PREFIX_ROLE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_STATUS};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            ArgumentTokenizer.tokenize(args, ACCEPTED_PREFIXES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!areAnyPrefixesPresent(argMultimap, ACCEPTED_PREFIXES)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            String[] preamble \u003d argMultimap.getPreamble().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new CompanyContainsKeywordsPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new RoleContainsKeywordsPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new AddressContainsKeywordsPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new PhoneContainsNumbersPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new EmailContainsKeywordsPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new PriorityContainsNumbersPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new StatusContainsKeywordsPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return new FindCommand(predicates, true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return new FindCommand(getRequiredPredicates(argMultimap, ACCEPTED_PREFIXES), false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if not all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns a list of predicate that is required based on the prefixes."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param argumentMultimap the multimap of all the argument and prefixes"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param prefixes the valid prefixes to check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @return the list of predicates based on the prefixes"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private static List\u003cPredicate\u003cInternshipApplication\u003e\u003e getRequiredPredicates(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Prefix... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        for (Prefix p : prefixes) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            if (!argumentMultimap.getValue(p).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            String[] arguments \u003d argumentMultimap.getValue(p).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            Predicate\u003cInternshipApplication\u003e predicate \u003d getPredicate(p, arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            assert (predicate !\u003d null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return predicates;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Gets the correct predicate for a given prefix."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param prefix the prefix that you need the predicate for"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param arguments the arguments of the command for the prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @return the predicate corresponding to the prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private static Predicate\u003cInternshipApplication\u003e getPredicate(Prefix prefix,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String[] arguments) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (prefix.equals(PREFIX_COMPANY)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return new CompanyContainsKeywordsPredicate(Arrays.asList(arguments));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } else if (prefix.equals(PREFIX_ROLE)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return new RoleContainsKeywordsPredicate(Arrays.asList(arguments));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } else if (prefix.equals(PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return new AddressContainsKeywordsPredicate(Arrays.asList(arguments));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } else if (prefix.equals(PREFIX_PHONE)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return new PhoneContainsNumbersPredicate(Arrays.asList(arguments));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } else if (prefix.equals(PREFIX_EMAIL)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return new EmailContainsKeywordsPredicate(Arrays.asList(arguments));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } else if (prefix.equals(PREFIX_DATE)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return new ApplicationDateIsDatePredicate(Arrays.asList(arguments));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } else if (prefix.equals(PREFIX_PRIORITY)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return new PriorityContainsNumbersPredicate(Arrays.asList(arguments));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } else if (prefix.equals(PREFIX_STATUS)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return new StatusContainsKeywordsPredicate(Arrays.asList(arguments));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            //should not happen."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 23,
      "-": 19,
      "ongch00": 89
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/InternshipDiaryParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ArchivalCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InitClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InternshipDiaryParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new RemovalBasedCommandExecutionTypeParser(DeleteCommand.COMMAND_WORD).parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        case InitClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new InitClearCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case InterviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new InterviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new StatisticsCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new RemovalBasedCommandExecutionTypeParser(ArchiveCommand.COMMAND_WORD).parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case UnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new RemovalBasedCommandExecutionTypeParser(UnarchiveCommand.COMMAND_WORD).parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case ArchivalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new ArchivalCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        case ReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return new ReminderCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 62,
      "FeliciaTay": 2,
      "wxwxwxwx9": 15,
      "gerhean": 26,
      "ongch00": 1
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/InterviewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.interviewcode.InterviewCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewDeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Parses input arguments and creates a new Interview Command object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewCommandParser implements Parser\u003cInterviewCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_ADDRESS, PREFIX_IS_ONLINE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewCode interviewCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] indexAndCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            indexAndCode \u003d ParserUtil.parseInterviewPreamble(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            index \u003d ParserUtil.parseIndex(indexAndCode[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            interviewCode \u003d ParserUtil.parseInterviewCode(indexAndCode[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        switch (interviewCode) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return parseAdd(index, argumentMultimap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (indexAndCode.length !\u003d 3) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return parseDelete(index, indexAndCode[2]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (indexAndCode.length !\u003d 3) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return parseEdit(index, indexAndCode[2], argumentMultimap);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new InterviewListCommand(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(\"invalid\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses the add version of interview command. Returns an InterviewAddCommand object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InterviewCommand parseAdd(Index index, ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_IS_ONLINE, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        boolean isOnline \u003d Boolean.parseBoolean(argMultimap.getValue(PREFIX_IS_ONLINE).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // check if parseBoolean mistakenly parsed an invalid value as false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!isOnline \u0026\u0026 !argMultimap.getValue(PREFIX_IS_ONLINE).get().equalsIgnoreCase(\"FALSE\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ApplicationDate date \u003d ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d Interview.createOnlineInterview(date);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // if not an online interview but address prefix is missing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!isOnline \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                InterviewAddCommand.MESSAGE_OFFLINE_INTERVIEW_ADDRESS));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!isOnline) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            interview \u003d Interview.createInterview(false, date, address);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new InterviewAddCommand(index, interview);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses the delete version of interview command. Returns an InterviewDeleteCommand object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InterviewCommand parseDelete(Index internshipIndex, String interviewIndex) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            index \u003d ParserUtil.parseIndex(interviewIndex);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new InterviewDeleteCommand(internshipIndex, index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses the edit version of interview command. Returns an InterviewEditCommand object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InterviewCommand parseEdit(Index internshipIndex,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String interviewIndex, ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            index \u003d ParserUtil.parseIndex(interviewIndex);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand.EditInterviewDescriptor editInterviewDescriptor \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewEditCommand.EditInterviewDescriptor();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInterviewDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInterviewDescriptor.setDate(ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IS_ONLINE).isPresent()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (!BooleanUtil.isValidBoolean(argMultimap.getValue(PREFIX_IS_ONLINE).get())) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new ParseException(BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInterviewDescriptor.setOnline(Boolean.parseBoolean(argMultimap.getValue(PREFIX_IS_ONLINE).get()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!editInterviewDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(InterviewEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new InterviewEditCommand(internshipIndex, index, editInterviewDescriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 135,
      "gerhean": 18
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.interviewcode.InterviewCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Company;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Role;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_INVALID_PREAMBLE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \"Index followed by Command Code of add, edit, or delete is expected\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses {@code args} into a list of {@code Index} and returns it."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Leading and trailing whitespaces for each index will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The list of index will also be sorted and not contain duplicates."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static List\u003cIndex\u003e parseIndices(String args, String delimiter) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String[] indices \u003d args.split(delimiter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInteger\u003e integers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (String oneBasedIndex : indices) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            oneBasedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(oneBasedIndex)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            integers.add(Integer.parseInt(oneBasedIndex));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cIndex\u003e indicesList \u003d integers.stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .distinct()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .sorted()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .map(oneBasedIndex -\u003e Index.fromOneBased(oneBasedIndex))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return indicesList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses a {@code String company} into an {@code Company}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code company} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static Company parseCompany(String company) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedCompany \u003d company.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!Company.isValidCompany(trimmedCompany)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Company(trimmedCompany);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses a {@code String role} into an {@code Role}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code role} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static Role parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedRole \u003d role.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!Role.isValidRole(trimmedRole)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Role(trimmedRole);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses a {@code String date} into an {@code LocalDate}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return LocalDate.parse(trimmedDate, DateTimeFormatter.ofPattern(\"dd MM yyyy\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(\"Date should be in the form: DD MM YYYY\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Parses a {@code String applicationDate} into an {@code ApplicationDate}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static ApplicationDate parseApplicationDate(String applicationDate) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(applicationDate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String trimmedDate \u003d applicationDate.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!ApplicationDate.isValidApplicationDate(trimmedDate)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new ParseException(ApplicationDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return new ApplicationDate(trimmedDate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses a {@code String priority} into an {@code Priority}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses a {@code String status} into an {@code Status}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code status} is invalid."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static Status parseStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedStatus \u003d status.trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        trimmedStatus \u003d trimmedStatus.replaceAll(\"\\\\s\", \"_\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        List\u003cStatus\u003e possibleStatus \u003d Status.possibleStatus(trimmedStatus);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (possibleStatus.size() !\u003d 1) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return possibleStatus.get(0);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses the preamble of an interview command."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * The preamble should consist of either 2 or 3 strings separated by a single whitespace."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code preamble}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * has more than or less than 2/3 strings separated by a single whitespace."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String[] parseInterviewPreamble(String preamble) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(preamble);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] indexAndCode \u003d preamble.trim().split(\" \");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (indexAndCode.length !\u003d 2 \u0026\u0026 indexAndCode.length !\u003d 3) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PREAMBLE);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return indexAndCode;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses a {@code code} into an {@code InterviewCode}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static InterviewCode parseInterviewCode(String code) throws ParseException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedCode \u003d code.trim();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!InterviewCode.isValidCode(trimmedCode)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(InterviewCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return InterviewCode.valueOf(trimmedCode.toUpperCase());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 101,
      "wxwxwxwx9": 30,
      "gerhean": 24,
      "-": 72,
      "ongch00": 16
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/RemovalBasedCommandExecutionTypeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.ALL_PREFIXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.util.PrefixPredicateUtil.getFieldPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.util.PrefixUtil.areAnyPrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.RemovalBasedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Parses input arguments and creates a new RemovalBasedCommand based on the command execution type."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Mainly checks whether the input is of a valid format and whether it conforms to any of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * command execution type formats."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class RemovalBasedCommandExecutionTypeParser implements Parser\u003cRemovalBasedCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Prefixes that are accepted for execution by field in RemovalBasedCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final Prefix[] acceptedPrefixes \u003d {PREFIX_STATUS};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Holds the specific command string that will be used to create the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public RemovalBasedCommandExecutionTypeParser(String commandWord) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Tokenizes the given {@code String} of arguments in the context of the RemovalBasedCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * and retrieves the appropriate execution type based on the content of the string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @return the appropriate RemovalBasedCommand based the the execution type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public RemovalBasedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, ALL_PREFIXES);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommandExecutionType executionType \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            RemovalBasedCommandExecutionType.getExecutionType(args, argMultimap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        switch (executionType) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case BY_INDEX:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return commandByIndex(args);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case BY_INDICES:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return commandByIndices(args);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case BY_FIELD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return commandByField(args);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            // this should never happen"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalStateException(\"unreachable\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a RemovalBasedCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * that is to be executed by index and returns a RemovalBasedCommand for execution."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param args the argument to be parsed into an Index object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private RemovalBasedCommand commandByIndex(String args) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new RemovalBasedCommand(index, RemovalBasedCommandExecutionType.BY_INDEX, commandWord);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            String exceptionMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                RemovalBasedCommand.MESSAGE_USAGE_BY_INDEX.apply(commandWord));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new ParseException(exceptionMessage, pe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemovalBasedCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * that is to be executed by multiple indexes and returns a RemovalBasedCommand for execution."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param args the argument to be parsed into an a set of Index object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private RemovalBasedCommand commandByIndices(String args) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            List\u003cIndex\u003e indicesList \u003d ParserUtil.parseIndices(args, RemovalBasedCommandExecutionType.INDICES_DELIMITER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new RemovalBasedCommand(indicesList, RemovalBasedCommandExecutionType.BY_INDICES, commandWord);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            String exceptionMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                RemovalBasedCommand.MESSAGE_USAGE_BY_INDICES.apply(commandWord));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new ParseException(exceptionMessage, pe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemovalBasedCommand"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * that is to be executed by accepted fields/prefixes and returns a RemovalBasedCommand for execution."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param args the argument to be parsed into a predicate."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private RemovalBasedCommand commandByField(String args) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e predicate \u003d generatePredicate(args);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new RemovalBasedCommand(predicate, RemovalBasedCommandExecutionType.BY_FIELD, commandWord);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Creates the appropriate predicate according to the argument."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param args the argument to be parsed into a predicate."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Predicate\u003cInternshipApplication\u003e generatePredicate(String args) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, acceptedPrefixes);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        boolean isValidField \u003d checkValidField(argMultimap);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (!isValidField) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            String exceptionMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                RemovalBasedCommand.MESSAGE_USAGE_BY_FIELD.apply(commandWord));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new ParseException(exceptionMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return getFieldPredicate(argMultimap, acceptedPrefixes);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private boolean checkValidField(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        boolean hasOnlyOneField \u003d (argMultimap.getSize() - 1) \u003d\u003d 1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        boolean hasAcceptedPrefixesPresent \u003d areAnyPrefixesPresent(argMultimap, acceptedPrefixes);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return hasOnlyOneField \u0026 hasAcceptedPrefixesPresent;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 111,
      "gerhean": 18,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/SelectCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * and returns a SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 24,
      "gerhean": 5
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.ApplicationDateComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.CompanyComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.PriorityComparator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.RoleComparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.StatusComparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Map\u003cPrefix, Comparator\u003cInternshipApplication\u003e\u003e comparatorMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Prefix[] acceptedPrefixes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        comparatorMap \u003d Map.of("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            PREFIX_COMPANY, new CompanyComparator(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            PREFIX_ROLE, new RoleComparator(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            PREFIX_DATE, new ApplicationDateComparator(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            PREFIX_PRIORITY, new PriorityComparator(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            PREFIX_STATUS, new StatusComparator()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        acceptedPrefixes \u003d comparatorMap.keySet().toArray(new Prefix[0]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, acceptedPrefixes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e comparator \u003d argMultimapToComparator(argMultimap);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (argMultimap.getPreamble().equals(SortCommand.REVERSE_KEYWORD)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            comparator \u003d comparator.reversed();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else if (!argMultimap.getPreamble().equals(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new SortCommand(comparator);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns the comparator corresponding to the argMultimap given."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws ParseException if the argMultimap does not contain exactly one accepted prefix."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Comparator\u003cInternshipApplication\u003e argMultimapToComparator(ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        List\u003cPrefix\u003e prefixFound \u003d Arrays.stream(acceptedPrefixes)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .filter(p -\u003e argMultimap.getValue(p).isPresent())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (prefixFound.size() !\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Prefix prefix \u003d prefixFound.get(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (argMultimap.getAllValues(prefix).size() !\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // isPresent check already done above."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!argMultimap.getValue(prefix).get().equals(\"\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return comparatorMap.get(prefix);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 84
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/UnarchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Parses input arguments and creates a new UnarchiveCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class UnarchiveCommandParser implements Parser\u003cUnarchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnarchiveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * and returns a UnarchiveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public UnarchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new UnarchiveCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnarchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 24,
      "gerhean": 6
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/exceptions/ClearCommandConfirmationParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Represents a ClearCommandConfirmationParser parsing error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ClearCommandConfirmationParseException extends ParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public ClearCommandConfirmationParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 11,
      "gerhean": 1
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/util/PrefixPredicateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains utility methods used for prefixes in the various *Parser classes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class PrefixPredicateUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Prefixes and their mapping to its appropriate predicates."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Map\u003cPrefix, PredicateFunction\u003e PREDICATE_MAP \u003d Map.of("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        PREFIX_COMPANY, CompanyContainsKeywordsPredicate::new,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        PREFIX_ROLE, RoleContainsKeywordsPredicate::new,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        PREFIX_STATUS, StatusContainsKeywordsPredicate::new,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        PREFIX_PRIORITY, PriorityContainsNumbersPredicate::new,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        PREFIX_ADDRESS, AddressContainsKeywordsPredicate::new,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        PREFIX_EMAIL, EmailContainsKeywordsPredicate::new,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        PREFIX_PHONE, PhoneContainsNumbersPredicate::new"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * To execute a predicate lazily."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public interface PredicateFunction {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e apply(List\u003cString\u003e t) throws ParseException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Retrieves the value of the prefix from argument multimap"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * and packages it into a predicate for internship application."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Checks if the user input is a valid status."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param argMultimap argument multimap to extract the prefix for predicate creation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @return predicate to filter internship application list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static Predicate\u003cInternshipApplication\u003e getFieldPredicate(ArgumentMultimap argMultimap,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Prefix[] acceptedPrefixes) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cString\u003e keywords \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Prefix selectedPrefix \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Prefix prefix : acceptedPrefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            if (argMultimap.getValue(prefix).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                String input \u003d argMultimap.getValue(prefix).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                selectedPrefix \u003d prefix;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                keywords \u003d Arrays.asList(input.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(keywords);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        keywords \u003d filterValidStatuses(keywords);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e predicate \u003d PREDICATE_MAP.get(selectedPrefix).apply(keywords);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Checks if any of the user keywords contain valid statuses."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param keywords to check for valid statuses."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static List\u003cString\u003e filterValidStatuses(List\u003cString\u003e keywords) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        List\u003cString\u003e validKeywords \u003d keywords.stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .filter(Status::isValidStatus)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (validKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return validKeywords;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 72,
      "gerhean": 28
    }
  },
  {
    "path": "src/main/java/seedu/diary/logic/util/PrefixUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains utility methods used for prefixes in the various *Parser classes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class PrefixUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns true if not all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 26,
      "gerhean": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/InternshipDiary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeSupport;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.archival.InternshipApplicationViewType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.UniqueInternshipApplicationList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Wraps all data at the internship-diary level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Duplicates are not allowed (by .isSameInternshipApplication comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class InternshipDiary implements ReadOnlyInternshipDiary {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private UniqueInternshipApplicationList unarchivedInternships \u003d new UniqueInternshipApplicationList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private UniqueInternshipApplicationList archivedInternships \u003d new UniqueInternshipApplicationList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * The internship list that is shown to the user on the interface currently."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private UniqueInternshipApplicationList displayedInternships \u003d unarchivedInternships;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private InternshipApplicationViewType currentView \u003d InternshipApplicationViewType.UNARCHIVED;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final PropertyChangeSupport changes \u003d new PropertyChangeSupport(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public InternshipDiary() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates an InternshipDiary using the InternshipApplications in the {@code toBeCopied}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public InternshipDiary(ReadOnlyInternshipDiary toBeCopied) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //// property change listeners"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        changes.addPropertyChangeListener(propertyType.toString(), l);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void firePropertyChange(ListenerPropertyType propertyType, Object newValue) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        changes.firePropertyChange(propertyType.toString(), null, newValue);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //// internship list views"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the displayed internship application(s) list with archived internship application(s) list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates its observers about the change in the displayed internships."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void viewArchivedInternshipApplicationList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.displayedInternships \u003d archivedInternships;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.currentView \u003d InternshipApplicationViewType.ARCHIVED;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERNSHIPS, getDisplayedInternshipList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the displayed internship application(s) list with unarchived internship application(s) list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates its observers about the change in the displayed internships."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void viewUnarchivedInternshipApplicationList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.displayedInternships \u003d unarchivedInternships;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.currentView \u003d InternshipApplicationViewType.UNARCHIVED;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERNSHIPS, getDisplayedInternshipList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Retrieves the current view of the internship applications (either archived or unarchived)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationViewType getCurrentView() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this.currentView;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Resets the existing archived and unarchived internship application data of this {@code InternshipDiary}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * with appropriate applications from {@code newData}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void resetData(ReadOnlyInternshipDiary newData) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // check if newData contains any duplicate internship applications as a whole"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        new UniqueInternshipApplicationList().setInternshipApplications(newData.getAllInternshipList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        setArchivedInternships(newData.getAllInternshipList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        setUnarchivedInternships(newData.getAllInternshipList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Replaces the contents of the archived internship application list with {@code internshipApplications}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * {@code internshipApplications} must not contain duplicate internship applications."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setArchivedInternships(List\u003cInternshipApplication\u003e internshipApplications) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e archived \u003d internshipApplications.stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .filter((internshipApplication) -\u003e internshipApplication.isArchived())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.archivedInternships.setInternshipApplications(archived);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Replaces the contents of the unarchived internship application list with {@code internshipApplications}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * {@code internshipApplications} must not contain duplicate internship applications."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setUnarchivedInternships(List\u003cInternshipApplication\u003e internshipApplications) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e unarchived \u003d internshipApplications.stream()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .filter((internshipApplication) -\u003e !internshipApplication.isArchived())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.unarchivedInternships.setInternshipApplications(unarchived);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    //// internship-application-level operations"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true if an internship application with the same identity as {@code internshipApplication}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * exists in the internship diary."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean hasInternship(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return displayedInternships.contains(internshipApplication);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Archives an internship application and moves it to the unarchived list in the internship diary."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The internship application must already exist in the internship diary."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void archiveInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        unarchivedInternships.remove(internshipApplication);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication archived \u003d internshipApplication.archive();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        archivedInternships.add(archived);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Unarchives an internship application and moves it to the unarchived list in the internship diary."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The internship application must already exist in the internship diary."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void unarchiveInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        archivedInternships.remove(internshipApplication);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication unarchived \u003d internshipApplication.unarchive();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        unarchivedInternships.add(unarchived);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Loads an internship application into the internship diary from storage."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Internship application is added to the archived internship application list if it is archived."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Otherwise, it is added to the unarchived internship application list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void loadInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (internshipApplication.isArchived()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            archivedInternships.add(internshipApplication);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            unarchivedInternships.add(internshipApplication);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Adds an internship application to the internship diary from the user interface."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * The internship application must not already exist in the internship diary."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void addInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication internshipApplicationToAdd \u003d internshipApplication;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (currentView.equals(InternshipApplicationViewType.ARCHIVED)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            internshipApplicationToAdd \u003d internshipApplication.archive();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        displayedInternships.add(internshipApplicationToAdd);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Replaces the given internship application {@code target} in the list with {@code editedInternship}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * {@code target} must exist in the internship diary."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * The internship application identity of {@code editedInternship}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * must not be the same as another existing internship application in the internship diary."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void setInternship(InternshipApplication target, InternshipApplication editedInternship) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(editedInternship);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        displayedInternships.setInternshipApplication(target, editedInternship);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Removes {@code key} from this {@code InternshipDiary}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * {@code key} must exist in the internship diary."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void removeInternship(InternshipApplication key) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        displayedInternships.remove(key);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return displayedInternships.asUnmodifiableObservableList().size() + \" internship application(s)\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public ObservableList\u003cInternshipApplication\u003e getDisplayedInternshipList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return displayedInternships.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public ObservableList\u003cInternshipApplication\u003e getAllInternshipList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return FXCollections.concat(archivedInternships.asUnmodifiableObservableList(),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            unarchivedInternships.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            || (other instanceof InternshipDiary // instanceof handles nulls"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 archivedInternships.equals(((InternshipDiary) other).archivedInternships))"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 unarchivedInternships.equals(((InternshipDiary) other).unarchivedInternships)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 currentView.equals(((InternshipDiary) other).currentView);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return Objects.hash(archivedInternships, unarchivedInternships, currentView);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 13,
      "wxwxwxwx9": 130,
      "gerhean": 89
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/ListenerPropertyType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Enums for the ListenerPropertyTypes to pass to addPropertyChangeListener in Model."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public enum ListenerPropertyType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    COMPARATOR(\"comparator\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    PREDICATE(\"predicate\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    FILTERED_INTERNSHIP_APPLICATIONS(\"filteredInternshipApplications\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    DISPLAYED_INTERNSHIPS(\"displayedInternships\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    VIEW_TYPE(\"currentView\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    DISPLAYED_INTERNSHIP_DETAIL(\"displayedDetails\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    DISPLAYED_INTERVIEWS(\"displayedInterviews\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private String propertyName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    ListenerPropertyType(String propertyName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.propertyName \u003d propertyName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return propertyName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 2,
      "wxwxwxwx9": 2,
      "gerhean": 21
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.archival.InternshipApplicationViewType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.statistics.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    Predicate\u003cInternshipApplication\u003e PREDICATE_SHOW_ALL_INTERNSHIPS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the user prefs\u0027 internship diary file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    Path getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Sets the user prefs\u0027 internship diary file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param internshipDiaryFilePath new file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void setInternshipDiaryFilePath(Path internshipDiaryFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Replaces internship diary with the data in {@code internshipDiary}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param internshipDiary new internship diary."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void setInternshipDiary(ReadOnlyInternshipDiary internshipDiary);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns the InternshipDiary"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    ReadOnlyInternshipDiary getInternshipDiary();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true if an internship application with the same identity as {@code internshipApplication}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * exists in the Internship Diary."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    boolean hasInternshipApplication(InternshipApplication internshipApplication);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Archives the given internship application."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The application must exist in the internship diary."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    void archiveInternshipApplication(InternshipApplication target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Unarchives the given internship application."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The application must exist in the internship diary."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    void unarchiveInternshipApplication(InternshipApplication target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Deletes the given internship application."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * The application must exist in the internship diary."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void deleteInternshipApplication(InternshipApplication target);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Adds the given internship application."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * {@code internshipApplication} must not already exist in the internship diary"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void addInternshipApplication(InternshipApplication internshipApplication);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Replaces the given internship application {@code target} with {@code editedInternship}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * {@code target} must exist in the internship application."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * The internship application identify of {@code editedInternship} must not be the same"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * as another existing internship application in the internship diary."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void setInternshipApplication(InternshipApplication target, InternshipApplication editedInternship);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns an unmodifiable view of the filtered internship applications list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Updates the filter of the filtered internship application list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void updateFilteredInternshipApplicationList(Predicate\u003cInternshipApplication\u003e predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Updates the filter of the filtered internship application list to sort by the given {@code predicate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    void updateFilteredInternshipApplicationList(Comparator\u003cInternshipApplication\u003e comparator);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates the currently used internship application(s) list with the archived internship application list(s)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    void viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates the currently used internship application(s) list with the unarchived internship application list(s)."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    void viewUnarchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns an unmodifiable view of the concatenated archived and unarchived internship applications list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    ObservableList\u003cInternshipApplication\u003e getAllInternshipApplicationList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Retrieves the current view of the internship diary."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    InternshipApplicationViewType getCurrentView();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Changes the currently displayed InternshipApplicationDetail."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    void displayInternshipDetail(InternshipApplication internshipApplication);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Adds a property listener for any changes in {@code propertyType} used."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns a statistics object that can compute relevant internship application statistics."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 55,
      "FeliciaTay": 2,
      "wxwxwxwx9": 40,
      "gerhean": 32,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.COMPARATOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIPS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIP_DETAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.FILTERED_INTERNSHIP_APPLICATIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.PREDICATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.VIEW_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeSupport;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.archival.InternshipApplicationViewType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.statistics.Statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents the in-memory model of the internship diary data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ModelManager implements Model, PropertyChangeListener {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private InternshipDiary internshipDiary;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private FilteredList\u003cInternshipApplication\u003e filteredInternshipApplications;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private SortedList\u003cInternshipApplication\u003e sortedFilteredInternshipApplications;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final PropertyChangeSupport changes \u003d new PropertyChangeSupport(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Initializes a ModelManager with the given internshipDiary and userPrefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ModelManager(ReadOnlyInternshipDiary internshipDiary, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireAllNonNull(internshipDiary, userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        logger.fine(\"Initializing with internship diary: \" + internshipDiary + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.internshipDiary \u003d new InternshipDiary(internshipDiary);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Model manager listens to any changes in displayedInternships in internshipDiary"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.internshipDiary.addPropertyChangeListener(DISPLAYED_INTERNSHIPS, this);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        filteredInternshipApplications \u003d new FilteredList\u003c\u003e(this.internshipDiary.getDisplayedInternshipList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        sortedFilteredInternshipApplications \u003d new SortedList\u003c\u003e(filteredInternshipApplications);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this(new InternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return userPrefs.getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInternshipDiaryFilePath(Path internshipDiaryFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(internshipDiaryFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        userPrefs.setInternshipDiaryFilePath(internshipDiaryFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InternshipDiary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public ReadOnlyInternshipDiary getInternshipDiary() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return internshipDiary;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInternshipDiary(ReadOnlyInternshipDiary internshipDiary) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.internshipDiary.resetData(internshipDiary);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void addInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, internshipApplication);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.addInternshipApplication(internshipApplication);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void deleteInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, target, null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.removeInternship(target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void archiveInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, target, null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.archiveInternshipApplication(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void unarchiveInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, target, null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.unarchiveInternshipApplication(target);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return internshipDiary.hasInternship(internshipApplication);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInternshipApplication(InternshipApplication target, InternshipApplication editedInternship) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireAllNonNull(target, editedInternship);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, target, editedInternship);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipDiary.setInternship(target, editedInternship);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Internship Application List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns an unmodifiable view of the concatenated archived and unarchived list of {@code InternshipApplication}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * backed by the internal list of {@code versionedInternshipDiary}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public ObservableList\u003cInternshipApplication\u003e getAllInternshipApplicationList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return internshipDiary.getAllInternshipList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns an unmodifiable view of the current list of {@code InternshipApplication}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * backed by the internal list of {@code versionedInternshipDiary}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return sortedFilteredInternshipApplications;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void updateFilteredInternshipApplicationList(Predicate\u003cInternshipApplication\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        filteredInternshipApplications.setPredicate(predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(PREDICATE, predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void updateFilteredInternshipApplicationList(Comparator\u003cInternshipApplication\u003e comparator) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        sortedFilteredInternshipApplications.setComparator(comparator);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(COMPARATOR, comparator);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Archival view \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void viewArchivedInternshipApplicationList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void viewUnarchivedInternshipApplicationList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.viewUnarchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationViewType getCurrentView() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return internshipDiary.getCurrentView();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PropertyChanges \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void displayInternshipDetail(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, internshipApplication);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        changes.addPropertyChangeListener(propertyType.toString(), l);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void firePropertyChange(ListenerPropertyType propertyType, Object newValue) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        changes.firePropertyChange(propertyType.toString(), null, newValue);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private void firePropertyChange(ListenerPropertyType propertyType, Object oldValue, Object newValue) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        changes.firePropertyChange(propertyType.toString(), oldValue, newValue);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Receives the latest changes in displayed internships from internship diary."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates the filtered and sorted internship applications accordingly"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * and fires property change event to its listeners."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param e event that describes the changes in the updated property."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        refreshFilteredInternshipApplications(e.getNewValue());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        fireAllPropertyChanges();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates the current filtered internship applicaations with the refreshed displayed internship applications."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param newInternshipApplications the new list to replace the current filtered internship applications."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void refreshFilteredInternshipApplications(Object newInternshipApplications) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cInternshipApplication\u003e ia \u003d (ObservableList\u003cInternshipApplication\u003e) newInternshipApplications;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        filteredInternshipApplications \u003d new FilteredList\u003c\u003e(ia);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        sortedFilteredInternshipApplications \u003d new SortedList\u003c\u003e(filteredInternshipApplications);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Fires all the relevant property changes to the listeners."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void fireAllPropertyChanges() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(FILTERED_INTERNSHIP_APPLICATIONS, getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, null);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(COMPARATOR, null);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        firePropertyChange(PREDICATE, null);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        firePropertyChange(VIEW_TYPE, getCurrentView());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return internshipDiary.equals(other.internshipDiary)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 filteredInternshipApplications.equals(other.filteredInternshipApplications);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 23,
      "wxwxwxwx9": 122,
      "gerhean": 57,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/ReadOnlyInternshipDiary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Unmodifiable view of an internship diary"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public interface ReadOnlyInternshipDiary {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns an unmodifiable view of the currently displayed internship application list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * This list will not contain any duplicate internship application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    ObservableList\u003cInternshipApplication\u003e getDisplayedInternshipList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns an unmodifiable view of both the archived and unarchived internship application list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * This list will not contain any duplicate internship application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    ObservableList\u003cInternshipApplication\u003e getAllInternshipList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Adds a property listener for any changes in {@code propertyType} used."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 2,
      "wxwxwxwx9": 16,
      "gerhean": 14
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    Path getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 1,
      "gerhean": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Path internshipDiaryFilePath \u003d Paths.get(\"data\", \"internshipdiary.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        setInternshipDiaryFilePath(newUserPrefs.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return internshipDiaryFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInternshipDiaryFilePath(Path internshipDiaryFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(internshipDiaryFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.internshipDiaryFilePath \u003d internshipDiaryFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 internshipDiaryFilePath.equals(o.internshipDiaryFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return Objects.hash(guiSettings, internshipDiaryFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + internshipDiaryFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 10,
      "gerhean": 4,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Represents an InternshipApplication\u0027s address in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([^\\\\s].*)?$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 4,
      "-": 50,
      "ongch00": 2
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/ApplicationDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents a InternshipApplication\u0027s application date in the internship diary."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidApplicationDate(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class ApplicationDate implements Comparable\u003cApplicationDate\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        \"Date should be a valid date in the form: DD MM YYYY\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // Default Pattern"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String DATE_PATTERN \u003d \"dd MM yyyy\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    // To print pattern"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DATE_PATTERN_TO_PRINT \u003d \"dd MMM yyyy\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public final LocalDate fullApplicationDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Constructs a {@code ApplicationDate}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public ApplicationDate(String date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        checkArgument(isValidApplicationDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        fullApplicationDate \u003d DateTimeUtil.parseDate(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Constructs a {@code ApplicationDate}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param date A valid date of type LocalDate."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public ApplicationDate(LocalDate date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        fullApplicationDate \u003d date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if a given string is a valid application date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static boolean isValidApplicationDate(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            //simple parse test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            DateTimeUtil.parseDate(test);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Prints the date in the print format provided."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String printDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return fullApplicationDate.format(DateTimeFormatter.ofPattern(DATE_PATTERN_TO_PRINT));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return fullApplicationDate.format(DateTimeFormatter.ofPattern(DATE_PATTERN));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof ApplicationDate // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 fullApplicationDate.equals(((ApplicationDate) other).fullApplicationDate)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compareTo(ApplicationDate other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return fullApplicationDate.compareTo(other.fullApplicationDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return String.valueOf(fullApplicationDate).hashCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 9,
      "gerhean": 15,
      "ongch00": 66
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/Company.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents a InternshipApplication\u0027s company in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCompany(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class Company implements Comparable\u003cCompany\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        \"Companies should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * The first character of the company must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public final String fullCompany;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Constructs a {@code Company}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param company A valid company."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Company(String company) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        checkArgument(isValidCompany(company), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        fullCompany \u003d company;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if a given string is a valid company."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static boolean isValidCompany(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return fullCompany;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof Company // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 fullCompany.equals(((Company) other).fullCompany)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return fullCompany.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Does string comparison of company name."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compareTo(Company other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return fullCompany.compareToIgnoreCase(other.fullCompany); // String comparison."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 11,
      "ongch00": 55
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents a InternshipApplication\u0027s email in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String DOMAIN_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(\" + DOMAIN_REGEX + \")?$\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param email A valid email diary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 7,
      "-": 48,
      "ongch00": 12
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/InternshipApplication.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERVIEWS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.beans.PropertyChangeSupport;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.model.ListenerPropertyType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents an InternshipApplication in the internship diary."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class InternshipApplication {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Company company;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final ApplicationDate applicationDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Boolean isArchived;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Boolean isGhostedOrRejected;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private final Status lastStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final PropertyChangeSupport changes \u003d new PropertyChangeSupport(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private List\u003cInterview\u003e interviews;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public InternshipApplication(Company company, Role role, Address address, Phone phone, Email email,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDate applicationDate, Priority priority, Status status) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireAllNonNull(company, phone, email, address, status);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.applicationDate \u003d applicationDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.isArchived \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.isGhostedOrRejected \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.lastStage \u003d status;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        interviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Overloaded constructor to set isArchived, lastStage and interviews fields."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplication(Company company, Role role, Address address, Phone phone, Email email,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDate applicationDate, Priority priority, Status status, Boolean isArchived, Status lastStage,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInterview\u003e interviews) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireAllNonNull(company, phone, email, address, status);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.applicationDate \u003d applicationDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.isGhostedOrRejected \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.lastStage \u003d lastStage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.interviews \u003d interviews;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Overloaded constructor to set isArchived, lastStage and interviews fields."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public InternshipApplication(Company company, Role role, Address address, Phone phone, Email email,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDate applicationDate, Priority priority, Status status, Boolean isArchived,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        List\u003cInterview\u003e interviews) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        requireAllNonNull(company, phone, email, address, status);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.applicationDate \u003d applicationDate;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.isGhostedOrRejected \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.lastStage \u003d status;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviews \u003d interviews;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Overloaded constructor to set lastStage and interviews field."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public InternshipApplication(Company company, Role role, Address address, Phone phone, Email email,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ApplicationDate applicationDate, Priority priority, Status status,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Status lastStage, List\u003cInterview\u003e interviews) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        requireAllNonNull(company, phone, email, address, status);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.applicationDate \u003d applicationDate;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.isArchived \u003d false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.isGhostedOrRejected \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.lastStage \u003d lastStage;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviews \u003d interviews;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Company getCompany() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return company;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public ApplicationDate getApplicationDate() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return applicationDate;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Sets variable \u0027isGhostedOrRejected\u0027 to true to keep track of whether the last stage before the internship"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * application failed (ghosted/ rejected) needs to be stored."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void setIsGhostedOrRejected(Boolean bool) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.isGhostedOrRejected \u003d bool;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public Boolean getIsGhostedOrRejected() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return isGhostedOrRejected;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns an InternshipApplication updated with last stage."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @param lastStage where the application failed (APPLIED/ INTERVIEW/ OFFERED)."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @return InternshipApplication with lastStage specified."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public InternshipApplication setLastStage(Status lastStage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return new InternshipApplication(company, role, address, phone, email, applicationDate, priority, status,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            lastStage, interviews);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns the last stage before the status of an internship application was updated to be ghosted/ rejected."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @return an enum of Status (APPLIED/ OFFERED/ INTERVIEW)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public Status getLastStage() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return lastStage;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns the last stage failed."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @return message of the last stage failed, else an empty string."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public String getLastStageMessage() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (status \u003d\u003d Status.GHOSTED || status \u003d\u003d Status.REJECTED) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return \" [You failed at \" + lastStage.toString() + \":(]\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public Boolean isArchived() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return isArchived;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the earliest interview from today in the list of interviews of the application."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param todayDate The current date today."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return an Optional of LocalDate. Will return empty if there are no interviews after today\u0027s date."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Optional\u003cInterview\u003e getEarliestInterview(LocalDate todayDate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interviews.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview earliestInterview \u003d interviews.get(0);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (Interview currentInterview : interviews) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            LocalDate earliestDate \u003d earliestInterview.getInterviewDate();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            LocalDate currentDate \u003d currentInterview.getInterviewDate();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if ((currentDate.compareTo(earliestDate) \u003c\u003d 0 || earliestDate.compareTo(todayDate) \u003c 0)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 currentDate.compareTo(todayDate) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                earliestInterview \u003d currentInterview;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return earliestInterview.getInterviewDate().compareTo(todayDate) \u003e\u003d 0"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            ? Optional.of(earliestInterview) : Optional.empty();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Adds given interview into interview list. Will fire property change event"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void addInterview(Interview interview) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews.add(interview);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERVIEWS, interviews);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Deletes given interview from interview list. Will fire property change event"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void deleteInterview(Interview interview) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews.remove(interview);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERVIEWS, interviews);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Sets given interview into specified index in the interview list. Will fire property change event"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInterview(Index index, Interview interview) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews.set(index.getZeroBased(), interview);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERVIEWS, interviews);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Interview getInterview(int index) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviews.get(index);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInterviews(List\u003cInterview\u003e interviews) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(interviews);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviews.addAll(interviews);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        firePropertyChange(DISPLAYED_INTERVIEWS, this.interviews);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public List\u003cInterview\u003e getInterviews() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviews;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean hasInterview(Interview interview) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviews.contains(interview);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns a deep, archived copy of this internship application (isArchived field is marked true)."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The rationale behind this is to uphold immutability."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplication archive() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new InternshipApplication("
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.company,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.role,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.address,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.phone,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.email,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.applicationDate,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.priority,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.status,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            true,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            this.lastStage,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            this.interviews"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns a deep, unarchived copy of this internship application (isArchived field is marked false)."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The rationale behind this is to uphold immutability."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplication unarchive() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new InternshipApplication("
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.company,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.role,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.address,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.phone,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.email,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.applicationDate,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.priority,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.status,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            this.lastStage,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            this.interviews"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns application date or the earliest interview date scheduled, whichever is closer to current date."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @return earliest date from current date."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public ApplicationDate getEarliestApplicationOrInterviewDate() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Optional\u003cInterview\u003e earliestInterview \u003d getEarliestInterview(currentDate);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (applicationDate.fullApplicationDate.compareTo(currentDate) \u003c 0) { // application date before current date"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            if (earliestInterview.isPresent()) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                return earliestInterview.get().getDate();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                return applicationDate;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (earliestInterview.isPresent()) { // there are interviews after current date"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            ApplicationDate earliestInterviewDate \u003d earliestInterview.get().getDate();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return applicationDate.compareTo(earliestInterviewDate) \u003e\u003d 0 ? earliestInterviewDate : applicationDate;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        } else { // there are no interviews after current date"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return applicationDate;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PropertyChanges \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        changes.addPropertyChangeListener(propertyType.toString(), l);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Removes all property change listeners from Internship Application."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void removeAllPropertyChangeListener() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        PropertyChangeListener[] propertyChangeListeners \u003d changes.getPropertyChangeListeners();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (PropertyChangeListener pcl : propertyChangeListeners) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            changes.removePropertyChangeListener(pcl);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private void firePropertyChange(ListenerPropertyType propertyType, Object newValue) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        changes.firePropertyChange(propertyType.toString(), null, newValue);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if all but priority and status fields are the same."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * This defines a weaker notion of equality between two internship applications."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isSameInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (internshipApplication \u003d\u003d this) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internshipApplication !\u003d null"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internshipApplication.getCompany().equals(getCompany())"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internshipApplication.getRole().equals(getRole())"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internshipApplication.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internshipApplication.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internshipApplication.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 internshipApplication.getApplicationDate().equals(getApplicationDate())"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u0026\u0026 internshipApplication.isArchived().equals(isArchived())"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u0026\u0026 internshipApplication.getInterviews().equals(getInterviews());"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if both internship application have the fields."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * This defines a stronger notion of equality between two internship applications."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!(other instanceof InternshipApplication)) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        InternshipApplication internshipApplication \u003d (InternshipApplication) other;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internshipApplication.getCompany().equals(getCompany())"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internshipApplication.getRole().equals(getRole())"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internshipApplication.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internshipApplication.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internshipApplication.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internshipApplication.getApplicationDate().equals(getApplicationDate())"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internshipApplication.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u0026\u0026 internshipApplication.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u0026\u0026 internshipApplication.isArchived().equals(isArchived())"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u0026\u0026 internshipApplication.getInterviews().equals(getInterviews());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return Objects.hash(company, role, address, phone, email, applicationDate, priority, status, isArchived);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        builder.append(getCompany())"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(\" Role: \")"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(getRole())"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(\" Application Date: \")"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(getApplicationDate())"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(\" Priority: \")"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(getPriority())"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(\" Status: \")"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .append(getStatus())"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .append(getLastStageMessage())"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .append(\" Archived: \")"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .append(isArchived());"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "foochifa": 101,
      "FeliciaTay": 119,
      "wxwxwxwx9": 64,
      "gerhean": 20,
      "ongch00": 131
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents an InternshipApplication\u0027s phone number in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        \"Phone numbers should only contain numbers (can include \u0027+\u0027 at the start)\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \",\\nand it should be at least 3 and at most 15 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(\\\\+?\\\\d{3,15})?$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 5,
      "-": 45,
      "ongch00": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents an InternshipApplication\u0027s priority in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(int)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class Priority implements Comparable\u003cPriority\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final int HIGHEST_PRIORITY \u003d 10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final int LOWEST_PRIORITY \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        \"Priority should only contain a number between 0 to 10 inclusive, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public final int fullPriority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param priority A valid priority in the form of an index."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Priority(int priority) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        fullPriority \u003d priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a {@code Priority}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param priority a valid priority in the from of a String."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        fullPriority \u003d Integer.parseInt(priority);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true if a given integer is a valid priority."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static boolean isValidPriority(int test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return test \u003e\u003d LOWEST_PRIORITY \u0026\u0026 test \u003c\u003d HIGHEST_PRIORITY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true if a given string is a valid priority."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            int priority \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return isValidPriority(priority);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return String.valueOf(fullPriority);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 fullPriority \u003d\u003d ((Priority) other).fullPriority); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compareTo(Priority other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return fullPriority - other.fullPriority;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return String.valueOf(fullPriority).hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 22,
      "gerhean": 9,
      "ongch00": 49
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/Role.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents a InternshipApplication\u0027s role in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class Role implements Comparable\u003cRole\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        \"Roles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * The first character of the role must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public final String fullRole;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Constructs a {@code Role}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param role A valid role."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Role(String role) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        checkArgument(isValidRole(role), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        fullRole \u003d role;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if a given string is a valid role."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static boolean isValidRole(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return fullRole;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof Role // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 fullRole.equals(((Role) other).fullRole)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compareTo(Role other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return fullRole.compareToIgnoreCase(other.fullRole);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return fullRole.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 8,
      "ongch00": 54
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/UniqueInternshipApplicationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.exceptions.DuplicateInternshipApplicationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.exceptions.InternshipApplicationNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * A list of internship applications that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * A internship application is considered unique by comparing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * using {@code InternshipApplication#InternshipApplication(InternshipApplication)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * As such, adding and updating of internship applications"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * uses InternshipApplication#InternshipApplication(InternshipApplication) for equality"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * so as to ensure that the internship application being added or updated is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * unique in terms of identity in the UniqueInternshipApplicationList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * However, the removal of a internship application uses InternshipApplication#equals(Object) so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * as to ensure that the internship application with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * @see InternshipApplication#isSameInternshipApplication(InternshipApplication)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class UniqueInternshipApplicationList implements Iterable\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final ObservableList\u003cInternshipApplication\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final ObservableList\u003cInternshipApplication\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if the list contains an equivalent internship application as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean contains(InternshipApplication toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameInternshipApplication);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Adds a internship application to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * The internship application must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void add(InternshipApplication toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new DuplicateInternshipApplicationException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Replaces the internship application {@code target} in the list with {@code editedInternshipApplication}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * The internship application identity of {@code editedInternshipApplication}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * must not be the same as another existing internship application in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void setInternshipApplication(InternshipApplication target,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        InternshipApplication editedInternshipApplication) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireAllNonNull(target, editedInternshipApplication);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new InternshipApplicationNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!target.isSameInternshipApplication(editedInternshipApplication) \u0026\u0026 contains(editedInternshipApplication)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new DuplicateInternshipApplicationException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        internalList.set(index, editedInternshipApplication);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Removes the equivalent internship application from the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * The internship application must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void remove(InternshipApplication toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new InternshipApplicationNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void setInternshipApplications(UniqueInternshipApplicationList replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Replaces the contents of this list with {@code internship applications}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * {@code internship applications} must not contain duplicate internship applications."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void setInternshipApplications(List\u003cInternshipApplication\u003e internshipApplications) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireAllNonNull(internshipApplications);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!internshipApplicationsAreUnique(internshipApplications)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new DuplicateInternshipApplicationException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        internalList.setAll(internshipApplications);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public ObservableList\u003cInternshipApplication\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Iterator\u003cInternshipApplication\u003e iterator() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof UniqueInternshipApplicationList // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueInternshipApplicationList) other).internalList));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if {@code internship applications} contains only unique internship applications."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private boolean internshipApplicationsAreUnique(List\u003cInternshipApplication\u003e internshipApplications) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        for (int i \u003d 0; i \u003c internshipApplications.size() - 1; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            for (int j \u003d i + 1; j \u003c internshipApplications.size(); j++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                if (internshipApplications.get(i).isSameInternshipApplication(internshipApplications.get(j))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 1,
      "gerhean": 5,
      "ongch00": 139
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/exceptions/DuplicateInternshipApplicationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Signals that the operation will result in duplicate Internship Application (Internship Application are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * duplicates if they have the same value in all but priority and status fields)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class DuplicateInternshipApplicationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public DuplicateInternshipApplicationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        super(\"Operation would result in duplicate internship application\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "ongch00": 10
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/exceptions/InternshipApplicationNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Signals that the operation is unable to find the specified internship application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class InternshipApplicationNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gerhean": 3,
      "ongch00": 5
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/interview/Interview.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.interview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an Interview in the Internship Diary."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Interviews are always tagged to an internship application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public abstract class Interview {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    protected final ApplicationDate interviewDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    protected final Address interviewAddress;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    protected Interview(ApplicationDate interviewDate, Address interviewAddress) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(interviewDate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(interviewAddress);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d interviewDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewAddress \u003d interviewAddress;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a new online or offline interview based on the parameters given."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * This is the default static constructor to create an interview object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static Interview createInterview(boolean isOnline,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ApplicationDate interviewDate, Address interviewAddress) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (isOnline) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new OnlineInterview(interviewDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new OfflineInterview(interviewDate, interviewAddress);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a new online interview."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * This constructor is only for adding a new online interview."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static Interview createOnlineInterview(ApplicationDate interviewDate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new OnlineInterview(interviewDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the interview date in local date format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public LocalDate getInterviewDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviewDate.fullApplicationDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ApplicationDate getDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviewDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Address getInterviewAddress() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviewAddress;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns a boolean on whether the interview is to be conducted online."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public abstract boolean getIsOnline();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!(other instanceof Interview)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d (Interview) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interview.getInterviewDate().equals(getInterviewDate())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 interview.getInterviewAddress().equals(getInterviewAddress())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u0026\u0026 this.getIsOnline() \u003d\u003d interview.getIsOnline();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 75,
      "gerhean": 6
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/interview/OfflineInterview.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.diary.model.internship.interview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an interview that is scheduled to be conducted offline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Address field is compulsory when creating this Interview object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class OfflineInterview extends Interview {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public OfflineInterview(ApplicationDate interviewDate, Address interviewAddress) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(interviewDate, interviewAddress);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean getIsOnline() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        builder.append(\"Offline Interview on: \")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .append(getInterviewDate().format(DateTimeFormatter.ofPattern(ApplicationDate.DATE_PATTERN)))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .append(\" at: \")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .append(getInterviewAddress());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 31
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/interview/OnlineInterview.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.diary.model.internship.interview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an interview that is scheduled to be conducted online."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Address field will be automatically replace with an \u0027NA\u0027, meaning Not Applicable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class OnlineInterview extends Interview {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Address ADDRESS_NOT_APPLICABLE \u003d new Address(\"NA\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public OnlineInterview(ApplicationDate interviewDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(interviewDate, ADDRESS_NOT_APPLICABLE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean getIsOnline() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        builder.append(\"Online Interview on: \")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .append(getInterviewDate().format(DateTimeFormatter.ofPattern(ApplicationDate.DATE_PATTERN)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 31
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/AddressContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Address} contains any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class AddressContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (keywords \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .anyMatch(keyword -\u003e internshipApplication.getAddress().value.toLowerCase()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords \u003d\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (isNull()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return PREFIX_ADDRESS.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_ADDRESS + String.join(\" \", keywords);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 12,
      "ongch00": 37
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/ApplicationDateDuePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Application Date} is within 7 days from current date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class ApplicationDateDuePredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private final LocalDate currentDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public ApplicationDateDuePredicate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate applicationDate \u003d internshipApplication.getApplicationDate().fullApplicationDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // count days between current internship application date and current date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Period period \u003d Period.between(currentDate, applicationDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return (applicationDate.compareTo(currentDate) \u003e\u003d 0) \u0026\u0026 (period.getDays() \u003c\u003d 7);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            || (other instanceof ApplicationDateDuePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u0026\u0026 currentDate.equals(((ApplicationDateDuePredicate) other).currentDate)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 31,
      "gerhean": 2,
      "ongch00": 1
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/ApplicationDateIsDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code ApplicationDate} matches the date given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class ApplicationDateIsDatePredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public ApplicationDateIsDatePredicate(LocalDate date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public ApplicationDateIsDatePredicate(List\u003cString\u003e dateArr) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String dateStr \u003d String.join(\" \", dateArr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.date \u003d ParserUtil.parseApplicationDate(dateStr).fullApplicationDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internshipApplication.getApplicationDate().fullApplicationDate.isEqual(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof ApplicationDateIsDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 date.isEqual(((ApplicationDateIsDatePredicate) other).date)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return date \u003d\u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (isNull()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return PREFIX_DATE.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_DATE.toString() + date.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 20,
      "ongch00": 35
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/CompanyContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Company} contains any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class CompanyContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public CompanyContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (keywords \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .anyMatch(keyword -\u003e internshipApplication.getCompany().fullCompany.toLowerCase()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof CompanyContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 keywords.equals(((CompanyContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords \u003d\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (isNull()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return PREFIX_COMPANY.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_COMPANY + String.join(\" \", keywords);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 12,
      "ongch00": 37
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/CustomToStringPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Gives a predicate an overwritten toString method."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class CustomToStringPredicate\u003cT\u003e implements Predicate\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final Predicate\u003cT\u003e internalPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String internalString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public CustomToStringPredicate(Predicate\u003cT\u003e internalPredicate, String internalString) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.internalPredicate \u003d internalPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.internalString \u003d internalString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean test(T t) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internalPredicate.test(t);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            || other instanceof CustomToStringPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            \u0026\u0026 internalPredicate.equals(((CustomToStringPredicate\u003c?\u003e) other).internalPredicate)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            \u0026\u0026 internalString.equals(((CustomToStringPredicate\u003c?\u003e) other).internalString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internalString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 34
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/EmailContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Email} contains any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class EmailContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (keywords \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .anyMatch(keyword -\u003e internshipApplication.getEmail().value.toLowerCase()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords \u003d\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (isNull()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return PREFIX_EMAIL.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_EMAIL + String.join(\" \", keywords);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 12,
      "ongch00": 37
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/InterviewDateDuePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Application Date} is within 7 days from current date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class InterviewDateDuePredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private final LocalDate currentDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public InterviewDateDuePredicate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        boolean hasAtLeastOneInterviewDue \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInterview\u003e interviews \u003d internshipApplication.getInterviews();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        for (Interview interview : interviews) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            LocalDate interviewDate \u003d interview.getInterviewDate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            // count days between every interview in the internship application and current date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            Period duration \u003d Period.between(currentDate, interviewDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            if ((interviewDate.compareTo(currentDate) \u003e\u003d 0) \u0026\u0026 (duration.getDays() \u003c\u003d 7)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                hasAtLeastOneInterviewDue \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return hasAtLeastOneInterviewDue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            || (other instanceof InterviewDateDuePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u0026\u0026 currentDate.equals(((InterviewDateDuePredicate) other).currentDate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 2,
      "FeliciaTay": 38,
      "gerhean": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/IsNotArchivedPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code isArchived} is false."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class IsNotArchivedPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return !internshipApplication.isArchived();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            || (other instanceof IsNotArchivedPredicate); // instanceof handles nulls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 21,
      "gerhean": 2
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/PhoneContainsNumbersPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Phone} contains any of the numbers given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class PhoneContainsNumbersPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e numbers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public PhoneContainsNumbersPredicate(List\u003cString\u003e numbers) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.numbers \u003d numbers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (numbers \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return numbers.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .anyMatch(number -\u003e internshipApplication.getPhone().value.toLowerCase().contains(number));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof PhoneContainsNumbersPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 numbers.equals(((PhoneContainsNumbersPredicate) other).numbers)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return numbers \u003d\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (isNull()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return PREFIX_PHONE.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_PHONE + String.join(\" \", numbers);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 12,
      "ongch00": 36
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/PriorityContainsNumbersPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Priority} matches any of the numbers given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class PriorityContainsNumbersPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e numbers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public PriorityContainsNumbersPredicate(List\u003cString\u003e numbers) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.numbers \u003d numbers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (numbers \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return numbers.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .anyMatch(number -\u003e Integer.toString(internshipApplication.getPriority().fullPriority)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .toLowerCase().equals(number));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof PriorityContainsNumbersPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 numbers.equals(((PriorityContainsNumbersPredicate) other).numbers)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return numbers \u003d\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (isNull()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return PREFIX_PRIORITY.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_PRIORITY + String.join(\" \", numbers);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 12,
      "ongch00": 37
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/RoleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Role} contains any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class RoleContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public RoleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (keywords \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .anyMatch(keyword -\u003e internshipApplication.getRole().fullRole.toLowerCase()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof RoleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 keywords.equals(((RoleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords \u003d\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (isNull()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return PREFIX_ROLE.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_ROLE + String.join(\" \", keywords);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 12,
      "ongch00": 37
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/StatusContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Status} contains any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class StatusContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public StatusContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (keywords \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .anyMatch(keyword -\u003e internshipApplication.getStatus().name().toLowerCase()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            || (other instanceof StatusContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u0026\u0026 keywords.equals(((StatusContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords \u003d\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (isNull()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return PREFIX_STATUS.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return PREFIX_STATUS + String.join(\" \", keywords);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 12,
      "ongch00": 37
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/StatusIsInterviewPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Status} is INTERVIEW."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class StatusIsInterviewPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return internshipApplication.getStatus() \u003d\u003d Status.INTERVIEW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            || (other instanceof StatusIsInterviewPredicate); // instanceof handles nulls"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 20,
      "gerhean": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/internship/predicate/StatusIsWishlistPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Status} is WISHLIST."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class StatusIsWishlistPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return internshipApplication.getStatus() \u003d\u003d Status.WISHLIST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            || (other instanceof StatusIsWishlistPredicate); // instanceof handles nulls"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 21,
      "gerhean": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/statistics/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Represents a statistics generator model."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Generates relevant statistics for internship applications."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String TOTAL \u003d \"TOTAL\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Contains all Status enum constants."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Status[] statuses \u003d Status.class.getEnumConstants();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Stores mapping of each Status to their count across internship application(s)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private HashMap\u003cStatus, Integer\u003e statusCount \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        resetStatistics();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Computes and updates the overall statistics based on the latest list of internship applications given."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * It will reset any existing statistics before re-computing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param internshipApplicationList list of existing internship application(s)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void computeAndUpdateStatistics(ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        resetStatistics();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        computeCount(internshipApplicationList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Computes and updates the count for each internship application status."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param internshipApplicationList list of existing internship application(s)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void computeCount(ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cStatus\u003e newStatuses \u003d internshipApplicationList.stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .map(ia -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                return ia.getStatus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            })"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        newStatuses.forEach((status) -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            int count \u003d statusCount.get(status);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            statusCount.put(status, ++count);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Resets the current statistics."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void resetStatistics() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Status status : statuses) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            statusCount.put(status, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public int getCount(Status status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return statusCount.get(status);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public int getTotalCount() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Iterator statusCountIterator \u003d statusCount.entrySet().iterator();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int totalCount \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        while (statusCountIterator.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            Map.Entry element \u003d (Map.Entry) statusCountIterator.next();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            int count \u003d (int) element.getValue();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            totalCount +\u003d count;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return totalCount;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public double getPercentage(Status status) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return ((double) statusCount.get(status) / getTotalCount()) * 100;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public Status[] getStatuses() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this.statuses;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 91,
      "gerhean": 4
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/status/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.status;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Enum for the possible statuses an internship application can have."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    WISHLIST, APPLIED, INTERVIEW, OFFERED, REJECTED, GHOSTED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \"Status should only be one of the following strings: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            + \"wishlist, applied, interview, offered, rejected, ghosted\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String[] validStatuses \u003d new String[]{\"wishlist\", \"applied\", \"interview\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        \"offered\", \"rejected\", \"ghosted\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns a list of possible Status which starts with test."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static List\u003cStatus\u003e possibleStatus(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String regex \u003d \"^\" + test.toUpperCase() + \".*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cStatus\u003e possible \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        for (Status s : Status.values()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            if (s.name().matches(regex)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                possible.add(s);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return possible;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true is given string is a valid status."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static boolean isValidStatus(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String status \u003d test.toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        boolean output \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (String s : validStatuses) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            output \u003d output || status.equals(s);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 17,
      "FeliciaTay": 3,
      "gerhean": 18,
      "ongch00": 6
    }
  },
  {
    "path": "src/main/java/seedu/diary/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Company;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Contains utility methods for populating {@code InternshipDiary} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private static final long DAYS_TO_MINUS \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static Interview[] sampleInterviews \u003d {Interview.createOnlineInterview("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS))), Interview.createInterview(false,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)), new Address(\"123 Kent Ridge Road\"))};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static InternshipApplication[] getSampleInternshipApplications() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return new InternshipApplication[]{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"Google\"), new Role(\"Software Developer\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new Email(\"google.recruit@example.com\"), new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new Priority(8), Status.APPLIED),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"Facebook\"), new Role(\"Software Engineer\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new Email(\"facebook.recruit@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new Priority(8), Status.APPLIED),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"DSO\"), new Role(\"Data Analyst\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new Email(\"dso.recruit@example.com\"), new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new Priority(8), Status.INTERVIEW, false, new ArrayList\u003c\u003e(Arrays.asList(sampleInterviews))),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"Shopee\"), new Role(\"Data Science\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new Email(\"shopee.recruit@example.com\"), new ApplicationDate(LocalDate.now()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new Priority(10), Status.WISHLIST),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"DSTA\"), new Role(\"Software Engineer\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new Email(\"dsta.recruit@example.com\"), new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new Priority(2), Status.REJECTED, Status.INTERVIEW, new ArrayList\u003c\u003e(Arrays.asList(sampleInterviews))),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"Singtel\"), new Role(\"Software Engineer\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new Email(\"singtel.recruit@example.com\"), new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new Priority(2), Status.OFFERED)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static ReadOnlyInternshipDiary getSampleInternshipDiary() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiary sampleDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (InternshipApplication sampleApplication : getSampleInternshipApplications()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            sampleDiary.loadInternshipApplication(sampleApplication);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return sampleDiary;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 12,
      "FeliciaTay": 16,
      "wxwxwxwx9": 6,
      "gerhean": 18,
      "-": 9,
      "ongch00": 7
    }
  },
  {
    "path": "src/main/java/seedu/diary/storage/InternshipDiaryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Represents a storage for {@link seedu.diary.model.InternshipDiary}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public interface InternshipDiaryStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    Path getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns InternshipDiary data as a {@link ReadOnlyInternshipDiary}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @see #getInternshipDiaryFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Saves the given {@link ReadOnlyInternshipDiary} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param internshipDiary cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @see #saveInternshipDiary(ReadOnlyInternshipDiary)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 47
    }
  },
  {
    "path": "src/main/java/seedu/diary/storage/JsonAdaptedInternship.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Company;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Jackson-friendly version of {@link InternshipApplication}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "class JsonAdaptedInternship {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Internship\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERVIEW \u003d \"Interviews list contains duplicate interview!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String company;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String role;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String applicationDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final List\u003cJsonAdaptedInterview\u003e interviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final String isArchived;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private final String lastStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Constructs a {@code JsonAdaptedInternship} with the given internship application details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public JsonAdaptedInternship(@JsonProperty(\"company\") String company, @JsonProperty(\"role\") String role,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        @JsonProperty(\"diary\") String address, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        @JsonProperty(\"email\") String email, @JsonProperty(\"applicationDate\") String applicationDate,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @JsonProperty(\"priority\") String priority, @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @JsonProperty(\"interviews\") List\u003cJsonAdaptedInterview\u003e interviews,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        @JsonProperty(\"isArchived\") String isArchived, @JsonProperty(\"lastStage\") String lastStage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.applicationDate \u003d applicationDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviews.addAll(interviews);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.lastStage \u003d lastStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Converts a given {@code InternshipApplication} into this class for Jackson use."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public JsonAdaptedInternship(InternshipApplication source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        company \u003d source.getCompany().fullCompany;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        role \u003d source.getRole().fullRole;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        applicationDate \u003d source.getApplicationDate().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        priority \u003d Integer.toString(source.getPriority().fullPriority);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        status \u003d source.getStatus().name();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews.addAll(source.getInterviews()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .stream().map(JsonAdaptedInterview::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        isArchived \u003d source.isArchived().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        lastStage \u003d source.getLastStage().toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Converts this Jackson-friendly adapted internship application object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * into the model\u0027s {@code InternshipApplication} object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted internship application"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public InternshipApplication toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (company \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Company.isValidCompany(company)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Company modelCompany \u003d new Company(company);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Role.isValidRole(role)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Role modelRole \u003d new Role(role);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDate modelDate;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (applicationDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                ApplicationDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!ApplicationDate.isValidApplicationDate(applicationDate)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new IllegalValueException(ApplicationDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelDate \u003d new ApplicationDate(applicationDate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Status.isValidStatus(status)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Status modelStatus \u003d Status.valueOf(status);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (isArchived \u003d\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Messages.IS_ARCHIVED));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (!BooleanUtil.isValidBoolean(isArchived)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new IllegalValueException(BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        final Boolean modelIsArchived \u003d Boolean.valueOf(isArchived);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplication(modelCompany, modelRole, modelAddress,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            modelPhone, modelEmail, modelDate, modelPriority, modelStatus);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        final Status modelLastStage \u003d Status.valueOf(lastStage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplication \u003d internshipApplication.setLastStage(modelLastStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (JsonAdaptedInterview jsonAdaptedInterview : interviews) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Interview interview \u003d jsonAdaptedInterview.toModelType();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (internshipApplication.hasInterview(interview)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INTERVIEW);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            internshipApplication.addInterview(interview);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (modelIsArchived) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication \u003d internshipApplication.archive();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return internshipApplication;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 26,
      "FeliciaTay": 8,
      "wxwxwxwx9": 15,
      "gerhean": 136,
      "ongch00": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/storage/JsonAdaptedInterview.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Jackson-friendly version of {@code Interview}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class JsonAdaptedInterview {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Interview\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final String isOnline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final String interviewAddress;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final String interviewDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Constructs a {@code JsonAdaptedInterview} with the given interview details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public JsonAdaptedInterview(@JsonProperty(\"interviewAddress\") String interviewAddress,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @JsonProperty(\"isOnline\") String isOnline,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @JsonProperty(\"interviewDate\") String interviewDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.isOnline \u003d isOnline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewAddress \u003d interviewAddress;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d interviewDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Converts a given {@code Interview} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public JsonAdaptedInterview(Interview source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviewAddress \u003d source.getInterviewAddress().value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviewDate \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        isOnline \u003d Boolean.toString(source.getIsOnline());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Converts this Jackson-friendly adapted interview object into the model\u0027s {@code Interview} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted interview."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Interview toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interviewAddress \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!Address.isValidAddress(interviewAddress)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        final Address modelAddress \u003d new Address(interviewAddress);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ApplicationDate modelDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interviewDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                ApplicationDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!ApplicationDate.isValidApplicationDate(interviewDate)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(ApplicationDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        modelDate \u003d new ApplicationDate(interviewDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (isOnline \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Boolean.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!BooleanUtil.isValidBoolean(isOnline)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Boolean modelIsOnline \u003d Boolean.parseBoolean(isOnline);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return Interview.createInterview(modelIsOnline, modelDate, modelAddress);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 70,
      "FeliciaTay": 1,
      "gerhean": 6
    }
  },
  {
    "path": "src/main/java/seedu/diary/storage/JsonInternshipDiaryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * A class to access InternshipDiary data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class JsonInternshipDiaryStorage implements InternshipDiaryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInternshipDiaryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public JsonInternshipDiaryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return readInternshipDiary(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Similar to {@link #readInternshipDiary()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Optional\u003cJsonSerializableInternshipDiary\u003e jsonInternshipDiary \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            filePath, JsonSerializableInternshipDiary.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (jsonInternshipDiary.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return Optional.of(jsonInternshipDiary.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        saveInternshipDiary(internshipDiary, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Similar to {@link #saveInternshipDiary(ReadOnlyInternshipDiary)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(internshipDiary);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInternshipDiary(internshipDiary), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 80
    }
  },
  {
    "path": "src/main/java/seedu/diary/storage/JsonSerializableInternshipDiary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * An Immutable InternshipDiary that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "@JsonRootName(value \u003d \"internshipDiary\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "class JsonSerializableInternshipDiary {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERNSHIP \u003d \"Internship list contains duplicate internship(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final List\u003cJsonAdaptedInternship\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Constructs a {@code JsonSerializableInternshipDiary} with the given internship applications."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public JsonSerializableInternshipDiary(@JsonProperty(\"internships\") List\u003cJsonAdaptedInternship\u003e internships) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.internships.addAll(internships);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Converts a given {@code ReadOnlyInternshipDiary} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInternshipDiary}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public JsonSerializableInternshipDiary(ReadOnlyInternshipDiary source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internships.addAll(source.getAllInternshipList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .map(JsonAdaptedInternship::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Converts this diary book into the model\u0027s {@code InternshipDiary} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public InternshipDiary toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiary internshipDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        for (JsonAdaptedInternship jsonAdaptedInternship : internships) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            InternshipApplication internship \u003d jsonAdaptedInternship.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            if (internshipDiary.hasInternship(internship)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipDiary.loadInternshipApplication(internship);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internshipDiary;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "wxwxwxwx9": 2,
      "gerhean": 58
    }
  },
  {
    "path": "src/main/java/seedu/diary/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 6,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/diary/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public interface Storage extends InternshipDiaryStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    Path getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/diary/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Manages storage of InternshipDiary data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private InternshipDiaryStorage internshipDiaryStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public StorageManager(InternshipDiaryStorage internshipDiaryStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.internshipDiaryStorage \u003d internshipDiaryStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InternshipDiary methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internshipDiaryStorage.getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return readInternshipDiary(internshipDiaryStorage.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(Path filePath)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internshipDiaryStorage.readInternshipDiary(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        saveInternshipDiary(internshipDiary, internshipDiaryStorage.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipDiaryStorage.saveInternshipDiary(internshipDiary, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 4,
      "gerhean": 18,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/diary/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Represents a storage for {@link seedu.diary.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Saves the given {@link seedu.diary.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 8,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ClearCommandConfirmationParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            String text \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            commandExecutor.execute(text);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            commandsHistory.add(text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            commandsHistory.resetIterator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (ClearCommandConfirmationParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Handles any keyPressed pressed event."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private void handleKeyPressed(KeyEvent ke) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (ke.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            String text \u003d commandsHistory.iterateNext();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            if (text !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                commandTextField.setText(text);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                commandTextField.positionCaret(commandTextField.getLength());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else if (ke.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            String text \u003d commandsHistory.iteratePrevious();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            if (text !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                commandTextField.setText(text);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                commandTextField.positionCaret(commandTextField.getLength());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else if (ke.getCode() !\u003d KeyCode.LEFT \u0026\u0026 ke.getCode() !\u003d KeyCode.RIGHT) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            commandsHistory.resetIterator();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gerhean"
        },
        "content": "         * @see seedu.diary.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 1,
      "gerhean": 37,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/ComparatorDisplayFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * A graphical interface for the statistics that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class ComparatorDisplayFooter extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String FXML \u003d \"ComparatorDisplayFooter.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Label comparatorLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public ComparatorDisplayFooter() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        updateComparatorDisplay(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Receives the latest changes in Comparator from internship diary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Updates the relevant display accordingly."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        updateComparatorDisplay((Comparator\u003cInternshipApplication\u003e) e.getNewValue());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Computes and updates the comparatorLabel."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param comparator comparator object that generates relevant display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private void updateComparatorDisplay(Comparator\u003cInternshipApplication\u003e comparator) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (comparator \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            comparatorLabel.setText(\"Not Sorted\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            comparatorLabel.setText(\"Sorted by: \" + comparator.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 1,
      "gerhean": 50
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/EnteredCommandsHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * The UI component helper that is responsible for storing the history of user command inputs."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class EnteredCommandsHistory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final LinkedList\u003cString\u003e commandsHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private ListIterator\u003cString\u003e historyIterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final int maxSize;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Uses the default {@code maxSize} of 20 for history."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public EnteredCommandsHistory() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.maxSize \u003d 20;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Uses the given {@code maxSize} for the history."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public EnteredCommandsHistory(int maxSize) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.maxSize \u003d maxSize;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Adds string to history."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param command The string to be stored in the history."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void add(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.commandsHistory.addFirst(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (this.commandsHistory.size() \u003e maxSize) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            this.commandsHistory.removeLast();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.historyIterator \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns the size of the command history."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @return the size of the command history."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return commandsHistory.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Resets the history iterator."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void resetIterator() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.historyIterator \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns a command earlier in history."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @return the string stored earlier in history."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String iterateNext() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (this.historyIterator \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            this.historyIterator \u003d commandsHistory.listIterator(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (this.historyIterator.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return this.historyIterator.next();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns a command later in history."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @return the string stored later in history."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String iteratePrevious() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (this.historyIterator !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            if (this.historyIterator.hasPrevious()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                this.historyIterator.previous();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            if (this.historyIterator.hasPrevious()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                String result \u003d this.historyIterator.previous();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                this.historyIterator.next();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 92
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.media.MediaException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f10-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private WebView guideView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            String uri \u003d HelpWindow.class.getResource(\"/html/userGuide.html\").toURI().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            guideView.getEngine().load(uri);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (URISyntaxException | MediaException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * if this method is called on the primary stage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        guideView.getEngine().reload();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "wxwxwxwx9": 1,
      "gerhean": 16,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/InternshipApplicationCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * An UI component that displays information of a {@code InternshipApplication}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class InternshipApplicationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private static final String FXML \u003d \"InternshipApplicationListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String WISHLIST_COLOR \u003d \"-fx-background-color: #cd70ff;\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String APPLIED_COLOR \u003d \"-fx-background-color: #209cee;\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String INTERVIEW_COLOR \u003d \"-fx-background-color: #22c65b;\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String OFFERED_COLOR \u003d \"-fx-text-fill: black; -fx-background-color: #ffdd57;\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String REJECTED_COLOR \u003d \"-fx-background-color: #ff3860;\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private static final String GHOSTED_COLOR \u003d \"-fx-text-fill: black; -fx-background-color: #cdcdcd;\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public final InternshipApplication internshipApplication;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label company;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label role;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label applicationDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private FlowPane status;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public InternshipApplicationCard(InternshipApplication internshipApplication, int displayedIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.internshipApplication \u003d internshipApplication;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        company.setText(internshipApplication.getCompany().fullCompany);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        role.setText(internshipApplication.getRole().fullRole);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Label statusLabel \u003d getStatusLabel();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        status.getChildren().add(statusLabel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Gets the status label colored based on the status of the internship application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @return the status label colored based on the status of the internship application"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private Label getStatusLabel() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Status internshipApplicationStatus \u003d internshipApplication.getStatus();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Label statusLabel \u003d new Label(internshipApplicationStatus.toString().toLowerCase());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        switch (internshipApplicationStatus) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        case WISHLIST:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            statusLabel.setStyle(WISHLIST_COLOR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        case APPLIED:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            statusLabel.setStyle(APPLIED_COLOR);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            statusLabel.setStyle(INTERVIEW_COLOR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        case OFFERED:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            statusLabel.setStyle(OFFERED_COLOR);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        case REJECTED:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            statusLabel.setStyle(REJECTED_COLOR);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        case GHOSTED:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            statusLabel.setStyle(GHOSTED_COLOR);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return statusLabel;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (!(other instanceof InternshipApplicationCard)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationCard card \u003d (InternshipApplicationCard) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u0026\u0026 internshipApplication.equals(card.internshipApplication);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 69,
      "wxwxwxwx9": 5,
      "gerhean": 4,
      "ongch00": 38
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/InternshipApplicationDetail.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERVIEWS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a panel with the details of a specific {@code InternshipApplication}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InternshipApplicationDetail extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String FXML \u003d \"InternshipApplicationDetail.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    // Whitespace utility for printing details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InternshipApplication internshipApplication;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InterviewListPanel interviewListPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private SplitPane splitPanePlaceHolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private StackPane interviewListPanelPlaceHolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private HBox detailPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label company;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label role;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label applicationDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label interviewPreamble;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InternshipApplicationDetail(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        company.setText(internshipApplication.getCompany().fullCompany);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        phone.setText(internshipApplication.getPhone().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        address.setText(internshipApplication.getAddress().value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        email.setText(internshipApplication.getEmail().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        role.setText(internshipApplication.getRole().fullRole);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        priority.setText(internshipApplication.getPriority().fullPriority + \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        applicationDate.setText(internshipApplication.getApplicationDate().printDate());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        status.setText(internshipApplication.getStatus().toString()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            + internshipApplication.getLastStageMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviewPreamble.setText(\"Interviews: \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviewListPanel \u003d new InterviewListPanel("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            FXCollections.observableArrayList(internshipApplication.getInterviews()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviewListPanelPlaceHolder.getChildren().add(interviewListPanel.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // remove old listeners to InternshipApplication"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipApplication.removeAllPropertyChangeListener();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // initiate listener to InternshipApplication"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipApplication.addPropertyChangeListener(DISPLAYED_INTERVIEWS, interviewListPanel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 82,
      "FeliciaTay": 1,
      "gerhean": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/InternshipApplicationDetailSetter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIP_DETAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.PREDICATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * A setter for the internship application details on the stack pane."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class InternshipApplicationDetailSetter implements PropertyChangeListener {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final StackPane internshipApplicationDetailPlaceholder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private InternshipApplication internshipApplication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Region internshipApplicationDetailRoot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public InternshipApplicationDetailSetter(StackPane internshipApplicationDetailPlaceholder) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.internshipApplicationDetailPlaceholder \u003d internshipApplicationDetailPlaceholder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Receives the latest changes in predicate or the internship application selected from internship diary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Updates the relevant display accordingly."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String propertyName \u003d e.getPropertyName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (propertyName.equals(DISPLAYED_INTERNSHIP_DETAIL.toString())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            if (Objects.equals(e.getOldValue(), internshipApplication) || e.getOldValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                updateInternshipDetail((InternshipApplication) e.getNewValue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else if (propertyName.equals(PREDICATE.toString())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            if (internshipApplication \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            Predicate\u003cInternshipApplication\u003e predicate \u003d (Predicate\u003cInternshipApplication\u003e) e.getNewValue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            if (predicate !\u003d null \u0026\u0026 !predicate.test(this.internshipApplication)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                updateInternshipDetail(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalStateException(\"InternshipApplicationDetailSetter listening to unhandled property name\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Computes and updates the InternshipApplicationDetail."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param internshipApplication internshipApplication object that generates relevant display."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void updateInternshipDetail(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (Objects.equals(this.internshipApplication, internshipApplication)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.internshipApplication \u003d internshipApplication;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        internshipApplicationDetailPlaceholder.getChildren().remove(internshipApplicationDetailRoot);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (internshipApplication !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            this.internshipApplicationDetailRoot \u003d new InternshipApplicationDetail(internshipApplication).getRoot();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            internshipApplicationDetailPlaceholder.getChildren().add(internshipApplicationDetailRoot);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 67,
      "ongch00": 6
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/InternshipApplicationListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.ApplicationDateDuePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.InterviewDateDuePredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusIsInterviewPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusIsWishlistPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Panel containing the list of internship applications."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class InternshipApplicationListPanel extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private static final String FXML \u003d \"InternshipApplicationListPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private static final String UPCOMING_BACKGROUND_COLOR \u003d \"-fx-background-color: #0d914f\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private static final String GHOSTED_BACKGROUND_COLOR \u003d \"-fx-background-color: CRIMSON\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(InternshipApplicationListPanel.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private ListView\u003cInternshipApplication\u003e internshipApplicationListView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public InternshipApplicationListPanel(ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationListView.setItems(internshipApplicationList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationListView.setCellFactory(listView -\u003e new InternshipApplicationListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ListView\u003cInternshipApplication\u003e getInternshipApplicationListView() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return internshipApplicationListView;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Receives the latest changes in displayed internships from internship diary."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates the internship application list view accordingly."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cInternshipApplication\u003e ia \u003d (ObservableList\u003cInternshipApplication\u003e) e.getNewValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationListView.setItems(ia);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code InternshipApplication} using a"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * {@code InternshipApplicationCard}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    class InternshipApplicationListViewCell extends ListCell\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        private String originalStyle \u003d getStyle();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        protected void updateItem(InternshipApplication internshipApplication, boolean empty) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            super.updateItem(internshipApplication, empty);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            if (empty || internshipApplication \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                setStyle(originalStyle);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                setGraphic(new InternshipApplicationCard(internshipApplication, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                if (internshipApplication.isArchived()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                    setStyle(originalStyle);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                } else if (isUpcoming(internshipApplication)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                    setStyle(UPCOMING_BACKGROUND_COLOR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                } else if (internshipApplication.getStatus().equals(Status.GHOSTED)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                    setStyle(GHOSTED_BACKGROUND_COLOR);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                    setStyle(originalStyle);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "         * Verify if the given internship application has upcoming deadline or interview."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "         *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "         * @param internshipApplication The internship application to check."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "         * @return true if the application has a application deadline and is of status wishlist, or if the application"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "         * has an upcoming interview and is of status interview. False otherwise."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        private boolean isUpcoming(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            Predicate\u003cInternshipApplication\u003e applicationDateDuePredicate \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new ApplicationDateDuePredicate().and(new StatusIsWishlistPredicate());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            Predicate\u003cInternshipApplication\u003e upcomingInterviewDatePredicate \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new InterviewDateDuePredicate().and(new StatusIsInterviewPredicate());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return applicationDateDuePredicate.or(upcomingInterviewDatePredicate).test(internshipApplication);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 4,
      "FeliciaTay": 43,
      "wxwxwxwx9": 15,
      "gerhean": 6,
      "ongch00": 32
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/InterviewCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A UI component that shows information regarding an {@code Interview}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String FXML \u003d \"InterviewCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public final Interview interview;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewCard(Interview interview, int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interview \u003d interview;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String title \u003d \"Interview \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        date.setText(interview.getDate().printDate());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interview.getIsOnline()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.title.setText(index + \". ONLINE \" + title);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.title.setText(index + \". OFFLINE \" + title);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        address.setText(interview.getInterviewAddress().value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 40,
      "gerhean": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/InterviewListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Panel containing the list of interviews in a specific Internship Application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewListPanel extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String FXML \u003d \"InterviewListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private ListView\u003cInterview\u003e interviewListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewListPanel(ObservableList\u003cInterview\u003e interviews) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviewListView.setItems(interviews);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviewListView.setCellFactory(listView -\u003e new InternshipApplicationListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Receives the latest changes in displayed interviews from the internship application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Updates the interview list view accordingly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInterview\u003e interviews \u003d (ArrayList\u003cInterview\u003e) e.getNewValue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviewListView.setItems(FXCollections.observableArrayList(interviews));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Interview} using a"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * {@code InterviewCard}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    class InternshipApplicationListViewCell extends ListCell\u003cInterview\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        protected void updateItem(Interview interview, boolean empty) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            super.updateItem(interview, empty);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (empty || interview \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                setGraphic(new InterviewCard(interview, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 59,
      "gerhean": 3
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.COMPARATOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIP_DETAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.FILTERED_INTERNSHIP_APPLICATIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.PREDICATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.VIEW_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.Logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // Container for Ui parts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private InternshipApplicationDetailSetter internshipApplicationDetailSetter;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private InternshipApplicationListPanel internshipApplicationListPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private StatisticsWindow statisticsWindow;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private StatisticsBarFooter statisticsBarFooter;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private ComparatorDisplayFooter comparatorDisplayFooter;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private PredicateDisplayFooter predicateDisplayFooter;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private ViewDisplayFooter viewDisplayFooter;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private SplitPane resultAndInternshipSplitPanePlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private SplitPane listAndDetailsSplitPanePlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private StackPane internshipApplicationListPanelPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private StackPane internshipApplicationDetailPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private StackPane comparatorDisplayPlaceholder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private StackPane predicateDisplayPlaceholder;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private StackPane viewDisplayPlaceholder;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private StackPane statisticsPlaceholder;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        internshipApplicationDetailSetter \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new InternshipApplicationDetailSetter(internshipApplicationDetailPlaceholder);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statisticsWindow \u003d new StatisticsWindow(logic.getStatistics(), logic.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        setSplitPaneDefaultSplit(0.2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Initializes the relevant UI objects to listen for property changes."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void initListeners() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        logic.addPropertyChangeListener(FILTERED_INTERNSHIP_APPLICATIONS, internshipApplicationListPanel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        logic.addPropertyChangeListener(FILTERED_INTERNSHIP_APPLICATIONS, statisticsWindow);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        logic.addPropertyChangeListener(FILTERED_INTERNSHIP_APPLICATIONS, statisticsBarFooter);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        logic.addPropertyChangeListener(COMPARATOR, comparatorDisplayFooter);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        logic.addPropertyChangeListener(PREDICATE, predicateDisplayFooter);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        logic.addPropertyChangeListener(PREDICATE, internshipApplicationDetailSetter);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        logic.addPropertyChangeListener(VIEW_TYPE, viewDisplayFooter);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        logic.addPropertyChangeListener(DISPLAYED_INTERNSHIP_DETAIL, internshipApplicationDetailSetter);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Sets the default split of the splitPane."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private void setSplitPaneDefaultSplit(double split) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.primaryStage.showingProperty().addListener(new ChangeListener\u003cBoolean\u003e() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Boolean\u003e observable, Boolean oldValue, Boolean newValue) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                if (newValue) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    resultAndInternshipSplitPanePlaceholder.setDividerPositions(split);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    observable.removeListener(this);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        });"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    protected void fillInnerParts() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationListPanel \u003d new InternshipApplicationListPanel("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            logic.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationListPanelPlaceholder.getChildren().add(internshipApplicationListPanel.getRoot());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ListView\u003cInternshipApplication\u003e internshipApplicationListView \u003d internshipApplicationListPanel"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .getInternshipApplicationListView();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // Show internship application details on click"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipApplicationListView.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                InternshipApplication internshipApplication \u003d internshipApplicationListView"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    .getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                internshipApplicationDetailSetter.updateInternshipDetail(internshipApplication);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        });"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statisticsBarFooter \u003d new StatisticsBarFooter(logic.getStatistics(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            logic.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statisticsPlaceholder.getChildren().add(statisticsBarFooter.getRoot());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        comparatorDisplayFooter \u003d new ComparatorDisplayFooter();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        comparatorDisplayPlaceholder.getChildren().add(comparatorDisplayFooter.getRoot());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        predicateDisplayFooter \u003d new PredicateDisplayFooter();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        predicateDisplayPlaceholder.getChildren().add(predicateDisplayFooter.getRoot());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        viewDisplayFooter \u003d new ViewDisplayFooter();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        viewDisplayPlaceholder.getChildren().add(viewDisplayFooter.getRoot());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Opens the statistics window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void handleStatistics() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (!statisticsWindow.isShowing()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            statisticsWindow.show();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            statisticsWindow.focus();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    protected void show() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statisticsWindow.hide();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationListPanel getInternshipApplicationListPanel() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return internshipApplicationListPanel;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @see seedu.diary.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            if (commandResult.isShowStatistics()) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                handleStatistics();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 22,
      "FeliciaTay": 3,
      "wxwxwxwx9": 46,
      "gerhean": 73,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/PredicateDisplayFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * A graphical interface for the statistics that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class PredicateDisplayFooter extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String FXML \u003d \"PredicateDisplayFooter.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Label predicateLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public PredicateDisplayFooter() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        updatePredicateDisplay(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Receives the latest changes in Comparator from internship diary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Updates the relevant display accordingly."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        updatePredicateDisplay((Predicate\u003cInternshipApplication\u003e) e.getNewValue());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Computes and updates the predicateLabel."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param predicate predicate that generates relevant display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private void updatePredicateDisplay(Predicate\u003cInternshipApplication\u003e predicate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (predicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            predicateLabel.setText(\"Not Filtered\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            predicateLabel.setText(\"Finding: \" + predicate.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 1,
      "gerhean": 50
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/StatisticsBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.statistics.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A graphical interface for the statistics that is displayed at the footer of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class StatisticsBarFooter extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String FXML \u003d \"StatisticsBarFooter.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label wishlist;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label applied;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label interview;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label offered;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label rejected;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label ghosted;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label total;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private ObservableList\u003cInternshipApplication\u003e internshipApplicationList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * To attach event listener to update statistics if there is any changes in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private ListChangeListener\u003cInternshipApplication\u003e c \u003d c -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        while (c.next()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            if (c.wasAdded() || c.wasRemoved() || c.wasUpdated() || c.wasReplaced()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                updateStatistics();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public StatisticsBarFooter(Statistics statistics, ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.internshipApplicationList \u003d internshipApplicationList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateStatistics();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateStatisticsOnChange();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Receives the latest changes in displayed internships from internship diary."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Reattaches listener to the latest internship application list and updates the relevant statistics accordingly."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cInternshipApplication\u003e ia \u003d (ObservableList\u003cInternshipApplication\u003e) e.getNewValue();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.internshipApplicationList.removeListener(c);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationList \u003d ia;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateStatistics();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateStatisticsOnChange();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Adds an event listener to update the statistics upon any changes in the given list of internship application."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void updateStatisticsOnChange() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationList.addListener(c);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Computes and updates the statistics for statistics bar footer."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void updateStatistics() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics.computeAndUpdateStatistics(internshipApplicationList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int wishlistCount \u003d statistics.getCount(Status.WISHLIST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int appliedCount \u003d statistics.getCount(Status.APPLIED);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int interviewCount \u003d statistics.getCount(Status.INTERVIEW);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int offeredCount \u003d statistics.getCount(Status.OFFERED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int rejectedCount \u003d statistics.getCount(Status.REJECTED);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        int ghostedCount \u003d statistics.getCount(Status.GHOSTED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int totalCount \u003d statistics.getTotalCount();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        bindStatistics(wishlistCount, appliedCount, interviewCount, offeredCount, rejectedCount, ghostedCount,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            totalCount);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Binds the statistics to the user interface."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @param wishlistCount number of internship application(s) in wishlist"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @param appliedCount number of internship application(s) that has/ have been applied for"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @param interviewCount number of internship application(s) that has/ have been scheduled for interview"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @param offeredCount number of internship application(s) that has/ have been offered"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @param rejectedCount number of internship application(s) that has/ have been rejected"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @param ghostedCount number of internship application(s) that has/ have been ghosted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @param totalCount total number of internship applications in InternshipDiary"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void bindStatistics(int wishlistCount, int appliedCount, int interviewCount,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        int offeredCount, int rejectedCount, int ghostedCount, int totalCount) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        wishlist.setText(String.format(\"%s: %d\", Status.WISHLIST, wishlistCount));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        applied.setText(String.format(\"%s: %d\", Status.APPLIED, appliedCount));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        interview.setText(String.format(\"%s: %d\", Status.INTERVIEW, interviewCount));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        offered.setText(String.format(\"%s: %d\", Status.OFFERED, offeredCount));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        rejected.setText(String.format(\"%s: %d\", Status.REJECTED, rejectedCount));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ghosted.setText(String.format(\"%s: %d\", Status.GHOSTED, ghostedCount));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        total.setText(String.format(\"%s: %d\", Statistics.TOTAL, totalCount));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 14,
      "wxwxwxwx9": 100,
      "gerhean": 5
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/StatisticsWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.statistics.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Controller for the statistics page."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class StatisticsWindow extends UiPart\u003cStage\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatisticsWindow.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String FXML \u003d \"StatisticsWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private BarChart\u003cString, Integer\u003e internshipApplicationChart;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private CategoryAxis status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private NumberAxis count;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private PieChart internshipApplicationPie;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private ObservableList\u003cInternshipApplication\u003e internshipApplicationList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * To attach event listener to update statistics if there is any changes in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private ListChangeListener\u003cInternshipApplication\u003e c \u003d c -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        while (c.next()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            if (c.wasAdded() || c.wasRemoved() || c.wasUpdated() || c.wasReplaced()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                updateStatistics();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Creates a new StatisticsWindow."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param statistics statistics object that generates relevant statistics."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param internshipApplicationList list of existing internship applications."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public StatisticsWindow(Statistics statistics, ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this(new Stage(), statistics, internshipApplicationList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Creates a new StatisticsWindow."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param root Stage to use as the root of the StatisticsWindow."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param statistics statistics object that generates relevant statistics."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param internshipApplicationList list of existing internship applications."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public StatisticsWindow(Stage root, Statistics statistics,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.internshipApplicationList \u003d internshipApplicationList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateStatistics();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateStatisticsOnChange();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Receives the latest changes in displayed internships from internship diary."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Reattaches listener to the latest internship application list and updates the relevant statistics accordingly."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cInternshipApplication\u003e ia \u003d (ObservableList\u003cInternshipApplication\u003e) e.getNewValue();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.internshipApplicationList.removeListener(c);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationList \u003d ia;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateStatistics();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateStatisticsOnChange();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Adds an event listener to update the statistics upon any changes in the given list of internship application."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void updateStatisticsOnChange() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationList.addListener(c);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Computes and retrieves the latest statistics"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void updateStatistics() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics.computeAndUpdateStatistics(internshipApplicationList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        loadBarChart();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        loadPieChart();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Clears the existing data and loads the bar chart with new data."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void loadBarChart() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationChart.getData().clear();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cXYChart.Data\u003cString, Integer\u003e\u003e barChartData \u003d generateBarChartData();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationChart.getData().addAll(new XYChart.Series\u003cString, Integer\u003e(barChartData));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Clears the existing data and loads the pie chart with new data."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void loadPieChart() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationPie.getData().clear();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d generatePieChartData();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationPie.getData().addAll(pieChartData);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        bindPieChartLegend(pieChartData);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Loads the legend of the pie chart with the percentage information if the percentage is valid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void bindPieChartLegend(ObservableList\u003cPieChart.Data\u003e pieChartData) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (PieChart.Data data : pieChartData) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            if (!Double.isNaN(data.getPieValue())) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                String percentageLegend \u003d String.format(\"%s (%.2f%%)\", data.getName(), data.getPieValue());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                data.nameProperty().bind("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    Bindings.concat(percentageLegend)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                );"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Generates the relevant bar chart data using the generated count statistics."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private ObservableList\u003cXYChart.Data\u003cString, Integer\u003e\u003e generateBarChartData() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cXYChart.Data\u003cString, Integer\u003e\u003e xyChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Status status : statistics.getStatuses()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            XYChart.Data\u003cString, Integer\u003e data \u003d new XYChart.Data\u003c\u003e(status.toString(), statistics.getCount(status));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            xyChartData.add(data);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return xyChartData;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Generates the relevant pie chart data using the generated percentage statistics."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e generatePieChartData() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Status status : statistics.getStatuses()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            PieChart.Data data \u003d new PieChart.Data(status.toString(), statistics.getPercentage(status));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            pieChartData.add(data);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return pieChartData;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Shows the statistics window."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * if this method is called on the primary stage."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        logger.fine(\"Generating statistics about your internship applications.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns true if the statistics window is currently being shown."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Hides the statistics window."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Focuses on the statistics window."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 208,
      "gerhean": 7
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        saveLocationStatus.setText(\"Save file data at: \" + Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/internship_diary.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            mainWindow.initListeners();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 2,
      "gerhean": 7,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 9,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/diary/ui/ViewDisplayFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.archival.InternshipApplicationViewType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A graphical interface for the current view type that is displayed at the footer of the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ViewDisplayFooter extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String FXML \u003d \"ViewDisplayFooter.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String UNARCHIVED_LIST \u003d \"MAIN\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String ARCHIVED_LIST \u003d \"ARCHIVAL\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label viewLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public ViewDisplayFooter() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateViewDisplay(InternshipApplicationViewType.UNARCHIVED);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Receives the latest changes in displayed internships from internship diary."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates the relevant display accordingly."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateViewDisplay((InternshipApplicationViewType) e.getNewValue());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Computes and updates the viewLabel."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param viewType enumeration that indicates the current display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void updateViewDisplay(InternshipApplicationViewType viewType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (viewType.equals(InternshipApplicationViewType.UNARCHIVED)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            viewLabel.setText(UNARCHIVED_LIST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            viewLabel.setText(ARCHIVED_LIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 50,
      "gerhean": 2
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onKeyPressed\u003d\"#handleKeyPressed\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/ComparatorDisplayFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "  \u003cLabel fx:id\u003d\"comparatorLabel\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gerhean": 12
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003cfx:root title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            \u003cWebView fx:id\u003d\"guideView\" prefHeight\u003d\"450.0\" prefWidth\u003d\"700.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                     AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gerhean": 8,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/InternshipApplicationDetail.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "      style\u003d\"-fx-background-color: grey\" minWidth\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"180\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cLabel fx:id\u003d\"company\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cGridPane minHeight \u003d \"20\" \u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.valignment\u003d\"TOP\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" text\u003d\"Role:\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" fx:id\u003d\"role\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$role\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.valignment\u003d\"TOP\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\" text\u003d\"Address:\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.valignment\u003d\"TOP\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\" text\u003d\"Phone:\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.valignment\u003d\"TOP\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"3\" text\u003d\"Email:\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\" fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.valignment\u003d\"TOP\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"4\" text\u003d\"ApplicationDate:\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\" fx:id\u003d\"applicationDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$applicationDate\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.valignment\u003d\"TOP\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"5\" text\u003d\"Priority:\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\" fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.valignment\u003d\"TOP\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"6\" text\u003d\"Status:\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cLabel GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"6\" fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cColumnConstraints minWidth\u003d\"110\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cLabel fx:id\u003d\"interviewPreamble\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$interviews\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003cAnchorPane minWidth\u003d\"100\" minHeight\u003d\"50.0\" prefWidth\u003d\"250\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003cStackPane fx:id\u003d\"interviewListPanelPlaceHolder\" minHeight\u003d\"100\" prefHeight\u003d\"100\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                       prefWidth\u003d\"195.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                       AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                       AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foochifa": 54
    }
  },
  {
    "path": "src/main/resources/view/InternshipApplicationListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u003cLabel fx:id\u003d\"company\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$role\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"status\" alignment\u003d\"CENTER_LEFT\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 31,
      "wxwxwxwx9": 1,
      "ongch00": 2
    }
  },
  {
    "path": "src/main/resources/view/InternshipApplicationListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    \u003cListView fx:id\u003d\"internshipApplicationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 8
    }
  },
  {
    "path": "src/main/resources/view/InterviewCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"55\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003cGridPane minHeight \u003d \"20\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u003cLabel GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" text\u003d\"Interview Date:\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u003cLabel GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$interviewDate\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u003cLabel GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\" text\u003d\"Interview Address:\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u003cLabel GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$interviewAddress\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u003cColumnConstraints minWidth\u003d\"120\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foochifa": 33
    }
  },
  {
    "path": "src/main/resources/view/InterviewListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003cListView fx:id\u003d\"interviewListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foochifa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Internship Diary\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        \u003cImage url\u003d\"@/images/internship_app.jpg\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"statisticsMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleStatistics\" text\u003d\"Statistics\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                \u003cSplitPane dividerPositions\u003d\"0.2\" orientation\u003d\"VERTICAL\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                           fx:id\u003d\"resultAndInternshipSplitPanePlaceholder\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"100\" prefHeight\u003d\"100\" prefWidth\u003d\"195.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        \u003cSplitPane orientation\u003d\"HORIZONTAL\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                   fx:id\u003d\"listAndDetailsSplitPanePlaceholder\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                                    \u003cVBox fx:id\u003d\"internshipApplicationList\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                                          styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                                          AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                                          AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                                        \u003cStackPane fx:id\u003d\"internshipApplicationListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                        VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                    \u003cVBox fx:id\u003d\"internshipApplicationDetail\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                          styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                          AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                          AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                        \u003cStackPane fx:id\u003d\"internshipApplicationDetailPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"viewDisplayPlaceholder\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-border-width: 0px 1px 0px 0px; -fx-border-color: white;\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"comparatorDisplayPlaceholder\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-border-width: 0px 1px 0px 0px; -fx-border-color: white;\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"predicateDisplayPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statisticsPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "foochifa": 18,
      "FeliciaTay": 1,
      "wxwxwxwx9": 6,
      "gerhean": 31,
      "-": 46
    }
  },
  {
    "path": "src/main/resources/view/PredicateDisplayFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "  \u003cLabel fx:id\u003d\"predicateLabel\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gerhean": 12
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/StatisticsBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003cGridPane styleClass\u003d\"statistics-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "  \u003cHBox spacing\u003d\"30\" alignment\u003d\"bottom_left\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"wishlist\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"applied\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"interview\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"offered\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"rejected\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    \u003cLabel fx:id\u003d\"ghosted\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"total\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "wxwxwxwx9": 20
    }
  },
  {
    "path": "src/main/resources/view/StatisticsWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Internship Diary Statistics\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003cURL value\u003d\"@Statistics.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003cBarChart fx:id\u003d\"internshipApplicationChart\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                            \u003cCategoryAxis fx:id\u003d\"status\" side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                            \u003cNumberAxis fx:id\u003d\"count\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003cPieChart fx:id\u003d\"internshipApplicationPie\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 39,
      "gerhean": 1
    }
  },
  {
    "path": "src/main/resources/view/ViewDisplayFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "  \u003cLabel fx:id\u003d\"viewLabel\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 12
    }
  },
  {
    "path": "src/test/java/seedu/diary/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/diary/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/diary/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/diary/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        final Index fifthInternshipApplicationIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(fifthInternshipApplicationIndex, Index.fromOneBased(5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(fifthInternshipApplicationIndex, Index.fromZeroBased(4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(fifthInternshipApplicationIndex, fifthInternshipApplicationIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, fifthInternshipApplicationIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(fifthInternshipApplicationIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(fifthInternshipApplicationIndex, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 2,
      "gerhean": 8,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/diary/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/diary/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/diary/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/diary/commons/util/DateTimeUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class DateTimeUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void parseDate_invalidDate_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String invalidApplicationDate0 \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String invalidApplicationDate1 \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // random letters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String invalidApplicationDate2 \u003d \"asdfqawe\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // No numbers"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String invalidApplicationDate3 \u003d \"/ / \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Invalid date-like string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String invalidApplicationDate4 \u003d \"12/13/2020\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Bad date format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String invalidApplicationDate5 \u003d \"12^12^2020\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Extra stuff"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String invalidApplicationDate6 \u003d \"12/12/2020 haha\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Too much numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String invalidApplicationDate7 \u003d \"12/12/12/2020\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Invalid leap year"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String invalidApplicationDate8 \u003d \"29/2/2019\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Invalid 31 days month"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String invalidApplicationDate9 \u003d \"31/4/2020\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate3));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate5));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate6));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate7));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate8));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate9));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void parseDate_validDate_returnsCorrectDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        int currentYear \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        LocalDate date1 \u003d LocalDate.of(2019, 3, 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        LocalDate date2 \u003d LocalDate.of(currentYear, 4, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        LocalDate date3 \u003d LocalDate.of(2020, 2, 29);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        LocalDate date4 \u003d LocalDate.of(2020, 3, 31);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // parse correctly"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(DateTimeUtil.parseDate(\"1 3 2019\"), date1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(DateTimeUtil.parseDate(\"01 03 2019\"), date1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(DateTimeUtil.parseDate(\"1/3-2019\"), date1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(DateTimeUtil.parseDate(\"2/4\"), date2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(DateTimeUtil.parseDate(\"29 2 2020\"), date3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(DateTimeUtil.parseDate(\"31 3 2020\"), date4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 68
    }
  },
  {
    "path": "src/test/java/seedu/diary/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/diary/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/diary/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InitClearCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.ClearCommandConfirmationParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.storage.JsonInternshipDiaryStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonInternshipDiaryStorage internshipDiaryStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new JsonInternshipDiaryStorage(temporaryFolder.resolve(\"internshipDiary.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StorageManager storage \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void execute_commandChangeParser_parserChanged() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String initClearCommand \u003d InitClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertCommandSuccess(initClearCommand, InitClearCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseException(listCommand, ClearCommandConfirmationParser.CANCEL_CLEAR_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Setup LogicManager with JsonInternshipDiaryIoExceptionThrowingStub"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonInternshipDiaryStorage internshipDiaryStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new JsonInternshipDiaryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInternshipDiary.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StorageManager storage \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + COMPANY_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ADDRESS_DESC_AMY + ROLE_DESC_AMY + DATE_DESC_AMY + PRIORITY_DESC_AMY + STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication expectedInternshipApplication \u003d new InternshipApplicationBuilder(AMY).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.addInternshipApplication(expectedInternshipApplication);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void getFilteredInternshipApplicationList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredInternshipApplicationList().remove(0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static class JsonInternshipDiaryIoExceptionThrowingStub extends JsonInternshipDiaryStorage {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        private JsonInternshipDiaryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 5,
      "wxwxwxwx9": 3,
      "gerhean": 56,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void execute_newInternshipApplication_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication validInternshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.addInternshipApplication(validInternshipApplication);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandSuccess(new AddCommand(validInternshipApplication), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            String.format(AddCommand.MESSAGE_SUCCESS, validInternshipApplication), expectedModel,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            validInternshipApplication);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void execute_duplicateInternshipApplication_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication internshipInList \u003d model.getInternshipDiary().getDisplayedInternshipList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(new AddCommand(internshipInList), model, AddCommand.MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 8,
      "FeliciaTay": 2,
      "wxwxwxwx9": 1,
      "gerhean": 9,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.archival.InternshipApplicationViewType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ListenerPropertyType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.statistics.Statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void constructor_nullInternshipApplication_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_internshipApplicationAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ModelStubAcceptingInternshipAdded modelStub \u003d new ModelStubAcceptingInternshipAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication validInternshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validInternshipApplication).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validInternshipApplication),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(Collections.singletonList(validInternshipApplication), modelStub.internshipsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_duplicateInternshipApplication_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication validInternshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validInternshipApplication);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithInternshipApplication(validInternshipApplication);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            AddCommand.MESSAGE_DUPLICATE_INTERNSHIP, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication nus \u003d new InternshipApplicationBuilder().withCompany(\"NUS\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication ntu \u003d new InternshipApplicationBuilder().withCompany(\"NTU\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        AddCommand addNusCommand \u003d new AddCommand(nus);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        AddCommand addNtuCommand \u003d new AddCommand(ntu);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(addNusCommand, addNusCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        AddCommand addNUsCommandCopy \u003d new AddCommand(nus);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(addNusCommand, addNUsCommandCopy);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(1, addNusCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, addNusCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(addNusCommand, addNtuCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setInternshipDiaryFilePath(Path internshipDiaryFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setInternshipDiary(ReadOnlyInternshipDiary internshipDiary) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public ReadOnlyInternshipDiary getInternshipDiary() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public void archiveInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public void unarchiveInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void deleteInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void addInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setInternshipApplication(InternshipApplication target, InternshipApplication editedInternship) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public ObservableList\u003cInternshipApplication\u003e getAllInternshipApplicationList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void updateFilteredInternshipApplicationList(Predicate\u003cInternshipApplication\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        public void updateFilteredInternshipApplicationList(Comparator\u003cInternshipApplication\u003e comparator) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public void viewArchivedInternshipApplicationList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public void viewUnarchivedInternshipApplicationList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public InternshipApplicationViewType getCurrentView() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        public void displayInternshipDetail(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * A Model stub that contains a single internship application."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static class ModelStubWithInternshipApplication extends ModelStub {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private final InternshipApplication internshipApplication;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ModelStubWithInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.internshipApplication \u003d internshipApplication;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this.internshipApplication.isSameInternshipApplication(internshipApplication);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * A Model stub that always accept the internship application being added."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static class ModelStubAcceptingInternshipAdded extends ModelStub {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        private final ArrayList\u003cInternshipApplication\u003e internshipsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return internshipsAdded.stream().anyMatch(internshipApplication::isSameInternshipApplication);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void addInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            internshipsAdded.add(internshipApplication);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public ReadOnlyInternshipDiary getInternshipDiary() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new InternshipDiary();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 80,
      "FeliciaTay": 3,
      "wxwxwxwx9": 36,
      "gerhean": 45,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/ArchivalCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code ArchivalCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ArchivalCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create archived internship applications"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication firstInternshipApplicationArchived \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        firstInternshipApplicationArchived \u003d firstInternshipApplicationArchived.archive();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication secondInternshipApplicationArchived \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        secondInternshipApplicationArchived \u003d secondInternshipApplicationArchived.archive();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create and load internship diaries"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary firstInternshipDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        firstInternshipDiary.loadInternshipApplication(firstInternshipApplicationArchived);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary secondInternshipDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        secondInternshipDiary.loadInternshipApplication(secondInternshipApplicationArchived);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create models"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model \u003d new ModelManager(firstInternshipDiary, new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel \u003d new ModelManager(secondInternshipDiary, new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // view is archived internship list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_archivalIsNotFiltered_showsSameArchival() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(new ArchivalCommand(), model, ArchivalCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_archivalIsFiltered_showsEverythingInArchival() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(new ArchivalCommand(), model, ArchivalCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_inMainListView_showsArchivalList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(new ArchivalCommand(), model, ArchivalCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 61,
      "gerhean": 10
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/ArchiveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains integration tests (interaction with the Model, and Archival Command) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * {@code ArchiveCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ArchiveCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    // default view is unarchived internship list (no need to set view)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_archiveInternshipApplication_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            archiveCommand.execute(expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication archivedInternshipApplication \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            expectedModel.getAllInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(archivedInternshipApplication.isArchived());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_archiveAlreadyArchivedInternshipApplication_throwsException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            archiveCommand.execute(expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e archiveCommand.execute(expectedModel));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_archiveOneInternshipApplication_archivalViewCorrect() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            archiveCommand.execute(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication ia \u003d expectedModel.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.archiveInternshipApplication(ia);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // can\u0027t use assertCommandSuccess because have to change view of internshipDiary after execution of command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_archiveOneInternshipApplication_listViewCorrect() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // model"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication ia \u003d expectedModel.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.archiveInternshipApplication(ia);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d ia.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // default view is unarchived so we can use assertCommandSuccess"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveFirstCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveSecondCommand \u003d new ArchiveCommand(INDEX_SECOND_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommand));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveFirstCommandCopy \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommandCopy));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different internship application index -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(archiveSecondCommand));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 122,
      "gerhean": 12
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_emptyInternshipDiary_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_nonEmptyInternshipDiary_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.setInternshipDiary(new InternshipDiary());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 5,
      "gerhean": 7,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different showStatistics value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different showStatistics value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 13,
      "gerhean": 1,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.model.internship.interview.OnlineInterview;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.EditInternshipDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.EditInterviewDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_COMPANY_AMY \u003d \"Amy\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_COMPANY_BOB \u003d \"Bob\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_ROLE_AMY \u003d \"Software Engineer\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_ROLE_BOB \u003d \"Designer\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_DATE_AMY \u003d \"03 04 2016\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_DATE_BOB \u003d \"01 02 2020\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_PRIORITY_AMY \u003d \"2\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_PRIORITY_BOB \u003d \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_STATUS_AMY \u003d \"WISHLIST\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_STATUS_BOB \u003d \"APPLIED\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final String VALID_LAST_STAGE_AMY \u003d \"WISHLIST\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final String VALID_LAST_STAGE_BOB \u003d \"APPLIED\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_ADDRESS_NUS \u003d \"123 Kent Ridge Road\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_ADDRESS_ONLINE \u003d OnlineInterview.ADDRESS_NOT_APPLICABLE.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_DATE_NUS \u003d \"10 10 2010\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_DATE_ONLINE \u003d \"20 02 2020\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_IS_ONLINE_NUS \u003d \"false\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_IS_ONLINE_ONLINE \u003d \"true\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String COMPANY_DESC_AMY \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String COMPANY_DESC_BOB \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ROLE_DESC_AMY \u003d \" \" + PREFIX_ROLE + VALID_ROLE_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String PRIORITY_DESC_AMY \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String PRIORITY_DESC_BOB \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String STATUS_DESC_AMY \u003d \" \" + PREFIX_STATUS + VALID_STATUS_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String STATUS_DESC_BOB \u003d \" \" + PREFIX_STATUS + VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ADDRESS_DESC_NUS \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_NUS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ADDRESS_DESC_ONLINE \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_ONLINE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DATE_DESC_NUS \u003d \" \" + PREFIX_DATE + VALID_DATE_NUS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DATE_DESC_ONLINE \u003d \" \" + PREFIX_DATE + VALID_DATE_ONLINE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ONLINE_DESC_NUS \u003d \" \" + PREFIX_IS_ONLINE + VALID_IS_ONLINE_NUS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ONLINE_DESC_ONLINE \u003d \" \" + PREFIX_IS_ONLINE + VALID_IS_ONLINE_ONLINE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_COMPANY_DESC \u003d \" \" + PREFIX_COMPANY + \"Google\u0026\"; // \u0027\u0026\u0027 not allowed in company"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"So\u0026\"; // \u0027\u0026\u0027 not allowed in company"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS + \" \"; // no invalid addresses"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"010420\"; // date format is DD MM YYYY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"a\"; // only numbers allowed in priority"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_STATUS_DESC \u003d \" \" + PREFIX_STATUS + \"Not\"; // \u0027Not\u0027 is not a status"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_BOOLEAN_DESC \u003d \" \" + PREFIX_IS_ONLINE + \"n\"; // \u0027n\u0027 is not a boolean"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final EditCommand.EditInternshipDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final EditCommand.EditInternshipDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InterviewEditCommand.EditInterviewDescriptor DESC_NUS;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InterviewEditCommand.EditInterviewDescriptor DESC_ONLINE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DESC_AMY \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withRole(VALID_ROLE_AMY).withApplicationDate(VALID_DATE_AMY).withPriority(VALID_PRIORITY_AMY)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withStatus(VALID_STATUS_AMY).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DESC_BOB \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withRole(VALID_ROLE_BOB).withApplicationDate(VALID_DATE_BOB).withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withStatus(VALID_STATUS_BOB).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DESC_NUS \u003d new EditInterviewDescriptorBuilder().withAddress(VALID_ADDRESS_NUS)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterviewDate(VALID_DATE_NUS).withIsOnline(VALID_IS_ONLINE_NUS).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DESC_ONLINE \u003d new EditInterviewDescriptorBuilder().withAddress(VALID_ADDRESS_ONLINE)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterviewDate(VALID_DATE_ONLINE).withIsOnline(VALID_IS_ONLINE_ONLINE).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Compares to a command that takes in an internship application to display."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel, InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * - the internship diary, filtered internship application list and selected internship application in"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipDiary expectedInternshipDiary \u003d new InternshipDiary(actualModel.getInternshipDiary());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInternshipApplication\u003e expectedFilteredList \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new ArrayList\u003c\u003e(actualModel.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedInternshipDiary, actualModel.getInternshipDiary());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the internship application at the given"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * {@code targetIndex} in the"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * {@code model}\u0027s internship diary."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static void showInternshipApplicationAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredInternshipApplicationList().size());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            model.getFilteredInternshipApplicationList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        final String[] splitName \u003d internshipApplication.getCompany().fullCompany.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.updateFilteredInternshipApplicationList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new CompanyContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(1, model.getFilteredInternshipApplicationList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the internship application at the given"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * {@code targetIndices} in the"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * {@code model}\u0027s internship diary."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static void showInternshipApplicationAtIndices(Model model, List\u003cIndex\u003e targetIndices) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // check that all indices are valid"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Index targetIndex : targetIndices) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredInternshipApplicationList().size());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e internshipApplications \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // get all internship applications and place them in list"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Index targetIndex : targetIndices) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            InternshipApplication internshipApplication \u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                model.getFilteredInternshipApplicationList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplications.add(internshipApplication);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // extract all company name keywords from internship applications"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (InternshipApplication internshipApplication : internshipApplications) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            final String[] splitName \u003d internshipApplication.getCompany().fullCompany.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            for (String name : splitName) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                keywords.add(name);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // filter internship applications list based on the company name keywords"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.updateFilteredInternshipApplicationList(new CompanyContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 74,
      "FeliciaTay": 3,
      "wxwxwxwx9": 39,
      "gerhean": 25,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.EditCommand.EditInternshipDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.EditInternshipDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication editedInternshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInternshipDescriptorBuilder(editedInternshipApplication).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editedInternshipApplication);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.setInternshipApplication(model.getFilteredInternshipApplicationList().get(0),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editedInternshipApplication);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel, editedInternshipApplication);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index indexLastInternship \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication lastInternshipApplication \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            model.getFilteredInternshipApplicationList().get(indexLastInternship.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplicationBuilder internshipApplicationInList \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InternshipApplicationBuilder(lastInternshipApplication);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication editedInternshipApplication \u003d internshipApplicationInList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withCompany(VALID_COMPANY_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastInternship, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editedInternshipApplication);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.setInternshipApplication(lastInternshipApplication, editedInternshipApplication);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel, editedInternshipApplication);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, new EditInternshipDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication editedInternshipApplication \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS, editedInternshipApplication);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel, editedInternshipApplication);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.viewUnarchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplicationInFilteredList \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication editedInternshipApplication \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InternshipApplicationBuilder(internshipApplicationInFilteredList)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB).build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editedInternshipApplication);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.setInternshipApplication(model.getFilteredInternshipApplicationList().get(0),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editedInternshipApplication);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel, editedInternshipApplication);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void execute_duplicateInternshipApplicationUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication firstInternshipApplication \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder(firstInternshipApplication).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void execute_duplicateInternshipApplicationFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // edit internship application in filtered list into a duplicate in diary book"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplicationInList \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            model.getInternshipDiary().getDisplayedInternshipList()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .get(INDEX_SECOND_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInternshipDescriptorBuilder(internshipApplicationInList).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void execute_invalidInternshipApplicationIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * but smaller than size of diary book"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void execute_invalidInternshipApplicationIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of diary book list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInternshipDiary().getDisplayedInternshipList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, DESC_AMY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor copyDescriptor \u003d new EditInternshipDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, copyDescriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, DESC_AMY)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, DESC_BOB)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 55,
      "FeliciaTay": 5,
      "wxwxwxwx9": 21,
      "gerhean": 23,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/EditInternshipDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.EditInternshipDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class EditInternshipDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditCommand.EditInternshipDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInternshipDescriptorBuilder(DESC_AMY).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // different diary -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different date -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withApplicationDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different role -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withRole(VALID_ROLE_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different priority -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withPriority(VALID_PRIORITY_BOB).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different status -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withStatus(VALID_STATUS_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 25,
      "gerhean": 13,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 3,
      "gerhean": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.PredicateUtil.prepareAddressPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.PredicateUtil.prepareCompanyPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.PredicateUtil.prepareEmailPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.PredicateUtil.preparePhonePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.PredicateUtil.preparePriorityPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.PredicateUtil.prepareRolePredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.PredicateUtil.prepareStatusPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.ApplicationDateIsDatePredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate cFirstPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new CompanyContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate cSecondPredicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new CompanyContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate rFirstPredicate \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new RoleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate rSecondPredicate \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new RoleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate aFirstPredicate \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new AddressContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate aSecondPredicate \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new AddressContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate pFirstPredicate \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PhoneContainsNumbersPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate pSecondPredicate \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PhoneContainsNumbersPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate eFirstPredicate \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new EmailContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate eSecondPredicate \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new EmailContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate dFirstPredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate dSecondPredicate \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new ApplicationDateIsDatePredicate(LocalDate.of(2021, 03, 02));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate wFirstPredicate \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PriorityContainsNumbersPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate wSecondPredicate \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PriorityContainsNumbersPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate sFirstPredicate \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new StatusContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate sSecondPredicate \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new StatusContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findThirdCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sSecondPredicate), false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findFourthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            pFirstPredicate, eFirstPredicate, dFirstPredicate, wSecondPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findFifthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            pFirstPredicate, eFirstPredicate, dSecondPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findSixthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            pFirstPredicate, eSecondPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findSeventhCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            pSecondPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findEighthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aSecondPredicate,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findNinthCommand \u003d new FindCommand(List.of(cFirstPredicate, rSecondPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findTenthCommand \u003d new FindCommand(List.of(cSecondPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different argument -\u003e return false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findThirdCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findFourthCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findFifthCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSixthCommand));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSeventhCommand));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findEighthCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findNinthCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findTenthCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_zeroKeywords_noInternshipApplicationFound() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate cPredicate \u003d prepareCompanyPredicate(\" \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate rPredicate \u003d prepareRolePredicate(\" \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate aPredicate \u003d prepareAddressPredicate(\" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate pPredicate \u003d preparePhonePredicate(\" \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate ePredicate \u003d prepareEmailPredicate(\" \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDateIsDatePredicate dPredicate \u003d new ApplicationDateIsDatePredicate((LocalDate) null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate wPredicate \u003d preparePriorityPredicate(\" \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate sPredicate \u003d prepareStatusPredicate(\" \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand command \u003d new FindCommand(List.of(cPredicate, rPredicate, aPredicate, pPredicate, ePredicate,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            dPredicate, wPredicate, sPredicate), false);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(cPredicate.and(rPredicate)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .and(aPredicate)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .and(pPredicate)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .and(ePredicate));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void execute_multipleKeywords_multipleInternshipApplicationsFound() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate cPredicate \u003d prepareCompanyPredicate(\"google facebook\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand command \u003d new FindCommand(List.of(cPredicate, new RoleContainsKeywordsPredicate(null),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new AddressContainsKeywordsPredicate(null), new PhoneContainsNumbersPredicate(null),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new EmailContainsKeywordsPredicate(null), new ApplicationDateIsDatePredicate((LocalDate) null),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PriorityContainsNumbersPredicate(null), new StatusContainsKeywordsPredicate(null)),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(cPredicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void execute_isPreamble_multipleInternshipApplicationsFound() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate cPredicate \u003d prepareCompanyPredicate(\"goo\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate rPredicate \u003d prepareRolePredicate(\"goo\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate aPredicate \u003d prepareAddressPredicate(\"goo\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate pPredicate \u003d preparePhonePredicate(\"goo\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate ePredicate \u003d prepareEmailPredicate(\"goo\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate wPredicate \u003d preparePriorityPredicate(\"goo\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate sPredicate \u003d prepareStatusPredicate(\"goo\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand command \u003d new FindCommand(List.of(cPredicate, rPredicate, aPredicate, pPredicate, ePredicate,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            wPredicate, sPredicate), true);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e predicate \u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            cPredicate.or(rPredicate).or(aPredicate).or(pPredicate).or(ePredicate).or(wPredicate).or(sPredicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(predicate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void execute_isNotPreamble_multipleInternshipApplicationsFound() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate ePredicate \u003d prepareEmailPredicate(\"google\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand command \u003d new FindCommand(List.of(ePredicate), false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(ePredicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 6,
      "wxwxwxwx9": 1,
      "gerhean": 25,
      "-": 40,
      "ongch00": 122
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            SHOWING_HELP_MESSAGE, true, false, false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 3,
      "gerhean": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/InitClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.ClearCommandConfirmationParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class InitClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void execute_initClearCommand_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertCommandSuccess(new InitClearCommand(), model, InitClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertCommandSuccess(new InitClearCommand(), model, InitClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void getNextInternshipDiaryParser_executeSuccess_returnClearCommandConfirmationParser() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Command initClearCommand \u003d new InitClearCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertCommandSuccess(initClearCommand, model, InitClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(initClearCommand.getNextInternshipDiaryParser() instanceof ClearCommandConfirmationParser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 41
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_inArchivalView_showsMainList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 2,
      "wxwxwxwx9": 8,
      "gerhean": 8,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/ReminderCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.ReminderCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.ApplicationDateAndInterviewDateComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.ApplicationDateDuePredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.InterviewDateDuePredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.IsNotArchivedPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusIsInterviewPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusIsWishlistPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "class ReminderCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // old application which was rejected"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication applicationA \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withApplicationDate(new ApplicationDate(currentDate.minus(2, ChronoUnit.DAYS)))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withCompany(\"Company A\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withStatus(Status.REJECTED)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application that has not been applied to yet, due in 7 days"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication applicationB \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withApplicationDate(new ApplicationDate(currentDate.plus(5, ChronoUnit.DAYS)))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withCompany(\"Company B\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withStatus(Status.WISHLIST)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application that has not been applied to yet, application date already over"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication applicationC \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withApplicationDate(new ApplicationDate(currentDate.minus(10, ChronoUnit.DAYS)))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withCompany(\"Company C\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withStatus(Status.WISHLIST)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application with Status.APPLIED, and has an interview in 7 days"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview interviewD \u003d new InterviewBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withDate(currentDate.plus(2, ChronoUnit.DAYS))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication applicationD \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withApplicationDate(new ApplicationDate(currentDate.minus(1, ChronoUnit.DAYS)))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withCompany(\"Company D\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withStatus(Status.APPLIED)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withInterview(interviewD)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .buildWithInterviews();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application with Status.INTERVIEW, and has an interview in 7 days"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview interviewE \u003d new InterviewBuilder()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withDate(currentDate.plus(2, ChronoUnit.DAYS))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication applicationE \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withApplicationDate(new ApplicationDate(currentDate.minus(1, ChronoUnit.DAYS)))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withCompany(\"Company E\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withStatus(Status.INTERVIEW)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withInterview(interviewE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .buildWithInterviews();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application with Status.INTERVIEW, and does not have an interview in 7 days"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview interviewF \u003d new InterviewBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withDate(currentDate.plus(9, ChronoUnit.DAYS))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication applicationF \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withApplicationDate(new ApplicationDate(currentDate.minus(3, ChronoUnit.DAYS)))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withCompany(\"Company F\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withStatus(Status.INTERVIEW)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withInterview(interviewF)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .buildWithInterviews();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipDiary internshipDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipDiary.loadInternshipApplication(applicationA);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipDiary.loadInternshipApplication(applicationB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipDiary.loadInternshipApplication(applicationC);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipDiary.loadInternshipApplication(applicationD);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipDiary.loadInternshipApplication(applicationE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipDiary.loadInternshipApplication(applicationF);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        model \u003d new ModelManager(internshipDiary, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getInternshipDiary(), userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void execute_afterReminder_showsFilteredAndSortedList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDateDuePredicate appDateWithin7DaysPredicate \u003d new ApplicationDateDuePredicate();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        StatusIsWishlistPredicate statusIsWishlistPredicate \u003d new StatusIsWishlistPredicate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e wishlistPredicate \u003d appDateWithin7DaysPredicate.and(statusIsWishlistPredicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InterviewDateDuePredicate interviewDateWithin7DaysPredicate \u003d new InterviewDateDuePredicate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        StatusIsInterviewPredicate statusIsInterviewPredicate \u003d new StatusIsInterviewPredicate();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e interviewPredicate \u003d interviewDateWithin7DaysPredicate"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .and(statusIsInterviewPredicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e datePredicate \u003d wishlistPredicate.or(interviewPredicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        IsNotArchivedPredicate isNotArchivedPredicate \u003d new IsNotArchivedPredicate();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e predicate \u003d isNotArchivedPredicate.and(datePredicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(expectedModel.getAllInternshipApplicationList().size(), 6);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(new ApplicationDateAndInterviewDateComparator());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(expectedModel.getFilteredInternshipApplicationList().size(), 2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        CommandResult expectedMessage \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedMessage, new ReminderCommand().execute(model));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertCommandSuccess(new ReminderCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ReminderCommand firstReminder \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(firstReminder, firstReminder);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertNotEquals(\"reminder\", firstReminder);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertNotEquals(null, firstReminder);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 3,
      "FeliciaTay": 118,
      "gerhean": 19
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/RemovalBasedCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType.BY_FIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType.BY_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType.BY_INDICES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndices;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.PredicateUtil.prepareEmailPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.testutil.PredicateUtil.prepareStatusPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_LIST_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_LIST_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains integration tests (interaction with the Model, DeleteCommand) and unit tests for"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * {@code RemovalBasedCommand}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Integration tests for ArchiveCommand and UnarchiveCommand are deemed unnecessary because they are similar in nature"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * to DeleteCommand. Testing integration with DeleteCommand will suffice."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class RemovalBasedCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Predicate\u003cInternshipApplication\u003e validPredicate \u003d prepareStatusPredicate(Status.APPLIED.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Predicate\u003cInternshipApplication\u003e secondValidPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        prepareStatusPredicate(Status.WISHLIST.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Predicate\u003cInternshipApplication\u003e invalidPredicate \u003d prepareEmailPredicate(Status.APPLIED.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private List\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private List\u003cIndex\u003e secondIndices;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final String commandWord \u003d DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // to prevent leakage between test cases, where the list is mutated"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        indices \u003d new ArrayList\u003c\u003e(INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        secondIndices \u003d new ArrayList\u003c\u003e(INDEX_LIST_SECOND_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_byIndexValidIndexUnfilteredListDeleteCommand_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand removalBasedDeleteCommand \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, BY_INDEX, commandWord);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication internshipApplicationToExecuteOn \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplicationToExecuteOn + \"\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.deleteInternshipApplication(internshipApplicationToExecuteOn);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_byIndexInvalidIndexUnfilteredListDeleteCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand removalBasedDeleteCommand \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(outOfBoundIndex, BY_INDEX, commandWord);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandFailure(removalBasedDeleteCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_byIndexValidIndexFilteredListDeleteCommand_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand removalBasedDeleteCommand \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, BY_INDEX, commandWord);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication internshipApplicationToExecuteOn \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplicationToExecuteOn + \"\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(expectedModel, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.deleteInternshipApplication(internshipApplicationToExecuteOn);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_byIndexInvalidIndexFilteredListDeleteCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of unfiltered diary book list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInternshipDiary().getDisplayedInternshipList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand removalBasedDeleteCommand \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(outOfBoundIndex, BY_INDEX, commandWord);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandFailure(removalBasedDeleteCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_byIndicesValidIndicesUnfilteredListDeleteCommand_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String deletedInternshipApplications \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create expected model and delete the appropriate internship applications"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Index index : indices) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            InternshipApplication internshipApplicationToDelete \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                model.getFilteredInternshipApplicationList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            expectedModel.deleteInternshipApplication(internshipApplicationToDelete);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            deletedInternshipApplications +\u003d internshipApplicationToDelete + \"\\n\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            deletedInternshipApplications);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand removalBasedDeleteCommand \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(indices, BY_INDICES, commandWord);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_byIndicesInvalidIndicesUnfilteredListDeleteCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cIndex\u003e mockIndexes \u003d new ArrayList\u003c\u003e(INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        mockIndexes.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand removalBasedDeleteCommand \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(mockIndexes, BY_INDICES, commandWord);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX + \": \" + List.of(outOfBoundIndex.getOneBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandFailure(removalBasedDeleteCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_byIndicesValidIndexFilteredListDeleteCommand_success() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndices(model, indices);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndices(expectedModel, indices);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String deletedInternshipApplications \u003d \"\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // get internship applications to delete"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Index index : indices) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            InternshipApplication internshipApplicationToDelete \u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                expectedModel.getFilteredInternshipApplicationList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toDelete.add(internshipApplicationToDelete);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            deletedInternshipApplications +\u003d internshipApplicationToDelete + \"\\n\\n\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (InternshipApplication internshipApplication : toDelete) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            expectedModel.deleteInternshipApplication(internshipApplication);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            deletedInternshipApplications);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand removalBasedDeleteCommand \u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(indices, BY_INDICES, commandWord);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_byIndicesInvalidIndicesFilteredListDeleteCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndices(model, INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cIndex\u003e mockIndexes \u003d new ArrayList\u003c\u003e(INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        mockIndexes.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand removalBasedDeleteCommand \u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(mockIndexes, BY_INDICES, commandWord);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX + \": \" + List.of(outOfBoundIndex.getOneBased());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandFailure(removalBasedDeleteCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_byFieldValidFieldUnfilteredListDeleteCommand_success() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create expected model and filter and get the appropriate internship applications to delete"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(validPredicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e internshipApplicationsToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (InternshipApplication toDelete : expectedModel.getFilteredInternshipApplicationList()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplicationsToDelete.add(toDelete);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_ALL_INTERNSHIPS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String deletedInternshipApplications \u003d \"\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // delete the filtered internship applications"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (InternshipApplication toDelete : internshipApplicationsToDelete) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            expectedModel.deleteInternshipApplication(toDelete);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            deletedInternshipApplications +\u003d toDelete + \"\\n\\n\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand removalBasedDeleteCommand \u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(validPredicate, BY_FIELD, commandWord);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            deletedInternshipApplications);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_byFieldValidFieldFilteredListDeleteCommand_success() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndices(model, INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndices(expectedModel, INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create expected model and filter and get the appropriate internship applications to delete"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(validPredicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e internshipApplicationsToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (InternshipApplication toDelete : expectedModel.getFilteredInternshipApplicationList()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplicationsToDelete.add(toDelete);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_ALL_INTERNSHIPS);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String deletedInternshipApplications \u003d \"\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // delete the filtered internship applications"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (InternshipApplication toDelete : internshipApplicationsToDelete) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            expectedModel.deleteInternshipApplication(toDelete);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            deletedInternshipApplications +\u003d toDelete + \"\\n\\n\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand removalBasedDeleteCommand \u003d"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(validPredicate, BY_FIELD, commandWord);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            deletedInternshipApplications);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // BY INDEX"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand firstRemovalBasedDeleteCommandByIndex \u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, BY_INDEX, commandWord);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand secondRemovalBasedDeleteCommandByIndex \u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, BY_INDEX, commandWord);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(firstRemovalBasedDeleteCommandByIndex.equals(firstRemovalBasedDeleteCommandByIndex));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand firstRemovalBasedDeleteCommandByIndexCopy \u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, BY_INDEX, commandWord);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(firstRemovalBasedDeleteCommandByIndex.equals(firstRemovalBasedDeleteCommandByIndexCopy));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstRemovalBasedDeleteCommandByIndex.equals(1));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstRemovalBasedDeleteCommandByIndex.equals(null));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different internship application index -\u003e returns false"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstRemovalBasedDeleteCommandByIndex.equals(secondRemovalBasedDeleteCommandByIndex));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // BY INDICES"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand firstRemovalBasedDeleteCommandByIndices \u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(indices, BY_INDICES, commandWord);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand secondRemovalBasedDeleteCommandByIndices \u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(secondIndices, BY_INDICES, commandWord);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(firstRemovalBasedDeleteCommandByIndices.equals(firstRemovalBasedDeleteCommandByIndices));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand firstRemovalBasedDeleteCommandByIndicesCopy \u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(indices, BY_INDICES, commandWord);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(firstRemovalBasedDeleteCommandByIndices.equals(firstRemovalBasedDeleteCommandByIndicesCopy));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstRemovalBasedDeleteCommandByIndices.equals(1));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstRemovalBasedDeleteCommandByIndices.equals(null));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different internship application indices -\u003e returns false"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstRemovalBasedDeleteCommandByIndices.equals(secondRemovalBasedDeleteCommandByIndices));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // BY FIELD"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand firstRemovalBasedDeleteCommandByField \u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(validPredicate, BY_FIELD, commandWord);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand secondRemovalBasedDeleteCommandByField \u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(secondValidPredicate, BY_FIELD, commandWord);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand invalidRemovalBasedDeleteCommandByField \u003d"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(invalidPredicate, BY_FIELD, commandWord);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(firstRemovalBasedDeleteCommandByField.equals(firstRemovalBasedDeleteCommandByField));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand firstRemovalBasedDeleteCommandByFieldCopy \u003d"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(validPredicate, BY_FIELD, commandWord);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(firstRemovalBasedDeleteCommandByField.equals(firstRemovalBasedDeleteCommandByFieldCopy));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstRemovalBasedDeleteCommandByField.equals(1));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstRemovalBasedDeleteCommandByField.equals(null));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different internship application predicate -\u003e returns false"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstRemovalBasedDeleteCommandByField.equals(secondRemovalBasedDeleteCommandByField));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different internship application predicate (invalid predicate) -\u003e returns false"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstRemovalBasedDeleteCommandByField.equals(invalidRemovalBasedDeleteCommandByField));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 342,
      "gerhean": 16
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/SelectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Primarily unit tests for {@code SelectCommand}, as command does not modify model."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandSuccess(selectCommand, model, SelectCommand.MESSAGE_SELECT_SUCCESS, model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(selectCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        class MockModel extends ModelManager {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            private boolean displayInternshipDetailCalled \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            public MockModel(InternshipDiary diary, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                super(diary, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            public void displayInternshipDetail(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                displayInternshipDetailCalled \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        MockModel mockModel \u003d new MockModel(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        showInternshipApplicationAtIndex(mockModel, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication internshipApplication \u003d mockModel.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertCommandSuccess(selectCommand, mockModel, SelectCommand.MESSAGE_SELECT_SUCCESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            mockModel, internshipApplication);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(mockModel.displayInternshipDetailCalled);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(INDEX_SECOND_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(selectCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different internship application index -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 62,
      "gerhean": 36
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.ApplicationDateComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.CompanyComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.PriorityComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.StatusComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private List\u003cComparator\u003cInternshipApplication\u003e\u003e comparators \u003d Arrays.asList("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        new CompanyComparator(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        new ApplicationDateComparator(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        new PriorityComparator(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        new StatusComparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e companyComparator \u003d new CompanyComparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e dateComparator \u003d new ApplicationDateComparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        SortCommand sortCompanyCommand \u003d new SortCommand(companyComparator);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        SortCommand sortDateCommand \u003d new SortCommand(dateComparator);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sortCompanyCommand, sortCompanyCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        SortCommand sortCompanyCommandCopy \u003d new SortCommand(companyComparator);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sortCompanyCommand, sortCompanyCommandCopy);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(1, sortCompanyCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, sortCompanyCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(sortCompanyCommand, sortDateCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void execute_anyComparator_sameNumberOfInternshipApplicationFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        int initialModelSize \u003d model.getFilteredInternshipApplicationList().size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, initialModelSize);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        for (Comparator\u003cInternshipApplication\u003e comparator : comparators) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            SortCommand command \u003d new SortCommand(comparator);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            expectedModel.updateFilteredInternshipApplicationList(comparator);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 73
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/StatisticsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.StatisticsCommand.SHOWING_STATISTICS_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains unit tests for {@code StatisticsCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class StatisticsCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_statistics_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            SHOWING_STATISTICS_MESSAGE, false, true, false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(new StatisticsCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 20,
      "gerhean": 5
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/UnarchiveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains integration tests (interaction with the Model and Archival Command) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * {@code UnarchiveCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class UnarchiveCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create mock internship diary and archive first internship application"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary mockInternshipDiary \u003d getTypicalInternshipDiary();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication iaToArchive \u003d mockInternshipDiary"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .getDisplayedInternshipList()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        mockInternshipDiary.archiveInternshipApplication(iaToArchive);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create models"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model \u003d new ModelManager(mockInternshipDiary, new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel \u003d new ModelManager(mockInternshipDiary, new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // switch view to archived internship list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_unarchiveInternshipApplication_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            unarchiveCommand.execute(expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication archivedInternshipApplication \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            expectedModel.getAllInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertFalse(archivedInternshipApplication.isArchived());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_unarchiveAlreadyUnarchivedInternshipApplication_throwsException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            unarchiveCommand.execute(expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.viewUnarchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e unarchiveCommand.execute(expectedModel));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_unarchiveOneInternshipApplication_listViewCorrect() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // model"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            unarchiveCommand.execute(model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.viewUnarchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication ia \u003d expectedModel.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.unarchiveInternshipApplication(ia);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.viewUnarchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // can\u0027t use assertCommandSuccess because have to change view of internshipDiary after execution of command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_unarchiveOneInternshipApplication_archivalViewSuccess() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication ia \u003d expectedModel.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.unarchiveInternshipApplication(ia);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d ia.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // default view is unarchived so we can use assertCommandSuccess"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertCommandSuccess(unarchiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveFirstCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveSecondCommand \u003d new UnarchiveCommand(INDEX_SECOND_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(unarchiveFirstCommand.equals(unarchiveFirstCommand));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveFirstCommandCopy \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(unarchiveFirstCommand.equals(unarchiveFirstCommandCopy));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different internship application index -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(unarchiveSecondCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 133,
      "gerhean": 12
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/interviewsubcommands/EditInterviewDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.DESC_NUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.DESC_ONLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_ONLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_ONLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_IS_ONLINE_ONLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.EditInterviewDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class EditInterviewDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand.EditInterviewDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewEditCommand.EditInterviewDescriptor(DESC_NUS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(DESC_NUS.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(DESC_NUS.equals(DESC_NUS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(DESC_ONLINE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // different diary -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand.EditInterviewDescriptor editedNus \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInterviewDescriptorBuilder(DESC_NUS).withAddress(VALID_ADDRESS_ONLINE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(editedNus));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different date -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedNus \u003d new EditInterviewDescriptorBuilder(DESC_NUS).withInterviewDate(VALID_DATE_ONLINE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(editedNus));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different isOnline -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedNus \u003d new EditInterviewDescriptorBuilder(DESC_NUS).withIsOnline(VALID_IS_ONLINE_ONLINE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(editedNus));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 41,
      "gerhean": 8
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/interviewsubcommands/InterviewAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiaryWithInterviews;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.NUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.ONLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.ORCHARD_TOWER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.logic.commands.exceptions.InterviewCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Contains integration tests with model and unit test for {@code InterviewAddCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewAddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void constructor_nullInterview_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewAddCommand(null, new InterviewBuilder().build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewBuilder().build());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command.execute(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_invalidDate_throwsInterviewCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ApplicationDate date \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()).getApplicationDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d new InterviewBuilder().withDate(date.fullApplicationDate.minusDays(3)).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, interview);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(InterviewCommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_validArguments_addSuccess() throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d new InterviewBuilder(ORCHARD_TOWER).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, interview);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        CommandResult result \u003d command.execute(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(String.format(InterviewAddCommand.MESSAGE_SUCCESS, interview), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(internshipApplication.hasInterview(interview));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_duplicateInterview_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d internshipApplication"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, interview);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            String.format(InterviewAddCommand.MESSAGE_DUPLICATE_INTERVIEW, internshipApplication), () -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                command.execute(model));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, NUS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand copy \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, NUS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different object but same variables -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(command.equals(copy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different type -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(5));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different index -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewAddCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, NUS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(copy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different interview -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, ONLINE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(copy));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 95,
      "gerhean": 17
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/interviewsubcommands/InterviewDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERVIEW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiaryWithInterviews;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Contains integration test with model and unit tests for {@code InterviewDeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewDeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewDeleteCommand(null, INDEX_FIRST_INTERVIEW));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command.execute(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_validIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interviewToDelete \u003d internshipApplication.getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(InterviewDeleteCommand.MESSAGE_SUCCESS, interviewToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedMessage, command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertFalse(internshipApplication.hasInterview(interviewToDelete));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()).getInterviews().size() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            outOfBoundIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command.execute(model));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand copy \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different object but same variables -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(command.equals(copy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different type -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(5));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different internshipIndex -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewDeleteCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, INDEX_FIRST_INTERVIEW);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(copy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different interviewIndex -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_SECOND_INTERVIEW);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(copy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 80,
      "gerhean": 16
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/interviewsubcommands/InterviewEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERVIEW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiaryWithInterviews;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.ONLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.ORCHARD_TOWER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.logic.commands.exceptions.InterviewCommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.EditInterviewDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewEditCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InterviewEditCommand.EditInterviewDescriptor editInterviewDescriptor \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        new EditInterviewDescriptorBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void constructor_nullArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                null, editInterviewDescriptor));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewEditCommand(null, INDEX_FIRST_INTERVIEW, editInterviewDescriptor));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW, null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command.execute(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_invalidDate_throwsInterviewCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ApplicationDate date \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()).getApplicationDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand.EditInterviewDescriptor tempInterviewDescriptor \u003d new EditInterviewDescriptorBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterviewDate(date.fullApplicationDate.minusDays(3)).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW, tempInterviewDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(InterviewCommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_missingAddressField_throwsInterviewCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d new InterviewBuilder(ONLINE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_SECOND_INTERNSHIP_APPLICATION.getZeroBased()).addInterview(interview);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index index \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_SECOND_INTERNSHIP_APPLICATION.getZeroBased()).getInterviews().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand.EditInterviewDescriptor tempInterviewDescriptor \u003d new EditInterviewDescriptorBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withIsOnline(\"false\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_SECOND_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            index, tempInterviewDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(InterviewCommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_validArguments_success() throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interviewToEdit \u003d internshipApplication.getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW, new EditInterviewDescriptorBuilder(ONLINE).build());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview editedInterview \u003d new InterviewBuilder(ONLINE).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(InterviewEditCommand.MESSAGE_EDIT_INTERVIEW_SUCCESS, editedInterview);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedMessage, command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertFalse(internshipApplication.hasInterview(interviewToEdit));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_duplicateInterview_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interviewToEdit \u003d internshipApplication.getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW, new EditInterviewDescriptorBuilder(interviewToEdit).build());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            String.format(InterviewEditCommand.MESSAGE_DUPLICATE_INTERVIEW, internshipApplication), () -\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                command.execute(model));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()).getInterviews().size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            outOfBoundIndex, editInterviewDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command.execute(model));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand copy \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(command, command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different object but same variables -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(command, copy);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different type -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(5, command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different internshipIndex -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewEditCommand(INDEX_SECOND_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(command, copy);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different interviewIndex -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_SECOND_INTERVIEW, editInterviewDescriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(command, copy);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different editInterviewDescriptor -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW, new EditInterviewDescriptorBuilder(ORCHARD_TOWER).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(command, copy);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 125,
      "gerhean": 28
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/commands/interviewsubcommands/InterviewListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.interviewsubcommands.InterviewListCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model \u003d new ModelManager(TypicalInternshipApplications"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewListCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandSuccess(new InterviewListCommand(INDEX_FIRST_INTERNSHIP_APPLICATION), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            String.format(MESSAGE_SUCCESS, internshipApplication), expectedModel,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            internshipApplication);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(new InterviewListCommand(Index.fromZeroBased(10000)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 40,
      "gerhean": 13
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/comparator/ApplicationDateAndInterviewDateComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "class ApplicationDateAndInterviewDateComparatorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void compare() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(currentDate.compareTo(currentDate), 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internship1 \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship1.withApplicationDate(new ApplicationDate(currentDate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internship2 \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship2.withApplicationDate(new ApplicationDate(currentDate.plus(1, ChronoUnit.DAYS)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internship3 \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship3.withApplicationDate(new ApplicationDate(currentDate.plus(1, ChronoUnit.DAYS)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // an application\u0027s application date compared to itself -\u003e returns 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(internship1.getApplicationDate().compareTo(internship1.getApplicationDate()), 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // comparing two applications with different application dates -\u003e does not return 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertNotEquals(internship1.getApplicationDate().compareTo(internship2.getApplicationDate()), 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // comparing internship1(with earlier application date) and internship2 (with later application date)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // -\u003e returns negative int"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(internship1.getApplicationDate().compareTo(internship2.getApplicationDate()), -1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // with same application date, comparing internship2(with earlier \u0027earliest interview date\u0027) and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // internship3(with later \u0027earliest interview date\u0027) --\u003e returns negative int"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview newInterviewForInternship2 \u003d Interview.createInterview(true,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new ApplicationDate(currentDate.plus(12, ChronoUnit.DAYS)),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview anotherInterviewForInternship2 \u003d Interview.createInterview(true,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new ApplicationDate(currentDate.plus(25, ChronoUnit.DAYS)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship2.withInterview(newInterviewForInternship2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship2.withInterview(anotherInterviewForInternship2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview newInterviewForInternship3 \u003d Interview.createInterview(true,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new ApplicationDate(currentDate.plus(16, ChronoUnit.DAYS)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship3.withInterview(newInterviewForInternship3);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Optional\u003cInterview\u003e earliestInterviewForInternship2 \u003d internship2.getEarliestInterview(currentDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(earliestInterviewForInternship2.isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Optional\u003cInterview\u003e earliestInterviewForInternship3 \u003d internship3.getEarliestInterview(currentDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(earliestInterviewForInternship3.isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate earliestInterviewDateForInternship2 \u003d earliestInterviewForInternship2.get().getInterviewDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate earliestInterviewDateForInternship3 \u003d earliestInterviewForInternship3.get().getInterviewDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(earliestInterviewDateForInternship2.compareTo(earliestInterviewDateForInternship3), -4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e applicationDateAndInterviewDateComparator \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new ApplicationDateAndInterviewDateComparator();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(applicationDateAndInterviewDateComparator, applicationDateAndInterviewDateComparator);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertNotEquals(1, applicationDateAndInterviewDateComparator);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertNotEquals(null, applicationDateAndInterviewDateComparator);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 3,
      "FeliciaTay": 69,
      "gerhean": 6
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/comparator/ApplicationDateComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by companies in lexicographical order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class ApplicationDateComparatorTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final ApplicationDate date1 \u003d new ApplicationDate(LocalDate.of(2019, 11, 1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final ApplicationDate date2 \u003d new ApplicationDate(LocalDate.of(2019, 11, 10));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final ApplicationDate date3 \u003d new ApplicationDate(LocalDate.of(2019, 12, 5));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final ApplicationDate date4 \u003d new ApplicationDate(LocalDate.of(2019, 12, 10));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDateComparator applicationDateComparator1 \u003d new ApplicationDateComparator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDateComparator applicationDateComparator2 \u003d new ApplicationDateComparator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(applicationDateComparator1, applicationDateComparator1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same kind of object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(applicationDateComparator1, applicationDateComparator2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Reverse is the same -\u003e return true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(applicationDateComparator1.reversed(), applicationDateComparator2.reversed());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_internshipApplication_correct() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDateComparator applicationDateComparator \u003d new ApplicationDateComparator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withApplicationDate(date1).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withApplicationDate(date2).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withApplicationDate(date1).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withApplicationDate(date4).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, applicationDateComparator.compare(google, google));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only same applicationDate"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, applicationDateComparator.compare(google1, facebook1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only applicationDate is different"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(applicationDateComparator.compare(google1, google2) \u003c 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(applicationDateComparator.compare(google2, google1) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // everything is different"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(applicationDateComparator.compare(google1, facebook2) \u003c 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(applicationDateComparator.compare(facebook2, google2) \u003e 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // everything reversed is different"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e reversed \u003d applicationDateComparator.reversed();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(reversed.compare(google1, facebook2) \u003e 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(reversed.compare(facebook2, google2) \u003c 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_unsortedList_listSorted() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDateComparator applicationDateComparator \u003d new ApplicationDateComparator();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withApplicationDate(date1).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withApplicationDate(date3).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withApplicationDate(date2).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withApplicationDate(date3).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        unsorted.sort(applicationDateComparator);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sorted, unsorted);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toString_returnsPrefix() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(new ApplicationDateComparator().toString(), PREFIX_DATE.getPrefix());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 107
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/comparator/CompanyComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by companies in lexicographical order."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class CompanyComparatorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CompanyComparator companyComparator1 \u003d new CompanyComparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CompanyComparator companyComparator2 \u003d new CompanyComparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(companyComparator1, companyComparator1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same kind of object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(companyComparator1, companyComparator2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Reverse is the same -\u003e return true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(companyComparator1.reversed(), companyComparator2.reversed());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_internshipApplication_correct() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CompanyComparator companyComparator \u003d new CompanyComparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google).withCompany(\"A\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google).withCompany(\"C\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"A\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"D\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, companyComparator.compare(google, google));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only same company"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, companyComparator.compare(google1, facebook1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only company is different"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(companyComparator.compare(google1, google2) \u003c 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(companyComparator.compare(google2, google1) \u003e 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only everything is different"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(companyComparator.compare(google1, facebook2) \u003c 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(companyComparator.compare(facebook2, google2) \u003e 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // everything reversed is different"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e reversed \u003d companyComparator.reversed();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(reversed.compare(google1, facebook2) \u003e 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(reversed.compare(facebook2, google2) \u003c 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_unsortedList_listSorted() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CompanyComparator companyComparator \u003d new CompanyComparator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google).withCompany(\"A\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google).withCompany(\"C\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"B\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"D\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        unsorted.sort(companyComparator);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sorted, unsorted);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toString_returnsPrefix() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(new CompanyComparator().toString(), PREFIX_COMPANY.getPrefix());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 90
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/comparator/PriorityComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by Priority."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class PriorityComparatorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        PriorityComparator priorityComparator1 \u003d new PriorityComparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        PriorityComparator priorityComparator2 \u003d new PriorityComparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(priorityComparator1, priorityComparator1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same kind of object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(priorityComparator1, priorityComparator2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Reverse is the same -\u003e return true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(priorityComparator1.reversed(), priorityComparator2.reversed());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_internshipApplication_correct() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        PriorityComparator priorityComparator \u003d new PriorityComparator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withPriority(1).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withPriority(3).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withPriority(1).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withPriority(5).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, priorityComparator.compare(google, google));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only same priority"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, priorityComparator.compare(google1, facebook1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only priority is different"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(priorityComparator.compare(google1, google2) \u003c 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(priorityComparator.compare(google2, google1) \u003e 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // everything is different"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(priorityComparator.compare(google1, facebook2) \u003c 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(priorityComparator.compare(facebook2, google2) \u003e 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // everything reversed is different"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e reversed \u003d priorityComparator.reversed();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(reversed.compare(google1, facebook2) \u003e 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(reversed.compare(facebook2, google2) \u003c 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_unsortedList_listSorted() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        PriorityComparator priorityComparator \u003d new PriorityComparator();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withPriority(1).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withPriority(3).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withPriority(2).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withPriority(4).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        unsorted.sort(priorityComparator);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sorted, unsorted);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toString_returnsPrefix() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(new PriorityComparator().toString(), PREFIX_PRIORITY.getPrefix());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 101
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/comparator/RoleComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by companies in lexicographical order."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class RoleComparatorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        RoleComparator roleComparator1 \u003d new RoleComparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        RoleComparator roleComparator2 \u003d new RoleComparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(roleComparator1, roleComparator1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same kind of object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(roleComparator1, roleComparator2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Reverse is the same -\u003e return true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(roleComparator1.reversed(), roleComparator2.reversed());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_internshipApplication_correct() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        RoleComparator roleComparator \u003d new RoleComparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google).withRole(\"A\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google).withRole(\"C\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook).withRole(\"A\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook).withRole(\"D\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, roleComparator.compare(google, google));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only same company"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, roleComparator.compare(google1, facebook1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only company is different"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(roleComparator.compare(google1, google2) \u003c 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(roleComparator.compare(google2, google1) \u003e 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only everything is different"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(roleComparator.compare(google1, facebook2) \u003c 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(roleComparator.compare(facebook2, google2) \u003e 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // everything reversed is different"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e reversed \u003d roleComparator.reversed();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(reversed.compare(google1, facebook2) \u003e 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(reversed.compare(facebook2, google2) \u003c 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_unsortedList_listSorted() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        RoleComparator roleComparator \u003d new RoleComparator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google).withRole(\"A\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google).withRole(\"C\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook).withRole(\"B\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook).withRole(\"D\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        unsorted.sort(roleComparator);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sorted, unsorted);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toString_returnsPrefix() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(new RoleComparator().toString(), PREFIX_ROLE.getPrefix());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 90
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/comparator/StatusComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by Status."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class StatusComparatorTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StatusComparator statusComparator1 \u003d new StatusComparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StatusComparator statusComparator2 \u003d new StatusComparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(statusComparator1, statusComparator1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same kind of object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(statusComparator1, statusComparator2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Reverse is the same -\u003e return true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(statusComparator1.reversed(), statusComparator2.reversed());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_internshipApplication_correct() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StatusComparator statusComparator \u003d new StatusComparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withStatus(Status.WISHLIST).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withStatus(Status.APPLIED).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withStatus(Status.WISHLIST).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withStatus(Status.OFFERED).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, statusComparator.compare(google, google));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only same status"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, statusComparator.compare(google1, facebook1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only status is different"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(statusComparator.compare(google1, google2) \u003c 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(statusComparator.compare(google2, google1) \u003e 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // everything is different"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(statusComparator.compare(google1, facebook2) \u003c 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(statusComparator.compare(facebook2, google2) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // everything reversed is different"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e reversed \u003d statusComparator.reversed();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(reversed.compare(google1, facebook2) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(reversed.compare(facebook2, google2) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_unsortedList_listSorted() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StatusComparator statusComparator \u003d new StatusComparator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withStatus(Status.WISHLIST).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withStatus(Status.INTERVIEW).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withStatus(Status.APPLIED).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .withStatus(Status.OFFERED).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        unsorted.sort(statusComparator);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sorted, unsorted);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toString_returnsPrefix() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(new StatusComparator().toString(), PREFIX_STATUS.getPrefix());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 102
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.PRIORITY_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Company;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Role;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // multiple companies - last company accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_AMY + COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // multiple addresses - last diary accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // Add new test cases for Role, Priority, Date, Status"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication expectedInternshipApplication;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // missing phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withPhone(\"\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // missing email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withEmail(\"\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // missing diary"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withAddress(\"\").build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // missing priority"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withPriority(\"5\").build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                + ROLE_DESC_BOB + DATE_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // missing company prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, VALID_COMPANY_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // missing role prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + VALID_ROLE_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ROLE_DESC_BOB + VALID_DATE_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // missing status prefix"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + VALID_STATUS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseFailure(parser, VALID_COMPANY_BOB + VALID_ROLE_BOB + VALID_DATE_BOB + VALID_STATUS_BOB,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // invalid company"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INVALID_COMPANY_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // no invalid diary"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        //         + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + INVALID_ROLE_DESC + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ROLE_DESC_BOB + INVALID_DATE_DESC + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            ApplicationDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ROLE_DESC_BOB + DATE_DESC_BOB + INVALID_PRIORITY_DESC + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // invalid status"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + INVALID_STATUS_DESC, Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INVALID_COMPANY_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                + VALID_ADDRESS_BOB + INVALID_ROLE_DESC + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 60,
      "wxwxwxwx9": 3,
      "gerhean": 75,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/ClearCommandConfirmationParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class ClearCommandConfirmationParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final InternshipDiaryParser parser \u003d new ClearCommandConfirmationParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            ClearCommandConfirmationParser.CONFIRMATION_COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            ClearCommandConfirmationParser.CONFIRMATION_COMMAND_WORD + \" \") instanceof ClearCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            ClearCommandConfirmationParser.CONFIRMATION_COMMAND_WORD.toUpperCase()) instanceof ClearCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(ParseException.class, ClearCommandConfirmationParser.CANCEL_CLEAR_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            parser.parseCommand(ClearCommandConfirmationParser.CONFIRMATION_COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(ParseException.class, ClearCommandConfirmationParser.CANCEL_CLEAR_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            parser.parseCommand(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 32
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PRIORITY_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ROLE_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_THIRD_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.EditCommand.EditInternshipDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Company;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Role;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.EditInternshipDescriptorBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, VALID_COMPANY_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"-5\" + COMPANY_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"0\" + COMPANY_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COMPANY_DESC, Company.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ROLE_DESC, Role.MESSAGE_CONSTRAINTS); // invalid role"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Priority.MESSAGE_CONSTRAINTS); // invalid priority"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STATUS_DESC, Status.MESSAGE_CONSTRAINTS); // invalid status"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            ApplicationDate.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COMPANY_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + ROLE_DESC_AMY + PRIORITY_DESC_AMY"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + COMPANY_DESC_AMY + DATE_DESC_AMY + STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withRole(VALID_ROLE_AMY).withPriority(VALID_PRIORITY_AMY).withStatus(VALID_STATUS_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withApplicationDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // company"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditInternshipDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // diary"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditInternshipDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //Add new test cases for Role, Priority, Date, Status"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 34,
      "wxwxwxwx9": 6,
      "gerhean": 51,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.ApplicationDateIsDatePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // no leading and trailing whitespaces on non preamble find"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new FindCommand(List.of(new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Facebook\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new RoleContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Engineer\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PhoneContainsNumbersPredicate(Arrays.asList(\"12345\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new EmailContainsKeywordsPredicate(Arrays.asList(\"Alice\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01)),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PriorityContainsNumbersPredicate(Arrays.asList(\"5\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new StatusContainsKeywordsPredicate(Arrays.asList(\"Active\"))),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \" c/Google Facebook r/Software Engineer a/Main Street p/12345 e/Alice \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"d/01 02 2020 w/5 s/Active\", expectedFindCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // multiple whitespaces between keywords on non preamble find"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \" c/Google Facebook \\n \\t\\n r/Software Engineer     \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                + \"a/Main Street     \\t      \\n    p/12345  \\t  e/Alice d/01 02 2020 \\t w/5 \\n s/Active\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            expectedFindCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // no leading and trailing whitespaces on preamble find"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        expectedFindCommand \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new FindCommand(List.of(new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new RoleContainsKeywordsPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new AddressContainsKeywordsPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PhoneContainsNumbersPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new EmailContainsKeywordsPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PriorityContainsNumbersPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new StatusContainsKeywordsPredicate(Arrays.asList(\"Google\"))),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \"Google c/Google Facebook r/Software Engineer a/Main Street p/12345 e/Alice \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"d/01 02 2020 w/5 s/Active\", expectedFindCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \"Google\", expectedFindCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // multiple whitespaces between keywords on preamble find"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \"Google c/Google Facebook \\n \\t\\n r/Software Engineer     \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                + \"a/Main Street     \\t      \\n    p/12345  \\t  e/Alice d/01 02 2020 \\t w/5 \\n s/Active\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            expectedFindCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \"\\t  Google \\n\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            expectedFindCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 13,
      "-": 23,
      "ongch00": 40
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/InternshipDiaryParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ArchivalCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InitClearCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.RemovalBasedCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewAddCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewDeleteCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.ApplicationDateIsDatePredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.EditInternshipDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.EditInterviewDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InterviewUtil;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InternshipDiaryParserTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final InternshipDiaryParser parser \u003d new InternshipDiaryParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .parseCommand(InternshipApplicationUtil.getAddCommand(internshipApplication));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(new AddCommand(internshipApplication), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void parseCommand_initClear() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(parser.parseCommand(InitClearCommand.COMMAND_WORD) instanceof InitClearCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(parser.parseCommand(InitClearCommand.COMMAND_WORD + \" 3\") instanceof InitClearCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand command \u003d (RemovalBasedCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, RemovalBasedCommandExecutionType.BY_INDEX,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                DeleteCommand.COMMAND_WORD),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EditCommand.EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new EditInternshipDescriptorBuilder(internshipApplication).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + InternshipApplicationUtil.getEditInternshipApplicationDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, descriptor), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"c/google\", \"r/engineer\", \"a/main\", \"p/12345\", \"e/alice\", \"d/01 02 2020\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"w/5\", \"s/Active\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(new FindCommand(List.of(new CompanyContainsKeywordsPredicate(Arrays.asList(\"google\")),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new RoleContainsKeywordsPredicate(Arrays.asList(\"engineer\")),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new AddressContainsKeywordsPredicate(Arrays.asList(\"main\")),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PhoneContainsNumbersPredicate(Arrays.asList(\"12345\")),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new EmailContainsKeywordsPredicate(Arrays.asList(\"alice\")),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01)),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PriorityContainsNumbersPredicate(Arrays.asList(\"5\")),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new StatusContainsKeywordsPredicate(Arrays.asList(\"Active\"))),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            false), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCommand_interview_list() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewListCommand command \u003d (InterviewListCommand) parser.parseCommand(InterviewCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" list\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(new InterviewListCommand(INDEX_FIRST_INTERNSHIP_APPLICATION), command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCommand_interview_add() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d new InterviewBuilder().build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand command \u003d (InterviewAddCommand)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            parser.parseCommand(InterviewUtil.getAddCommand(interview));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, interview), command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCommand_interview_delete() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand command \u003d (InterviewDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            InterviewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \" delete \" + INDEX_FIRST_INTERVIEW.getOneBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_FIRST_INTERVIEW), command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCommand_interview_edit() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d new InterviewBuilder().build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand.EditInterviewDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInterviewDescriptorBuilder(interview).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d (InterviewEditCommand) parser.parseCommand("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            InterviewCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + INDEX_FIRST_INTERVIEW.getOneBased()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \" \" + InterviewUtil.getEditInterviewApplicationDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INDEX_FIRST_INTERVIEW, descriptor), command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parseCommand_stats() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(parser.parseCommand(StatisticsCommand.COMMAND_WORD) instanceof StatisticsCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(parser.parseCommand(StatisticsCommand.COMMAND_WORD + \" 3\") instanceof StatisticsCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parseCommand_archive() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String input \u003d ArchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand command \u003d (RemovalBasedCommand) parser.parseCommand(input);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, RemovalBasedCommandExecutionType.BY_INDEX,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                ArchiveCommand.COMMAND_WORD),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            command);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parseCommand_unarchive() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String input \u003d UnarchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        RemovalBasedCommand command \u003d (RemovalBasedCommand) parser.parseCommand(input);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, RemovalBasedCommandExecutionType.BY_INDEX,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                UnarchiveCommand.COMMAND_WORD),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parseCommand_archival() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(parser.parseCommand(ArchivalCommand.COMMAND_WORD) instanceof ArchivalCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(parser.parseCommand(ArchivalCommand.COMMAND_WORD + \" 3\") instanceof ArchivalCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), () -\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 39,
      "wxwxwxwx9": 38,
      "gerhean": 48,
      "-": 55,
      "ongch00": 29
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/InterviewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_NUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_ONLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.DATE_DESC_NUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.DATE_DESC_ONLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_BOOLEAN_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ONLINE_DESC_NUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.ONLINE_DESC_ONLINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.NUS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.ONLINE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewAddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewDeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Parser parser \u003d new InterviewCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_generalBadIndex_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"a list\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_generalBadPreamble_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1 list and more\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_generalBadCommandCode_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1 notACode\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_listAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" list\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewListCommand(INDEX_FIRST_INTERNSHIP_APPLICATION));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_addAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview expectedInterview \u003d new InterviewBuilder(NUS).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //with preamble white space"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + PREAMBLE_WHITESPACE + ADDRESS_DESC_NUS + ONLINE_DESC_NUS + DATE_DESC_NUS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        //multiple diary - last diary accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_ONLINE + ONLINE_DESC_NUS + DATE_DESC_NUS + ADDRESS_DESC_NUS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //multiple date - last date accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_NUS + DATE_DESC_ONLINE + ONLINE_DESC_NUS + DATE_DESC_NUS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //multiple isOnline - last isOnline accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_NUS + ONLINE_DESC_ONLINE + DATE_DESC_NUS + ONLINE_DESC_NUS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_addNotOnlineFieldsPresent_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview expectedInterview \u003d new InterviewBuilder(ONLINE).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_ONLINE + ONLINE_DESC_ONLINE + DATE_DESC_ONLINE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_addCompulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //missing isOnline"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ADDRESS_DESC_NUS + DATE_DESC_NUS, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //missing date"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ADDRESS_DESC_NUS + ONLINE_DESC_NUS, expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //not online but missing address"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            InterviewAddCommand.MESSAGE_OFFLINE_INTERVIEW_ADDRESS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ONLINE_DESC_NUS + DATE_DESC_NUS, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_addInvalidValue_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        //invalid diary"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //        + INVALID_ADDRESS_DESC + DATE_DESC_NUS + ONLINE_DESC_NUS, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //invalid date"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ADDRESS_DESC_NUS + INVALID_DATE_DESC + ONLINE_DESC_NUS, ApplicationDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //invalid boolean"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ADDRESS_DESC_NUS + DATE_DESC_NUS + INVALID_BOOLEAN_DESC, BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_deleteBadPreamble_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" delete \","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_deleteValidArgs_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" delete \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + INDEX_FIRST_INTERVIEW.getOneBased(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_FIRST_INTERVIEW));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_deleteInvalidArgs_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" delete \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"notValid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_editBadPreamble_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_editInvalidIndex_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"notValid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_editNoEdits_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + INDEX_FIRST_INTERVIEW.getOneBased(), InterviewEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_editInvalidValue_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //invalid date"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + INDEX_FIRST_INTERVIEW.getOneBased() + \" \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ADDRESS_DESC_NUS + INVALID_DATE_DESC + ONLINE_DESC_NUS, ApplicationDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //invalid boolean"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + INDEX_FIRST_INTERVIEW.getOneBased() + \" \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + ADDRESS_DESC_NUS + DATE_DESC_NUS + INVALID_BOOLEAN_DESC, BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 138,
      "gerhean": 28
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.interviewcode.InterviewCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Company;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Role;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_COMPANY \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_ROLE \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"-651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_DATE \u003d \"010120\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"r\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_STATUS \u003d \"status\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_INTERVIEW_PREAMBLE_1String \u003d \"0\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_INTERVIEW_PREAMBLE_4Strings \u003d \"this is four strings\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_INTERVIEW_CODE \u003d \"invalid\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_COMPANY \u003d \"Google\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_ROLE \u003d \"Software Engineer\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_DATE \u003d \"01 01 2020\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_STATUS \u003d \"Applied\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_INTERVIEW_PREAMBLE \u003d \"1 add\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_INTERVIEW_CODE \u003d \"add\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(INDEX_FIRST_INTERNSHIP_APPLICATION, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(INDEX_FIRST_INTERNSHIP_APPLICATION, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCompany_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCompany((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCompany_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCompany(INVALID_COMPANY));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseCompany_validValueWithoutWhitespace_returnsCompany() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Company expectedCompany \u003d new Company(VALID_COMPANY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedCompany, ParserUtil.parseCompany(VALID_COMPANY));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseCompany_validValueWithWhitespace_returnsTrimmedCompany() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String companyWithWhitespace \u003d WHITESPACE + VALID_COMPANY + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Company expectedCompany \u003d new Company(VALID_COMPANY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedCompany, ParserUtil.parseCompany(companyWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseRole_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRole((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseRole_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRole(INVALID_ROLE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseRole_validValueWithoutWhitespace_returnsRole() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Role expectedRole \u003d new Role(VALID_ROLE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedRole, ParserUtil.parseRole(VALID_ROLE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseRole_validValueWithWhitespace_returnsTrimmedRole() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String roleWithWhitespace \u003d WHITESPACE + VALID_ROLE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Role expectedRole \u003d new Role(VALID_ROLE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedRole, ParserUtil.parseRole(roleWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseApplicationDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseApplicationDate((String) null));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseApplicationDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseApplicationDate(INVALID_DATE));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseApplicationDate_validValueWithoutWhitespace_returnsApplicationDate() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDate expectedApplicationDate \u003d new ApplicationDate(VALID_DATE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedApplicationDate, ParserUtil.parseApplicationDate(VALID_DATE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseApplicationDate_validValueWithWhitespace_returnsTrimmedApplicationDate() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDate expectedApplicationDate \u003d new ApplicationDate(VALID_DATE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedApplicationDate, ParserUtil.parseApplicationDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewPreamble_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseInterviewPreamble((String) null));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewPreamble_validValueWithoutWhiteSpace_returnsStringArray() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String preamble \u003d VALID_INTERVIEW_PREAMBLE;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] expectedArray \u003d new String[]{\"1\", \"add\"};"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] resultArray \u003d ParserUtil.parseInterviewPreamble(preamble);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedArray[0], resultArray[0]);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedArray[1], resultArray[1]);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewPreamble_validValueWithWhiteSpace_returnsStringArray() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String preamble \u003d WHITESPACE + VALID_INTERVIEW_PREAMBLE + WHITESPACE;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] expectedArray \u003d new String[]{\"1\", \"add\"};"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] resultArray \u003d ParserUtil.parseInterviewPreamble(preamble);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedArray[0], resultArray[0]);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedArray[1], resultArray[1]);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewPreamble_invalidValueWithInsufficientStrings_throwsParseException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .parseInterviewPreamble(INVALID_INTERVIEW_PREAMBLE_1String));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewPreamble_invalidValueWithExcessStrings_throwsParseException() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .parseInterviewPreamble(INVALID_INTERVIEW_PREAMBLE_4Strings));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseInterviewCode((String) null));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseInterviewCode(INVALID_INTERVIEW_CODE));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewCode_validValueWithoutWhiteSpace_returnsInterviewCode() throws ParseException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewCode interviewCode \u003d InterviewCode.ADD;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(interviewCode, ParserUtil.parseInterviewCode(VALID_INTERVIEW_CODE));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewCode_validValueWithWhiteSpace_returnsInterviewCode() throws ParseException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String codeWithWhitespace \u003d WHITESPACE + VALID_INTERVIEW_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewCode interviewCode \u003d InterviewCode.ADD;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(interviewCode, ParserUtil.parseInterviewCode(codeWithWhitespace));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseStatus_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStatus((String) null));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseStatus_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStatus(INVALID_STATUS));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStatus(VALID_STATUS.substring(1)));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseStatus_validValueWithoutWhiteSpace_returnsStatus() throws ParseException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Status status \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(status, ParserUtil.parseStatus(VALID_STATUS));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(status, ParserUtil.parseStatus(VALID_STATUS.substring(0, 1)));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(status, ParserUtil.parseStatus(VALID_STATUS.substring(0, 3)));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseStatus_validValueWithWhiteSpace_returnsStatus() throws ParseException {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String statusWithWhitespace \u003d WHITESPACE + VALID_STATUS + WHITESPACE;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Status status \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(status, ParserUtil.parseStatus(statusWithWhitespace));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((String) null));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parsePriority_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parsePriority_validValueWithoutWhitespace_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parsePriority_validValueWithWhitespace_returnsTrimmedPriority() throws Exception {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespace));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseStatus_validValueWithoutWhitespace_returnsStatus() throws Exception {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Status expectedStatus \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedStatus, ParserUtil.parseStatus(VALID_STATUS));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseStatus_validValueWithWhitespace_returnsTrimmedStatus() throws Exception {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String statusWithWhitespace \u003d WHITESPACE + VALID_STATUS + WHITESPACE;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Status expectedStatus \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedStatus, ParserUtil.parseStatus(statusWithWhitespace));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 127,
      "wxwxwxwx9": 2,
      "gerhean": 22,
      "-": 112,
      "ongch00": 63
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/RemovalBasedCommandExecutionTypeParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_LIST_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.RemovalBasedCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.PredicateUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * outside of the RemovalBasedCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * same path through the RemovalBasedCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * We will only be testing integration with DeleteCommand. Archive and Unarchive command are similar"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * to delete command in nature and it is unnecessary to test those commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class RemovalBasedCommandExecutionTypeParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final String validFieldStatus \u003d PREFIX_STATUS.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final String invalidFieldDate \u003d PREFIX_DATE.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    // Currently only this class requires such test inputs, should there be more in the future, we will"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    // create a TestUtil class that can contain all such typical test inputs"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final String sampleDate \u003d \"20 12 2020\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final String invalidIndex \u003d \" a\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final String invalidIndices \u003d \"1, a, 3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final String commandWord \u003d DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final RemovalBasedCommandExecutionTypeParser parser \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        new RemovalBasedCommandExecutionTypeParser(commandWord);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parse_byIndexValidIndex_returnsRemovalBasedCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String validIndexInput \u003d Integer.toString(INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertParseSuccess(parser, validIndexInput,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, RemovalBasedCommandExecutionType.BY_INDEX,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                commandWord)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parse_byIndexInvalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            RemovalBasedCommand.MESSAGE_USAGE_BY_INDEX.apply(commandWord));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertParseFailure(parser, invalidIndex, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parse_byIndicesValidIndices_returnsRemovalBasedCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String index1 \u003d Integer.toString(INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String index2 \u003d Integer.toString(INDEX_SECOND_INTERNSHIP_APPLICATION.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String validIndicesInput \u003d index1 + \", \" + index2;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertParseSuccess(parser, validIndicesInput,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(INDEX_LIST_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                RemovalBasedCommandExecutionType.BY_INDICES,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                commandWord)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parse_byIndicesInvalidIndices_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            RemovalBasedCommand.MESSAGE_USAGE_BY_INDICES.apply(commandWord));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertParseFailure(parser, invalidIndices, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parse_byFieldValidField_returnsRemovalBasedCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String validCommand \u003d String.format(\"%s %s%s\", commandWord, validFieldStatus, Status.APPLIED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertParseSuccess(parser, validCommand,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new RemovalBasedCommand(PredicateUtil.prepareStatusPredicate(Status.APPLIED.toString()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                RemovalBasedCommandExecutionType.BY_FIELD,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                commandWord)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parse_byFieldInvalidField_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String invalidCommand \u003d String.format(\"%s %s%s\", commandWord, invalidFieldDate, sampleDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            RemovalBasedCommand.MESSAGE_USAGE_BY_FIELD.apply(commandWord));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertParseFailure(parser, invalidCommand, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 87,
      "gerhean": 12
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/SelectCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * White-box testing for SelectCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_INTERNSHIP_APPLICATION));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_invalidArgs_throws() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 22,
      "gerhean": 6
    }
  },
  {
    "path": "src/test/java/seedu/diary/logic/parser/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.ApplicationDateComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.CompanyComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.PriorityComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.StatusComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // includes more than a single Prefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_COMPANY.toString() + \" \" + PREFIX_DATE.toString(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void parse_validArgs_returnsCorrectSortCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        SortCommand expectedSortCommand \u003d new SortCommand(new CompanyComparator());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_COMPANY.toString(), expectedSortCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(new ApplicationDateComparator());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DATE.toString(), expectedSortCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(new PriorityComparator());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_PRIORITY.toString(), expectedSortCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(new StatusComparator());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_STATUS.toString(), expectedSortCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(new CompanyComparator().reversed());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, SortCommand.REVERSE_KEYWORD + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + PREFIX_COMPANY.toString(), expectedSortCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 55
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/InternshipDiaryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.beans.PropertyChangeSupport;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.exceptions.DuplicateInternshipApplicationException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class InternshipDiaryTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final InternshipDiary internshipDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(Collections.emptyList(), internshipDiary.getDisplayedInternshipList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e internshipDiary.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void resetData_withValidReadOnlyInternshipDiary_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary newData \u003d getTypicalInternshipDiary();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(newData, internshipDiary);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void resetData_withDuplicateInternship_throwsDuplicateInternshipException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Two internship applications with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withAddress(\"1600 Amphitheatre Parkway\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e newInternshipApplications \u003d Arrays.asList(GOOGLE, editedGoogle);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiaryStub newData \u003d new InternshipDiaryStub(newInternshipApplications);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(DuplicateInternshipApplicationException.class, () -\u003e internshipDiary.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternship_nullInternship_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e internshipDiary.hasInternship(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternship_internshipNotInInternshipDiary_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(internshipDiary.hasInternship(GOOGLE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternship_internshipInInternshipDiary_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(internshipDiary.hasInternship(GOOGLE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternship_internshipApplicationWithSameIdentityFieldsInInternshipDiary_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPriority(1)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withStatus(Status.APPLIED)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(internshipDiary.hasInternship(editedGoogle));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void getInternshipList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e internshipDiary.getDisplayedInternshipList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * A stub ReadOnlyInternshipDiary whose internship list can violate interface constraints."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static class InternshipDiaryStub implements ReadOnlyInternshipDiary {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        private final ObservableList\u003cInternshipApplication\u003e internshipApplications \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        private final PropertyChangeSupport changes \u003d new PropertyChangeSupport(this);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiaryStub(Collection\u003cInternshipApplication\u003e internshipApplications) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.internshipApplications.setAll(internshipApplications);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public ObservableList\u003cInternshipApplication\u003e getDisplayedInternshipList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return internshipApplications;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public ObservableList\u003cInternshipApplication\u003e getAllInternshipList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return internshipApplications;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            changes.addPropertyChangeListener(l);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 1,
      "wxwxwxwx9": 110,
      "gerhean": 10
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.COMPARATOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIP_DETAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.FILTERED_INTERNSHIP_APPLICATIONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.ListenerPropertyType.PREDICATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.model.Model.PREDICATE_SHOW_ALL_INTERNSHIPS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.comparator.CompanyComparator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipDiaryBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(new InternshipDiary(), new InternshipDiary(modelManager.getInternshipDiary()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        userPrefs.setInternshipDiaryFilePath(Paths.get(\"internship-diary/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        userPrefs.setInternshipDiaryFilePath(Paths.get(\"internship-diary/file/path\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setInternshipDiaryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInternshipDiaryFilePath(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setInternshipDiaryFilePath_validPath_setsInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Path path \u003d Paths.get(\"internship-diary/file/path\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.setInternshipDiaryFilePath(path);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(path, modelManager.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void hasInternshipApplication_nullInternshipApplication_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasInternshipApplication(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternshipApplication_internshipApplicationNotInInternshipDiary_returnsFalse() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(modelManager.hasInternshipApplication(GOOGLE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternshipApplication_internshipApplicationInInternshipDiary_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(modelManager.hasInternshipApplication(GOOGLE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void archiveInternshipApplication_internshipApplicationIsUnarchived_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.archiveInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication newArchivedGoogleApplication \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            modelManager.getInternshipDiary().getDisplayedInternshipList().get(0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(newArchivedGoogleApplication.isArchived());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void unarchiveInternshipApplication_internshipApplicationIsArchived_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.archiveInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication newArchivedGoogleApplication \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            modelManager.getInternshipDiary().getDisplayedInternshipList().get(0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.unarchiveInternshipApplication(newArchivedGoogleApplication);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.viewUnarchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication newUnarchivedGoogleApplication \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            modelManager.getInternshipDiary().getDisplayedInternshipList().get(0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertFalse(newUnarchivedGoogleApplication.isArchived());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void addComparatorPropertyChangeListener_comparatorChanged_listenerCalled() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        class MockListener implements PropertyChangeListener {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            private Comparator\u003cInternshipApplication\u003e comparator \u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                comparator \u003d (Comparator\u003cInternshipApplication\u003e) e.getNewValue();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        MockListener mockListener \u003d new MockListener();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.addPropertyChangeListener(COMPARATOR, mockListener);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(mockListener.comparator);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e comparator1 \u003d new CompanyComparator();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.updateFilteredInternshipApplicationList(comparator1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertSame(comparator1, mockListener.comparator);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(mockListener.comparator);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void addPredicatePropertyChangeListener_comparatorChanged_listenerCalled() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        class MockListener implements PropertyChangeListener {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            private Predicate\u003cInternshipApplication\u003e predicate \u003d null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                predicate \u003d (Predicate\u003cInternshipApplication\u003e) e.getNewValue();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        MockListener mockListener \u003d new MockListener();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.addPropertyChangeListener(PREDICATE, mockListener);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(mockListener.predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e addressPredicate \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new AddressContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.updateFilteredInternshipApplicationList(addressPredicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertSame(addressPredicate, mockListener.predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(mockListener.predicate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void addDisplayedInternsipDetailPropertyChangeListener_listChanged_listenerCalled() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d GOOGLE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d FACEBOOK;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        class MockListener implements PropertyChangeListener {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            private InternshipApplication oldInternshipApplication \u003d null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            private InternshipApplication internshipApplication \u003d null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                oldInternshipApplication \u003d (InternshipApplication) e.getOldValue();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                internshipApplication \u003d (InternshipApplication) e.getNewValue();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        MockListener mockListener \u003d new MockListener();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.addPropertyChangeListener(DISPLAYED_INTERNSHIP_DETAIL, mockListener);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(mockListener.internshipApplication);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.addInternshipApplication(google);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(mockListener.oldInternshipApplication);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertSame(google, mockListener.internshipApplication);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.setInternshipApplication(google, facebook);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertSame(google, mockListener.oldInternshipApplication);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertSame(facebook, mockListener.internshipApplication);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.deleteInternshipApplication(facebook);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertSame(facebook, mockListener.oldInternshipApplication);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(mockListener.internshipApplication);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.displayInternshipDetail(google);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(mockListener.oldInternshipApplication);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertSame(google, mockListener.internshipApplication);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.viewArchivedInternshipApplicationList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(mockListener.oldInternshipApplication);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(mockListener.internshipApplication);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void addFilteredInternshipApplicationsPropertyChangeListener_propertyChanged_listenerCalled() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create mock listener"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        class MockListener implements PropertyChangeListener {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            private ObservableList\u003cInternshipApplication\u003e filteredInternshipApplications \u003d null;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                filteredInternshipApplications \u003d (ObservableList\u003cInternshipApplication\u003e) e.getNewValue();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        MockListener mockListener \u003d new MockListener();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNull(mockListener.filteredInternshipApplications);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create mock diary and filtered list"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary mockInternshipDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        mockInternshipDiary.loadInternshipApplication(new InternshipApplicationBuilder().build());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        FilteredList\u003cInternshipApplication\u003e mockInternshipApplicationFilteredList \u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new FilteredList\u003c\u003e(mockInternshipDiary.getDisplayedInternshipList());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // add listener"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelManager.addPropertyChangeListener(FILTERED_INTERNSHIP_APPLICATIONS, mockListener);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // create mock property change event"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        PropertyChangeEvent e \u003d new PropertyChangeEvent("
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            mockInternshipDiary, FILTERED_INTERNSHIP_APPLICATIONS.toString(), null,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            mockInternshipApplicationFilteredList"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.propertyChange(e);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertSame(modelManager.getFilteredInternshipApplicationList(), mockListener.filteredInternshipApplications);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void getFilteredInternshipApplicationList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            modelManager.getFilteredInternshipApplicationList().remove(0));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary diary \u003d new InternshipDiaryBuilder()"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withInternshipApplication(GOOGLE)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withInternshipApplication(FACEBOOK)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary differentDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager \u003d new ModelManager(diary, userPrefs);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(diary, userPrefs);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(modelManager, modelManagerCopy);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, modelManager);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(5, modelManager);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // different internshipDiary -\u003e returns false"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(differentDiary, userPrefs));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String[] keywords \u003d GOOGLE.getCompany().fullCompany.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.updateFilteredInternshipApplicationList("
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new CompanyContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(diary, userPrefs));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.updateFilteredInternshipApplicationList(PREDICATE_SHOW_ALL_INTERNSHIPS);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        differentUserPrefs.setInternshipDiaryFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(diary, differentUserPrefs));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "wxwxwxwx9": 87,
      "gerhean": 127,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setInternshipDiaryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setInternshipDiaryFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 2,
      "gerhean": 2,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // null diary"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Address.isValidAddress(\"    \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(Address.isValidAddress(\"\")); // no diary"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long diary"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 10,
      "-": 26,
      "ongch00": 1
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/ApplicationDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class ApplicationDateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String nullStringApplicationDate \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        LocalDate nullApplicationDate \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ApplicationDate(nullStringApplicationDate));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ApplicationDate(nullApplicationDate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void constructor_invalidApplicationDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String invalidApplicationDate \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ApplicationDate(invalidApplicationDate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void isValidApplicationDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null application date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ApplicationDate.isValidApplicationDate(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // invalid application date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertFalse(ApplicationDate.isValidApplicationDate(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertFalse(ApplicationDate.isValidApplicationDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertFalse(ApplicationDate.isValidApplicationDate(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertFalse(ApplicationDate.isValidApplicationDate(\"20^01-2020\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // valid application date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(ApplicationDate.isValidApplicationDate(\"01 01 2020\")); // first day of year"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"31 12 2020\")); // last day of year"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 9,
      "ongch00": 33
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/CompanyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class CompanyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Company(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_invalidCompany_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String invalidCompany \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Company(invalidCompany));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isValidCompany() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null company"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Company.isValidCompany(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // invalid company"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\"A*Star\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // valid company"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"bandai namco\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"3e accounting\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"Koei Tecmo\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"Defence Science and Technology Agency\")); // long companys"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 2,
      "ongch00": 38
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(Email.isValidEmail(\"\")); // means no email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 8,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/InternshipApplicationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.TypicalInterviews;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class InternshipApplicationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInterviews_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FACEBOOK.setInterviews(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void isSameInternshipApplication() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(GOOGLE.isSameInternshipApplication(GOOGLE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.isSameInternshipApplication(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication editedGoogle \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new InternshipApplicationBuilder(GOOGLE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.isSameInternshipApplication(editedGoogle));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.isSameInternshipApplication(editedGoogle));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // CHECK WITH THE TEAM IF WE ARE GOING FORWARD WITH THE CURRENT EQUALITY REQUIREMENTS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different priority or status -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withStatus(VALID_STATUS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(GOOGLE.isSameInternshipApplication(editedGoogle));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication googleCopy \u003d new InternshipApplicationBuilder(GOOGLE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(GOOGLE.equals(googleCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(GOOGLE.equals(GOOGLE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(FACEBOOK));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication editedGoogle \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new InternshipApplicationBuilder(GOOGLE).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(editedGoogle));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(editedGoogle));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(editedGoogle));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // different diary -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(editedGoogle));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void getEarliestInterview_noInterviewsInApplication_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        LocalDate date \u003d LocalDate.MIN;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(internshipApplication.getEarliestInterview(date).isEmpty());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void getEarliestInterview_allInterviewsExpired_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        LocalDate date \u003d LocalDate.MAX;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterview(new InterviewBuilder().build())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterview(new InterviewBuilder(TypicalInterviews.CENTRAL_LIBRARY).build())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .buildWithInterviews();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(internshipApplication.getEarliestInterview(date).isEmpty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void getEarliestInterview_someInterviewsExpired_returnsSmallestNonExpiredDate() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        LocalDate maxDate \u003d LocalDate.MAX;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterview(new InterviewBuilder().build())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterview(new InterviewBuilder(TypicalInterviews.CENTRAL_LIBRARY).build())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterview(new InterviewBuilder().withDate(maxDate).build())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .buildWithInterviews();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(internshipApplication.getEarliestInterview(maxDate).get().getInterviewDate().equals(maxDate));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void getEarliestInterview_allInterviewsValid_returnsSmallestDate() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        LocalDate minDate \u003d LocalDate.MIN;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterview(new InterviewBuilder().build())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterview(new InterviewBuilder(TypicalInterviews.CENTRAL_LIBRARY).build())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterview(new InterviewBuilder().withDate(minDate).build())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .buildWithInterviews();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(internshipApplication.getEarliestInterview(minDate).get().getInterviewDate().equals(minDate));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void getEarliestApplicationOrInterviewDate_applicationDateExpiredInterviewDateValid_returnsInterviewDate() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate interviewDate \u003d currentDate.plus(2, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withApplicationDate(\"20 12 2019\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withInterview(new InterviewBuilder().withDate(interviewDate).build())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .buildWithInterviews();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDate earliestDate \u003d internshipApplication.getEarliestApplicationOrInterviewDate();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(earliestDate.equals(new ApplicationDate(interviewDate)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void getEarliestApplicationOrInterviewDate_onlyInterviewDatesValid_returnsEarliestInterviewDate() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate interviewDate1 \u003d currentDate.plus(2, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate interviewDate2 \u003d currentDate.plus(5, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate interviewDate3 \u003d currentDate.plus(1, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withApplicationDate(\"20 12 2019\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withInterview(new InterviewBuilder().withDate(interviewDate1).build())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withInterview(new InterviewBuilder().withDate(interviewDate2).build())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withInterview(new InterviewBuilder().withDate(interviewDate3).build())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .buildWithInterviews();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDate earliestDate \u003d internshipApplication.getEarliestApplicationOrInterviewDate();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(earliestDate.equals(new ApplicationDate(interviewDate3)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void getEarliestApplicationOrInterviewDate_allDatesValid_returnsEarliestApplicationOrInterviewDate() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate interviewDate1 \u003d currentDate.plus(7, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withApplicationDate(new ApplicationDate(currentDate))"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withInterview(new InterviewBuilder().withDate(interviewDate1).build())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .buildWithInterviews();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDate earliestDate \u003d internshipApplication.getEarliestApplicationOrInterviewDate();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(earliestDate.equals(new ApplicationDate(currentDate)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 49,
      "FeliciaTay": 40,
      "wxwxwxwx9": 75,
      "gerhean": 13
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"\")); // Denotes no phone"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 8,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_invalidPriority_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String invalidPriority \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"91\")); // more than 10"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"-1\")); // less than 0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"1p0\")); // alphabets within digits"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"1 0\")); // spaces within digits"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(91)); // more than 10"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(-1)); // less than 0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // valid priority"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"0\")); // lowest"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"5\")); // middle"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"10\")); // largest"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(0)); // lowest"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(5)); // middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(10)); // largest"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 2,
      "ongch00": 40
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/RoleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class RoleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Role(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_invalidRole_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String invalidRole \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Role(invalidRole));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isValidRole() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null role"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Role.isValidRole(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Role.isValidRole(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Role.isValidRole(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Role.isValidRole(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Role.isValidRole(\"cleaner*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // valid role"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Role.isValidRole(\"data scientist\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Role.isValidRole(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Role.isValidRole(\"3d artist\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Role.isValidRole(\"Software Engineer\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Role.isValidRole(\"3D Open Environment and Backdrop Artist\")); // long roles"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 2,
      "ongch00": 38
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/interview/InterviewTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.interview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.CENTRAL_LIBRARY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.ONLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Tests integration between OfflineInterview and OnlineInterview."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void createInterview_invalidArgs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d CENTRAL_LIBRARY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // Null date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Interview.createInterview(false, null,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            interview.getInterviewAddress()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // Null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Interview.createInterview(false,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            interview.getDate(), null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void createOnlineInterview_validArgs_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d ONLINE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview onlineInterview \u003d Interview.createOnlineInterview(interview.getDate());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(ONLINE.equals(onlineInterview));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview clbCopy \u003d new InterviewBuilder(CENTRAL_LIBRARY).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(CENTRAL_LIBRARY.equals(clbCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(CENTRAL_LIBRARY.equals(CENTRAL_LIBRARY));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(5));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different isOnline -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(ONLINE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // different diary -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview editedClb \u003d new InterviewBuilder(CENTRAL_LIBRARY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(editedClb));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedClb \u003d new InterviewBuilder(CENTRAL_LIBRARY).withDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(editedClb));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different isOnline -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedClb \u003d new InterviewBuilder(CENTRAL_LIBRARY).withIsOnline(true).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(editedClb));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 62,
      "gerhean": 7
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/AddressContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class AddressContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new AddressContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(firstPredicate, firstPredicateCopy);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(1, firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_addressContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new AddressContainsKeywordsPredicate(Collections.singletonList(\"Clementi\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Clementi\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Avenue\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Main Road\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"mAiN\", \"sTrEeT\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_addressDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .test(new InternshipApplicationBuilder().withAddress(\"Blk 456, Den Road, #01-355\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Clementi\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .test(new InternshipApplicationBuilder().withAddress(\"Blk 456, Den Road, #01-355\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Keywords match company, role, phone, email, priority and status, but does not match diary"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Software\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"Engineer\", \"12345\", \"alice@email.com\", \"1\", \"APPLIED\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 9,
      "ongch00": 88
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/ApplicationDateDuePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "class ApplicationDateDuePredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDateDuePredicate applicationDateDuePredicate \u003d new ApplicationDateDuePredicate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(applicationDateDuePredicate, applicationDateDuePredicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(1, applicationDateDuePredicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, applicationDateDuePredicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_futureApplicationDateIsWithin7Days_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDateDuePredicate predicate \u003d new ApplicationDateDuePredicate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application date is same as current date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDate newDate \u003d new ApplicationDate(currentDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application date is within 7 days from current date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate laterDate \u003d LocalDate.now().plus(4, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        newDate \u003d new ApplicationDate(laterDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate sevenDaysFromCurrentDate \u003d LocalDate.now().plus(7, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        newDate \u003d new ApplicationDate(sevenDaysFromCurrentDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_applicationDateHasAlreadyPassed_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDateDuePredicate predicate \u003d new ApplicationDateDuePredicate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application date is before current date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate pastDate \u003d LocalDate.now().minus(4, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDate newDate \u003d new ApplicationDate(pastDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate sevenDaysBeforeCurrent \u003d LocalDate.now().minus(7, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        newDate \u003d new ApplicationDate(sevenDaysBeforeCurrent.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate moreThanOneWeekBeforeCurrent \u003d LocalDate.now().minus(12, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        newDate \u003d new ApplicationDate(moreThanOneWeekBeforeCurrent.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_futureApplicationDateIsNotWithin7Days_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDateDuePredicate predicate \u003d new ApplicationDateDuePredicate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application date is more than 7 days past current date"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate laterDate \u003d LocalDate.now().plus(10, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDate newDate \u003d new ApplicationDate(laterDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 67,
      "gerhean": 8
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/ApplicationDateIsDatePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class ApplicationDateIsDatePredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        LocalDate firstPredicateDate \u003d LocalDate.of(2020, 02, 01);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        LocalDate secondPredicateDate \u003d LocalDate.of(2021, 03, 02);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new ApplicationDateIsDatePredicate(firstPredicateDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new ApplicationDateIsDatePredicate(secondPredicateDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new ApplicationDateIsDatePredicate(firstPredicateDate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different dates -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_applicationDateContainsNumbers_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(\"01 02 2020\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_applicationDateDoesNotContainNumbers_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate predicate \u003d new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(\"02 02 2020\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullDate_returnsTrue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDateIsDatePredicate predicate \u003d new ApplicationDateIsDatePredicate((LocalDate) null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullDate_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate predicate \u003d new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 5,
      "ongch00": 62
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/CompanyContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class CompanyContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CompanyContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new CompanyContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CompanyContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new CompanyContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CompanyContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new CompanyContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void test_companyContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CompanyContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            new CompanyContainsKeywordsPredicate(Collections.singletonList(\"Google\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Facebook\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google Facebook\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Facebook\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google Apple\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"gOoGlE\", \"FaCeBoOk\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google Facebook\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void test_companyDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CompanyContainsKeywordsPredicate predicate \u003d new CompanyContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Apple Facebook\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Keywords match role, phone, email, diary, priority and status, but does not match company"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Engineer\", \"12345\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"alice@email.com\", \"Main\", \"Street\", \"1\", \"APPLIED\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate predicate \u003d new CompanyContainsKeywordsPredicate(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "wxwxwxwx9": 71,
      "gerhean": 5,
      "ongch00": 18
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/CustomToStringPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class CustomToStringPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String str1 \u003d \"a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String str2 \u003d \"b\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        AddressContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        AddressContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new AddressContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CustomToStringPredicate\u003cInternshipApplication\u003e firstPredicateWrap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new CustomToStringPredicate\u003c\u003e(firstPredicate, str1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CustomToStringPredicate\u003cInternshipApplication\u003e secondPredicateWrap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new CustomToStringPredicate\u003c\u003e(secondPredicate, str1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CustomToStringPredicate\u003cInternshipApplication\u003e thirdPredicateWrap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new CustomToStringPredicate\u003c\u003e(firstPredicate, str2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(firstPredicateWrap, firstPredicateWrap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CustomToStringPredicate\u003cInternshipApplication\u003e firstPredicateWrapCopy \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new CustomToStringPredicate\u003c\u003e(new AddressContainsKeywordsPredicate(firstPredicateKeywordList), str1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(firstPredicateWrap, firstPredicateWrapCopy);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(1, firstPredicateWrap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, firstPredicateWrap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // different internal predicate -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(firstPredicateWrap, secondPredicateWrap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // different internal string -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(firstPredicateWrap, thirdPredicateWrap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void test_internalPredicateAndStringIsSame() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Object someObject \u003d \"a\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String someString \u003d \"b\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        class MockPredicate implements Predicate\u003cObject\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            public boolean test(Object o) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                return o.equals(someObject);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CustomToStringPredicate\u003cObject\u003e customToStringPredicate \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new CustomToStringPredicate\u003c\u003e(new MockPredicate(), someString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(customToStringPredicate.test(someObject));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertFalse(customToStringPredicate.test(someString));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(customToStringPredicate.toString(), someString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 80
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/EmailContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class EmailContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new EmailContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_emailContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Full email"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new EmailContainsKeywordsPredicate(Collections.singletonList(\"alice@example.com\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Collections.singletonList(\"alice@\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"bob\", \"example\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"bob@example.com\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"alice\", \"hello\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"aLiCe\", \"eXaMpLe\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_emailDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"bob\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Keywords match company, role, phone, diary, priority and status, but does not match email"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\", \"12345\", \"Main\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"Street\", \"1\", \"APPLIED\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"alice\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 5,
      "ongch00": 93
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/InterviewDateDuePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "class InterviewDateDuePredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InterviewDateDuePredicate interviewDateDuePredicate \u003d new InterviewDateDuePredicate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(interviewDateDuePredicate.equals(interviewDateDuePredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(interviewDateDuePredicate.equals(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, interviewDateDuePredicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_futureInterviewDateIsWithin7Days_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InterviewDateDuePredicate predicate \u003d new InterviewDateDuePredicate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // interview date is same as current date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internshipApplicationTestCurrent \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview newInterviewTestCurrent \u003d Interview.createInterview(true, new ApplicationDate(currentDate),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationTestCurrent.withInterview(newInterviewTestCurrent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(internshipApplicationTestCurrent.buildWithInterviews()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // interview date is within 7 days from current date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internshipApplicationTestWithin \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate laterDate \u003d currentDate.plus(4, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview newInterviewTestWithin \u003d Interview.createInterview(true, new ApplicationDate(laterDate),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationTestWithin.withInterview(newInterviewTestWithin);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(internshipApplicationTestWithin.buildWithInterviews()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_interviewDateHasPassed_returnsFalse() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InterviewDateDuePredicate predicate \u003d new InterviewDateDuePredicate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // interview date date is before current date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internshipApplicationTestPast \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate pastDate \u003d LocalDate.now().minus(4, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview newInterviewTestPast \u003d Interview.createInterview(true, new ApplicationDate(pastDate),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationTestPast.withInterview(newInterviewTestPast);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(internshipApplicationTestPast.buildWithInterviews()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_interviewDateIsNotWithin7Days_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InterviewDateDuePredicate predicate \u003d new InterviewDateDuePredicate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // interview date is more than 7 days past current date"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internshipApplicationTestMore \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate laterDate \u003d LocalDate.now().plus(10, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview newInterviewTestMore \u003d Interview.createInterview(true, new ApplicationDate(laterDate),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationTestMore.withInterview(newInterviewTestMore);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(internshipApplicationTestMore.buildWithInterviews()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 4,
      "FeliciaTay": 67,
      "gerhean": 7
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/IsNotArchivedPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "class IsNotArchivedPredicateTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        IsNotArchivedPredicate predicate \u003d new IsNotArchivedPredicate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.equals(predicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.equals(1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_applicationNotArchived_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        IsNotArchivedPredicate predicate \u003d new IsNotArchivedPredicate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_applicationIsArchived_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalInternshipDiary(), userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        IsNotArchivedPredicate predicate \u003d new IsNotArchivedPredicate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            archiveCommand.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication archivedInternshipApplication \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            model.getAllInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(archivedInternshipApplication));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 50,
      "gerhean": 12
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/PhoneContainsNumbersPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class PhoneContainsNumbersPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"12345\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"12345\", \"67890\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PhoneContainsNumbersPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PhoneContainsNumbersPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PhoneContainsNumbersPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different numbers -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_phoneContainsNumbers_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Full number"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PhoneContainsNumbersPredicate(Collections.singletonList(\"12345\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One number"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"123\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"123456\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Multiple numbers"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"123\", \"456\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"123456\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching number"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"123\", \"987\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"123456\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_phoneDoesNotContainNumbers_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero numbers"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate predicate \u003d new PhoneContainsNumbersPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withPhone(\"12345678\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching number"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"876\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withPhone(\"12345678\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Keywords match company, role, email, diary, priority and status, but does not match phone"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"alice@email.com\", \"Main\", \"Street\", \"8\", \"APPLIED\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"8\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullNumbers_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate predicate \u003d new PhoneContainsNumbersPredicate(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullNumbers_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"12345\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 5,
      "ongch00": 89
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/PriorityContainsNumbersPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class PriorityContainsNumbersPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"2\", \"8\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PriorityContainsNumbersPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PriorityContainsNumbersPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PriorityContainsNumbersPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different numbers -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_priorityContainsNumbers_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Full number"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new PriorityContainsNumbersPredicate(Collections.singletonList(\"10\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPriority(\"10\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One number"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching number"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"1\", \"9\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_priorityDoesNotContainNumbers_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero numbers"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate predicate \u003d new PriorityContainsNumbersPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"10\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Keywords match company, role, phone, email, diary and status but does not match priority"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"12345\", \"alice@email.com\", \"Main\", \"Street\", \"APPLIED\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullNumbers_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate predicate \u003d new PriorityContainsNumbersPredicate(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullNumbers_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 5,
      "ongch00": 85
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/RoleContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class RoleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new RoleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new RoleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new RoleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_roleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new RoleContainsKeywordsPredicate(Collections.singletonList(\"Cleaner\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Cleaner\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Engineer\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Cleaner\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Developer\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"sOfTwArE\", \"eNgInEeR\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_roleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate predicate \u003d new RoleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Cleaner\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Keywords match company, phone, email, diary, priority and status, but does not match role"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Google\", \"12345\", \"alice@email.com\", \"Main\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"Street\", \"1\", \"APPLIED\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate predicate \u003d new RoleContainsKeywordsPredicate(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Engineer\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 5,
      "ongch00": 89
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/StatusContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class StatusContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new StatusContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new StatusContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new StatusContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_statusContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Full status"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            new StatusContainsKeywordsPredicate(Collections.singletonList(\"APPLIED\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new StatusContainsKeywordsPredicate(Collections.singletonList(\"APPLIED\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"APPLIED\", \"REJECTED\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"aPpLiEd\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_statusDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate predicate \u003d new StatusContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"bob\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Keywords match company, role, phone, email, diary and priority, but does not match status"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\", \"12345\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"alice@email.com\", \"Main\", \"Street\", \"1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate predicate \u003d new StatusContainsKeywordsPredicate(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"APPLIED\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 5,
      "ongch00": 89
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/StatusIsInterviewPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "class StatusIsInterviewPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        StatusIsInterviewPredicate predicate \u003d new StatusIsInterviewPredicate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.equals(predicate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.equals(1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, predicate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_statusIsInterview_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        StatusIsInterviewPredicate predicate \u003d new StatusIsInterviewPredicate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(Status.INTERVIEW).build()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_statusIsNotInterview_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        StatusIsInterviewPredicate predicate \u003d new StatusIsInterviewPredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.WISHLIST).build()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.APPLIED).build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.OFFERED).build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.GHOSTED).build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.REJECTED).build()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 39,
      "gerhean": 5
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/internship/predicate/StatusIsWishlistPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "class StatusIsWishlistPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        StatusIsWishlistPredicate predicate \u003d new StatusIsWishlistPredicate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.equals(predicate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.equals(1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, predicate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_statusIsWishlist_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        StatusIsWishlistPredicate predicate \u003d new StatusIsWishlistPredicate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(Status.WISHLIST).build()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_statusIsNotWishlist_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        StatusIsWishlistPredicate predicate \u003d new StatusIsWishlistPredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.APPLIED).build()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.INTERVIEW).build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.OFFERED).build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.GHOSTED).build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.REJECTED).build()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 40,
      "gerhean": 5
    }
  },
  {
    "path": "src/test/java/seedu/diary/model/statistics/StatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code Statistics}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class StatisticsTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    // these internship applications samples are currently only used within here"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    // if other classes start needing such samples, we will create a new util class so that"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    // we can reused all these samples"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final InternshipApplication WISHLIST_IA \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withCompany(\"a\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withStatus(Status.WISHLIST)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final InternshipApplication APPLIED_IA \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withCompany(\"b\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withStatus(Status.APPLIED)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final InternshipApplication INTERVIEW_IA \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withCompany(\"c\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withStatus(Status.INTERVIEW)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final InternshipApplication OFFERED_IA \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withCompany(\"d\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withStatus(Status.OFFERED)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final InternshipApplication REJECTED_IA \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withCompany(\"e\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withStatus(Status.REJECTED)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final InternshipApplication GHOSTED_IA \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withCompany(\"f\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        .withStatus(Status.GHOSTED)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Model emptyModel \u003d new ModelManager(new InternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final HashMap\u003cStatus, Integer\u003e statusCount \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Status[] statuses \u003d Status.class.getEnumConstants();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(WISHLIST_IA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(APPLIED_IA);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(INTERVIEW_IA);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(OFFERED_IA);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(REJECTED_IA);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(GHOSTED_IA);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        initializeStatusCount();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void computeCount_internshipApplicationWithAllStatusAdded_countComputedCorrectly() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics.computeCount(model.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        computeActualStatusCount();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int actualTotalCount \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Status status : statuses) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            int computedCount \u003d statistics.getCount(status);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            int actualCount \u003d statusCount.get(status);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            assertEquals(computedCount, actualCount);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            actualTotalCount +\u003d actualCount;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(statistics.getTotalCount(), actualTotalCount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void computeCount_noInternshipApplicationAdded_countRemainsZero() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics.computeCount(emptyModel.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Status status : statuses) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            int computedCount \u003d statistics.getCount(status);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            assertEquals(computedCount, 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(statistics.getTotalCount(), 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void resetStatistics_internshipApplicationWithAllStatusAdded_countsBecomeZero() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics.computeAndUpdateStatistics(model.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Status status : statuses) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            assertNotEquals(statistics.getCount(status), 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics.resetStatistics();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Status status : statuses) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            assertEquals(statistics.getCount(status), 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void initializeStatusCount() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Status status : statuses) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            statusCount.put(status, 0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Computes the actual count of statuses in internship application(s)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void computeActualStatusCount() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cStatus\u003e statuses \u003d model.getFilteredInternshipApplicationList().stream()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .map(ia -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                return ia.getStatus();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            })"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statuses.forEach((status) -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            int count \u003d statusCount.get(status);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            statusCount.put(status, ++count);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 2,
      "wxwxwxwx9": 120,
      "gerhean": 9
    }
  },
  {
    "path": "src/test/java/seedu/diary/storage/JsonAdaptedInternshipTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.storage.JsonAdaptedInternship.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Company;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Role;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class JsonAdaptedInternshipTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_COMPANY \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_ROLE \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"-651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_APPLICATION_DATE \u003d \"20/20/2020\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"11\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_STATUS \u003d \"ALIVE\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_IS_ARCHIVED \u003d \"s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_COMPANY \u003d GOOGLE.getCompany().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_ROLE \u003d GOOGLE.getRole().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_ADDRESS \u003d GOOGLE.getAddress().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_PHONE \u003d GOOGLE.getPhone().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_EMAIL \u003d GOOGLE.getEmail().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_APPLICATION_DATE \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        GOOGLE.getApplicationDate().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_PRIORITY \u003d GOOGLE.getPriority().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_STATUS \u003d GOOGLE.getStatus().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final List\u003cJsonAdaptedInterview\u003e VALID_INTERVIEWS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_IS_ARCHIVED \u003d GOOGLE.isArchived().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private static final String VALID_LAST_STAGE \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonAdaptedInternshipTest\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final Path TYPICAL_INTERNSHIPS_FILE \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"typicalInterviewInternship.json\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final Path INVALID_INTERNSHIP_FILE \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"invalidInterviewInternship.json\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final Path DUPLICATE_INTERNSHIP_FILE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"duplicateInterviewInternship.json\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_validInternshipDetails_returnsInternship() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(GOOGLE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(GOOGLE, internship.toModelType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidCompany_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new JsonAdaptedInternship(INVALID_COMPANY,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_ROLE, VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d Company.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullCompany_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new JsonAdaptedInternship(null,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_ROLE, VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidRole_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new JsonAdaptedInternship(VALID_COMPANY,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INVALID_ROLE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d Role.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullRole_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new JsonAdaptedInternship(VALID_COMPANY,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                null, VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                INVALID_PHONE,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS, VALID_PHONE,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                INVALID_EMAIL,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS, VALID_PHONE,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            INVALID_ADDRESS,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void toModelType_invalidApplicationDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INVALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String expectedMessage \u003d ApplicationDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void toModelType_nullApplicationDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ApplicationDate.class.getSimpleName());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INVALID_PRIORITY,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INVALID_STATUS,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d Status.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidIsArchived_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_STATUS, VALID_INTERVIEWS,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            INVALID_IS_ARCHIVED, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d BooleanUtil.INVALID_BOOLEAN;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullIsArchived_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            VALID_STATUS, VALID_INTERVIEWS, null, VALID_LAST_STAGE);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Messages.IS_ARCHIVED);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 113,
      "FeliciaTay": 25,
      "gerhean": 102,
      "ongch00": 13
    }
  },
  {
    "path": "src/test/java/seedu/diary/storage/JsonAdaptedInterviewTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.storage.JsonAdaptedInterview.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.NUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class JsonAdaptedInterviewTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_IS_ONLINE \u003d \"n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \"  \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_DATE \u003d \"11002222\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_IS_ONLINE \u003d \"false\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 avenue road\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_DATE \u003d \"10 10 2010\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_validInterviewDetails_returnsInternship() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(NUS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(NUS, interview.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(INVALID_ADDRESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_IS_ONLINE, VALID_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(null,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_IS_ONLINE, VALID_DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_IS_ONLINE, INVALID_DATE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d ApplicationDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            VALID_IS_ONLINE, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ApplicationDate.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidIsOnline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            INVALID_IS_ONLINE, VALID_DATE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d BooleanUtil.INVALID_BOOLEAN;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullIsOnline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            null, VALID_DATE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Boolean.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 69,
      "gerhean": 8
    }
  },
  {
    "path": "src/test/java/seedu/diary/storage/JsonInternshipDiaryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class JsonInternshipDiaryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonInternshipDiaryStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void readInternshipDiary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readInternshipDiary(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private java.util.Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new JsonInternshipDiaryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            .readInternshipDiary(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertFalse(readInternshipDiary(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            readInternshipDiary(\"notJsonFormatInternshipDiary.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void readInternshipDiary_invalidInternshipInternshipDiary_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            readInternshipDiary(\"invalidInternshipInternshipDiary.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void readInternshipDiary_invalidAndValidInternshipInternshipDiary_throwDataConversionException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            readInternshipDiary(\"invalidAndValidInternshipInternshipDiary.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void readAndSaveInternshipDiary_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempInternshipDiary.json\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiary original \u003d getTypicalInternshipDiary();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonInternshipDiaryStorage jsonInternshipDiaryStorage \u003d new JsonInternshipDiaryStorage(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        jsonInternshipDiaryStorage.saveInternshipDiary(original, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ReadOnlyInternshipDiary readBack \u003d jsonInternshipDiaryStorage.readInternshipDiary(filePath).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(original, new InternshipDiary(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        original.loadInternshipApplication(AMY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        original.removeInternship(GOOGLE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        jsonInternshipDiaryStorage.saveInternshipDiary(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        readBack \u003d jsonInternshipDiaryStorage.readInternshipDiary(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(original, new InternshipDiary(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        original.addInternshipApplication(BOB);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        jsonInternshipDiaryStorage.saveInternshipDiary(original); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        readBack \u003d jsonInternshipDiaryStorage.readInternshipDiary().get(); // file path not specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(original, new InternshipDiary(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void saveInternshipDiary_nullInternshipDiary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInternshipDiary(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Saves {@code internshipDiary} at the specified {@code filePath}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, String filePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new JsonInternshipDiaryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .saveInternshipDiary(internshipDiary, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void saveInternshipDiary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInternshipDiary(new InternshipDiary(), null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 2,
      "wxwxwxwx9": 1,
      "gerhean": 112
    }
  },
  {
    "path": "src/test/java/seedu/diary/storage/JsonSerializableInternshipDiaryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class JsonSerializableInternshipDiaryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableInternshipDiaryTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Path TYPICAL_INTERNSHIPS_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"typicalInternshipsInternshipDiary.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Path INVALID_INTERNSHIP_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"invalidInternshipInternshipDiary.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Path DUPLICATE_INTERNSHIP_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"duplicateInternshipInternshipDiary.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_typicalInternshipsFile_success() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonSerializableInternshipDiary dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_INTERNSHIPS_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            JsonSerializableInternshipDiary.class).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary internshipDiaryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiary typicalInternshipsInternshipDiary \u003d TypicalInternshipApplications.getTypicalInternshipDiary();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(internshipDiaryFromFile, typicalInternshipsInternshipDiary);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_invalidInternshipFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonSerializableInternshipDiary dataFromFile \u003d JsonUtil.readJsonFile(INVALID_INTERNSHIP_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            JsonSerializableInternshipDiary.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_duplicateInternships_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonSerializableInternshipDiary dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_INTERNSHIP_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            JsonSerializableInternshipDiary.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableInternshipDiary.MESSAGE_DUPLICATE_INTERNSHIP,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 3,
      "wxwxwxwx9": 2,
      "gerhean": 47
    }
  },
  {
    "path": "src/test/java/seedu/diary/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        userPrefs.setInternshipDiaryFilePath(Paths.get(\"internshipdiary.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/diary/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonInternshipDiaryStorage internshipDiaryStorage \u003d new JsonInternshipDiaryStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        storageManager \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void internshipDiaryReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "         * {@link JsonInternshipDiaryStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInternshipDiaryStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiary original \u003d getTypicalInternshipDiary();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        storageManager.saveInternshipDiary(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ReadOnlyInternshipDiary retrieved \u003d storageManager.readInternshipDiary().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(original, new InternshipDiary(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotNull(storageManager.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 17,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/EditInternshipDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.EditCommand.EditInternshipDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Company;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A utility class to help with building EditInternshipDescriptor objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class EditInternshipDescriptorBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private EditCommand.EditInternshipDescriptor descriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditCommand.EditInternshipDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder(EditCommand.EditInternshipDescriptor descriptor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.descriptor \u003d new EditInternshipDescriptor(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns an {@code EditInternshipDescriptor} with fields containing {@code internshipApplication}\u0027s details"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditCommand.EditInternshipDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setCompany(internshipApplication.getCompany());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setRole(internshipApplication.getRole());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setPhone(internshipApplication.getPhone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setEmail(internshipApplication.getEmail());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setAddress(internshipApplication.getAddress());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setDate(internshipApplication.getApplicationDate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setPriority(internshipApplication.getPriority());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setStatus(internshipApplication.getStatus());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        descriptor.setIsGhostedOrRejected(internshipApplication.getIsGhostedOrRejected());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        descriptor.setLastStage(internshipApplication.getLastStage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Company} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setCompany(new Company(company));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Role} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withRole(String role) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setRole(new Role(role));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Email} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code ApplicationDate} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withApplicationDate(String date) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            descriptor.setDate(new ApplicationDate(LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd MM yyyy\"))));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setPriority(new Priority(priority));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Status} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setStatus(Status.valueOf(status));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Address} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditCommand.EditInternshipDescriptor build() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 93,
      "FeliciaTay": 2,
      "wxwxwxwx9": 11,
      "gerhean": 16,
      "ongch00": 1
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/EditInterviewDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A utility class to help build EditInterviewDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class EditInterviewDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InterviewEditCommand.EditInterviewDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new InterviewEditCommand.EditInterviewDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder(InterviewEditCommand.EditInterviewDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.descriptor \u003d new InterviewEditCommand.EditInterviewDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns an {@code EditInterviewDescriptor} with fields containing {@code interview}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder(Interview interview) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new InterviewEditCommand.EditInterviewDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setAddress(interview.getInterviewAddress());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setDate(interview.getDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setOnline(interview.getIsOnline());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code ApplicationDate} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder withInterviewDate(String date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            descriptor.setDate(new ApplicationDate(LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd MM yyyy\"))));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Overloaded interviewDate setter that uses a LocalDate instead of a String."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder withInterviewDate(LocalDate date) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            descriptor.setDate(new ApplicationDate(date));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code Address} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code Address} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder withIsOnline(String isOnline) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setOnline(Boolean.parseBoolean(isOnline));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewEditCommand.EditInterviewDescriptor build() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 76,
      "gerhean": 5
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/InternshipApplicationBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Company;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Role;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A utility class to help with building Internship Application objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class InternshipApplicationBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String DEFAULT_COMPANY \u003d \"Google\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String DEFAULT_ROLE \u003d \"Product Manager\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"1600 Amphitheatre Parkway\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"99999999\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"richardma@gmail.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DEFAULT_APPLICATION_DATE \u003d \"12 03 2020\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Integer DEFAULT_PRIORITY \u003d 10;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Status DEFAULT_STATUS \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final Boolean DEFAULT_IS_GHOSTED_OR_REJECTED \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final Status DEFAULT_LAST_STAGE \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Company company;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private ApplicationDate applicationDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Boolean isGhostedOrRejected;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Status lastStage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private List\u003cInterview\u003e interviews;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        company \u003d new Company(DEFAULT_COMPANY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        role \u003d new Role(DEFAULT_ROLE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            applicationDate \u003d new ApplicationDate(LocalDate.parse(DEFAULT_APPLICATION_DATE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd MM yyyy\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        status \u003d DEFAULT_STATUS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        isGhostedOrRejected \u003d DEFAULT_IS_GHOSTED_OR_REJECTED;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        lastStage \u003d DEFAULT_LAST_STAGE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //default interviews is nil"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Initializes the InternshipApplicationBuilder with the data of {@code toCopy}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder(InternshipApplication toCopy) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        company \u003d toCopy.getCompany();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        role \u003d toCopy.getRole();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        address \u003d toCopy.getAddress();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        phone \u003d toCopy.getPhone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        email \u003d toCopy.getEmail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        applicationDate \u003d toCopy.getApplicationDate();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        priority \u003d toCopy.getPriority();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        status \u003d toCopy.getStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        isGhostedOrRejected \u003d toCopy.getIsGhostedOrRejected();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        lastStage \u003d toCopy.getLastStage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews \u003d toCopy.getInterviews();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Company} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.company \u003d new Company(company);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Role} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withRole(String role) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.role \u003d new Role(role);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Address} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Phone} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Email} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Priority} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withPriority(Integer priority) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Overloaded withPriority method to set priority from String."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InternshipApplicationBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return withPriority(Integer.parseInt(priority));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code ApplicationDate} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public InternshipApplicationBuilder withApplicationDate(ApplicationDate applicationDate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.applicationDate \u003d applicationDate;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Overloaded withApplicationDate method to set date from String."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InternshipApplicationBuilder withApplicationDate(String applicationDate) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            this.applicationDate \u003d new ApplicationDate(LocalDate.parse(applicationDate, DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \"dd MM yyyy\")));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            System.err.println(\"error in parsing date\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns the {@code ApplicationDate} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public ApplicationDate getApplicationDate() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return applicationDate;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Status} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withStatus(Status status) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Overloaded withStatus method to set status from String."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InternshipApplicationBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return withStatus(Status.valueOf(status));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Sets the {@code lastStage} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public InternshipApplicationBuilder withLastStage(Status lastStage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.lastStage \u003d lastStage;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Overloaded withStatus method to set lastStage from String."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public InternshipApplicationBuilder withLastStage(String lastStage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return withLastStage(Status.valueOf(lastStage));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Adds an Interview object into the array list of interviews."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InternshipApplicationBuilder withInterview(Interview interview) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviews.add(interview);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns the {@code interviews} of the {@code InternshipApplication} we are building."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @return list of interviews"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public List\u003cInterview\u003e getInterview() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return interviews;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Builds an internship application with specified fields."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @return InternshipApplication built."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplication build() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplication(company, role, address, phone, email,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            applicationDate, priority, status);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplication \u003d internshipApplication.setLastStage(lastStage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return internshipApplication;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Builds the Internship Application object with interviews."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InternshipApplication buildWithInterviews() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new InternshipApplication(company, role, address, phone, email, applicationDate, priority, status);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (Interview interview : interviews) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            internshipApplication.addInterview(interview);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return internshipApplication;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns the earliest interview from today in the list of interviews of the application."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @param todayDate The current date today."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @return an Optional of LocalDate. Will return empty if there are no interviews after today\u0027s date."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public Optional\u003cInterview\u003e getEarliestInterview(LocalDate todayDate) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (interviews.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview earliestInterview \u003d interviews.get(0);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        for (Interview currentInterview : interviews) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            LocalDate earliestDate \u003d earliestInterview.getInterviewDate();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            LocalDate currentDate \u003d currentInterview.getInterviewDate();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            if ((currentDate.compareTo(earliestDate) \u003c\u003d 0 || earliestDate.compareTo(todayDate) \u003c 0)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u0026\u0026 currentDate.compareTo(todayDate) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                earliestInterview \u003d currentInterview;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return earliestInterview.getInterviewDate().compareTo(todayDate) \u003e\u003d 0"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            ? Optional.of(earliestInterview) : Optional.empty();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 57,
      "FeliciaTay": 70,
      "wxwxwxwx9": 114,
      "gerhean": 17,
      "ongch00": 6
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/InternshipApplicationUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A utility class for Internship Application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InternshipApplicationUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns an add command string for adding the {@code InternshipApplication}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getAddCommand(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getInternshipApplicationDetails(internshipApplication);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns the part of command string for the given {@code InternshipApplication}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getInternshipApplicationDetails(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_COMPANY + internshipApplication.getCompany().fullCompany + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_ROLE + internshipApplication.getRole().fullRole + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_ADDRESS + internshipApplication.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_PHONE + internshipApplication.getPhone().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_EMAIL + internshipApplication.getEmail().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        sb.append(PREFIX_DATE + dateFormat"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .format(internshipApplication.getApplicationDate().fullApplicationDate) + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_PRIORITY + internshipApplication.getPriority().toString() + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_STATUS + internshipApplication.getStatus().name() + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns the part of command string for the given {@code EditInternshipDescriptor}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getEditInternshipApplicationDescriptorDetails("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor descriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getCompany().ifPresent(company -\u003e sb.append(PREFIX_COMPANY).append(company.fullCompany).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getRole().ifPresent(role -\u003e sb.append(PREFIX_ROLE).append(role.fullRole).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            .append(dateFormat.format(date.fullApplicationDate)).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getPriority()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .ifPresent(priority -\u003e sb.append(PREFIX_PRIORITY).append(priority.toString()).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getStatus().ifPresent(status -\u003e sb.append(PREFIX_STATUS).append(status.name()).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Modifies an internship application to be archived."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static InternshipApplication createArchivedInternshipApplication("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication archivedInternship \u003d new InternshipApplication("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getCompany(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getRole(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getAddress(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getPhone(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getEmail(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getApplicationDate(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getPriority(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getStatus(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            true, new ArrayList\u003c\u003e()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(archivedInternship.isArchived());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return archivedInternship;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Modifies an internship application to be unarchived."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static InternshipApplication createUnarchivedInternshipApplication("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication archivedInternship \u003d new InternshipApplication("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getCompany(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getRole(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getAddress(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getPhone(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getEmail(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getApplicationDate(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getPriority(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            internshipApplication.getStatus(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            false, new ArrayList\u003c\u003e()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(archivedInternship.isArchived());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return archivedInternship;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 49,
      "FeliciaTay": 2,
      "wxwxwxwx9": 41,
      "gerhean": 12,
      "ongch00": 7
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/InternshipDiaryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A utility class to help with building InternshipDiary objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * {@code InternshipDiary diary \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * new InternshipDiaryBuilder().withInternshipApplication(new InternshipApplication(\"Google\", ...)).build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class InternshipDiaryBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private InternshipDiary internshipDiary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipDiaryBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipDiaryBuilder(InternshipDiary internshipDiary) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.internshipDiary \u003d internshipDiary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Adds a new {@code InternshipApplication} to the {@code InternshipDiary} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipDiaryBuilder withInternshipApplication(InternshipApplication application) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.loadInternshipApplication(application);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipDiary build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return internshipDiary;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 32,
      "gerhean": 3
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/InterviewBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A utility class to help build a list of Interview objects"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final boolean IS_NOT_ONLINE \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DEFAULT_ADDRESS_1 \u003d \"66 Big Avenue, Unit 10-350\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DEFAULT_DATE_1 \u003d \"12 03 2020\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private boolean isOnline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Address interviewAddress;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private ApplicationDate interviewDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.isOnline \u003d IS_NOT_ONLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewAddress \u003d new Address(DEFAULT_ADDRESS_1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d new ApplicationDate(DEFAULT_DATE_1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder(Interview toCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.isOnline \u003d toCopy.getIsOnline();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d new ApplicationDate(toCopy.getInterviewDate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewAddress \u003d toCopy.getInterviewAddress();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code isOnline} based on a boolean."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder withIsOnline(boolean isOnline) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.isOnline \u003d isOnline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets isOnline based on a String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder withIsOnline(String isOnline) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return withIsOnline(Boolean.parseBoolean(isOnline));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code interviewAddress} based on a String."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code interviewDate} based on a String."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder withDate(String date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d new ApplicationDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Overloaded method to set date from {@code LocalDate}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder withDate(LocalDate date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d new ApplicationDate(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Interview build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return Interview.createInterview(isOnline, interviewDate, interviewAddress);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 73,
      "gerhean": 4
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/InterviewUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A utility class for Interviews."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns an add command string for adding the {@code interview}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getAddCommand(Interview interview) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return InterviewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + getInterviewDetails(interview);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns the part of command string for the given {@code Interview}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getInterviewDetails(Interview interview) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_ADDRESS + interview.getInterviewAddress().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_DATE + dateFormat"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .format(interview.getInterviewDate()) + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_IS_ONLINE + String.valueOf(interview.getIsOnline()) + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the part of command string for the given {@code EditInterviewDescriptor}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getEditInterviewApplicationDescriptorDetails("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand.EditInterviewDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getInterviewDate().ifPresent(date -\u003e sb.append(PREFIX_DATE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .append(dateFormat.format(date.fullApplicationDate)).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getIsOnline()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .ifPresent(isOnline -\u003e sb.append(PREFIX_IS_ONLINE).append(isOnline.toString()).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 46,
      "FeliciaTay": 1,
      "gerhean": 8
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/PredicateUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A utility class to help create predicates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class PredicateUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses {@code userInput} into a {@code CompanyContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static CompanyContainsKeywordsPredicate prepareCompanyPredicate(String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CompanyContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses {@code userInput} into a {@code RoleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static RoleContainsKeywordsPredicate prepareRolePredicate(String userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new RoleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses {@code userInput} into a {@code AddressContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static AddressContainsKeywordsPredicate prepareAddressPredicate(String userInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new AddressContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses {@code userInput} into a {@code PhoneContainsNumbersPredicate}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static PhoneContainsNumbersPredicate preparePhonePredicate(String userInput) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new PhoneContainsNumbersPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses {@code userInput} into a {@code EmailContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static EmailContainsKeywordsPredicate prepareEmailPredicate(String userInput) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new EmailContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses {@code userInput} into a {@code PriorityContainsNumbersPredicate}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static PriorityContainsNumbersPredicate preparePriorityPredicate(String userInput) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new PriorityContainsNumbersPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses {@code userInput} into a {@code StatusContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static StatusContainsKeywordsPredicate prepareStatusPredicate(String userInput) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new StatusContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 59,
      "gerhean": 8
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 2,
      "gerhean": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns the middle index of the internship application in the {@code model}\u0027s internship application list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return Index.fromOneBased(model.getFilteredInternshipApplicationList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns the last index of the internship application in the {@code model}\u0027s internship application list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return Index.fromOneBased(model.getFilteredInternshipApplicationList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns the internship application in the {@code model}\u0027s internship application list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static InternshipApplication getInternshipApplication(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return model.getFilteredInternshipApplicationList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 7,
      "gerhean": 4,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Index INDEX_FIRST_INTERNSHIP_APPLICATION \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Index INDEX_SECOND_INTERNSHIP_APPLICATION \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Index INDEX_THIRD_INTERNSHIP_APPLICATION \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final List\u003cIndex\u003e INDEX_LIST_FIRST_INTERNSHIP_APPLICATION \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            Arrays.asList(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_SECOND_INTERNSHIP_APPLICATION)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final List\u003cIndex\u003e INDEX_LIST_SECOND_INTERNSHIP_APPLICATION \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            Arrays.asList(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_THIRD_INTERNSHIP_APPLICATION)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Index INDEX_FIRST_INTERVIEW \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Index INDEX_SECOND_INTERVIEW \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Index INDEX_THIRD_INTERVIEW \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 4,
      "wxwxwxwx9": 17,
      "gerhean": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/TypicalInternshipApplications.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_LAST_STAGE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_LAST_STAGE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PRIORITY_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ROLE_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.NUS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.TypicalInterviews.ONLINE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.InternshipDiary;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.status.Status;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A utility class containing a list of {@code InternshipApplication} objects to be used in tests."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class TypicalInternshipApplications {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final InternshipApplication GOOGLE \u003d new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withRole(\"Software Engineer\").withAddress(\"1600 Amphitheatre Parkway\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withPhone(\"94351253\").withEmail(\"larry@google.com\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withStatus(Status.APPLIED)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        .withApplicationDate(new ApplicationDate(LocalDate.of(2020, 3, 23)))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withPriority(10)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        .withLastStage(Status.WISHLIST)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final InternshipApplication FACEBOOK \u003d new InternshipApplicationBuilder().withCompany(\"Facebook\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withRole(\"Product Management\").withAddress(\"1 Hacker Way, Menlo Park\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withPhone(\"99751354\").withEmail(\"mark@google.com\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        .withStatus(Status.INTERVIEW)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        .withApplicationDate(new ApplicationDate(LocalDate.of(2020, 3, 25)))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .withPriority(8)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        .withLastStage(Status.APPLIED)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InternshipApplication GOOGLE_WITH_INTERVIEW \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withCompany(\"Google\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withRole(\"Software Engineer\").withAddress(\"1600 Amphitheatre Parkway\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withPhone(\"94351253\").withEmail(\"larry@google.com\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withStatus(Status.APPLIED)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withApplicationDate(new ApplicationDate(LocalDate.of(2019, 12, 1)))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withPriority(10)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withInterview(new InterviewBuilder().build())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withInterview(new InterviewBuilder(NUS).build())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .buildWithInterviews();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InternshipApplication FACEBOOK_WITH_INTERVIEW \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withCompany(\"Facebook\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withRole(\"Product Management\").withAddress(\"1 Hacker Way, Menlo Park\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withPhone(\"99751354\").withEmail(\"mark@google.com\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withStatus(Status.REJECTED)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withApplicationDate(new ApplicationDate(LocalDate.of(2009, 11, 11)))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withPriority(8)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withInterview(new InterviewBuilder().build()).withInterview(new InterviewBuilder(ONLINE).build())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .buildWithInterviews();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    // Manually added - Internship\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InternshipApplication AMY \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withCompany(VALID_COMPANY_AMY).withPhone(VALID_PHONE_AMY).withRole(VALID_ROLE_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withApplicationDate(VALID_DATE_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        .withPriority(VALID_PRIORITY_AMY).withStatus(VALID_STATUS_AMY).withLastStage(VALID_LAST_STAGE_AMY)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InternshipApplication BOB \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withCompany(VALID_COMPANY_BOB).withPhone(VALID_PHONE_BOB).withRole(VALID_ROLE_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withApplicationDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        .withPriority(VALID_PRIORITY_BOB).withStatus(VALID_STATUS_BOB).withLastStage(VALID_LAST_STAGE_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private TypicalInternshipApplications() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns an {@code InternshipDiary} with all the typical internship applications."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static InternshipDiary getTypicalInternshipDiary() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary diary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (InternshipApplication application : getTypicalInternshipApplications()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            diary.loadInternshipApplication(application);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return diary;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns an {@code InternshipDiary} with all the typical internship applications including interviews."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static InternshipDiary getTypicalInternshipDiaryWithInterviews() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipDiary diary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (InternshipApplication application : getTypicalInternshipApplicationsWithInterviews()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            diary.loadInternshipApplication(application);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return diary;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static List\u003cInternshipApplication\u003e getTypicalInternshipApplications() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GOOGLE, FACEBOOK));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static List\u003cInternshipApplication\u003e getTypicalInternshipApplicationsWithInterviews() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GOOGLE_WITH_INTERVIEW, FACEBOOK_WITH_INTERVIEW));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 51,
      "FeliciaTay": 7,
      "wxwxwxwx9": 34,
      "gerhean": 28
    }
  },
  {
    "path": "src/test/java/seedu/diary/testutil/TypicalInterviews.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_NUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_ONLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_NUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_ONLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_IS_ONLINE_NUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.logic.commands.CommandTestUtil.VALID_IS_ONLINE_ONLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A utility class consisting of a list of {@code Interview} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class TypicalInterviews {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Interview CENTRAL_LIBRARY \u003d new InterviewBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withAddress(\"215 Bras Basah\").withDate(\"05 05 2020\").withIsOnline(false).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Interview ORCHARD_TOWER \u003d new InterviewBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withAddress(\"Orchard Towers 12-555\").withDate(\"20 10 2020\").withIsOnline(false).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Interview NUS \u003d new InterviewBuilder().withAddress(VALID_ADDRESS_NUS)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withDate(VALID_DATE_NUS).withIsOnline(VALID_IS_ONLINE_NUS).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Interview ONLINE \u003d new InterviewBuilder().withAddress(VALID_ADDRESS_ONLINE)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        .withDate(VALID_DATE_ONLINE).withIsOnline(VALID_IS_ONLINE_ONLINE).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 18,
      "gerhean": 8
    }
  },
  {
    "path": "src/test/java/seedu/diary/ui/EnteredCommandsHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Contains unit tests for {@code EnteredCommandsHistory}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class EnteredCommandsHistoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void size_noSize_sizeCappedAt20() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.size(), 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        for (int i \u003d 0; i \u003c 19; i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.size(), 19);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.size(), 20);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.size(), 20);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void constructor_hasSize_sizeCapped() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        int maxSize \u003d 10;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory(maxSize);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.size(), 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        for (int i \u003d 0; i \u003c maxSize - 1; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.size(), maxSize - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.size(), maxSize);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.size(), maxSize);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void iterateNext_noNextHistory_returnNull() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(commandsHistory.iterateNext());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.iterateNext();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(commandsHistory.iterateNext());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void iteratePrevious_noPreviousHistory_returnNullAndEmptyString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(commandsHistory.iteratePrevious());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.iterateNext();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.iteratePrevious();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.iteratePrevious(), \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void iterate_resetIterator_sameOrder() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"c\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"b\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.iterateNext(), \"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.iterateNext(), \"b\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.iterateNext(), \"c\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.iterateNext(), \"d\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.iteratePrevious(), \"c\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.iteratePrevious(), \"b\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.resetIterator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(commandsHistory.iterateNext(), \"a\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void resetIterator_iteratorNotNull_iteratePreviousNull() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.iterateNext();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.resetIterator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(commandsHistory.iteratePrevious());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void add_iteratorNotNull_resetIterator() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.iterateNext();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.add(\"a\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        commandsHistory.iterateNext();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotNull(commandsHistory.iterateNext());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNull(commandsHistory.iterateNext());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 98
    }
  },
  {
    "path": "src/test/java/seedu/diary/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/diary/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.diary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.diary.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.diary.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 4,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import seedu.diary.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003cfx:root type\u003d\"seedu.diary.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 5
    }
  }
]
