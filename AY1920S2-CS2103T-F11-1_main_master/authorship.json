[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d Calgo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103T-F11-1/main[image:https://api.travis-ci.org/AY1920S2-CS2103T-F11-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Can you remember what you had 2 days ago, for lunch? How about last week? +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "You already know how important a consistent diet is in shaping your fitness."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "In spite of its importance, not everybody is tracking their meals. Why?"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "It is just too inconvenient and time-taking. You already have so many things to do and keeping track of what you"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "eat simply could not fit into your schedule. But, now it can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Introducing *Calgo*, your personal meal-tracking assistant:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* Change the way you approach fitness: Calgo offers an all-in-one calorie tracker that is easy-to-use and guaranteed to save you from the frustrations of meal tracking. Bye bye complexity!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* Calgo\u0027s comprehensive reports also transform the way you approach your daily meals through intelligent suggestions on how to improve your meal consumption patterns."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* A lot of careful thought has been put in when designing Calgo to ensure that you have a smooth experience and won\u0027t end up spending too much time in learning how it works. Save that time for other important stuff."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* To evolve with the times and help you calculate your calories in a fraction of a second, Calgo is fully digital. It is a gift of convenience to you, packaged as a beautiful desktop application. I mean just look at our User Interface above. As the saying goes, pictures speak a thousand words but pictures of your consumption data saves you thousands of excess calories!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* Excited and want to know how to start making calories go? Download Calgo now from our latest GitHub release!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* If you need help in setting up and learning about Calgo\u0027s features, check out our \u003c\u003cUserGuide#, User Guide\u003e\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* If you are a developer wanting to contribute and learn how Calgo works, check out our \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* To learn about the team working to make your Calgo experience effortless, read \u003c\u003cAboutUs#, About Us\u003e\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* If you need anything else, \u003c\u003cContactUs#, Contact Us\u003e\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* Calgo is adapted from the AddressBook-Level3 project created by the https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 20,
      "eugenetyc": 3,
      "-": 20
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "mainClassName \u003d \u0027life.calgo.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    archiveName \u003d \u0027calgo_v1.4.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            \u0027site-name\u0027: \u0027Calgo\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F11-1/main\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 4,
      "jeremylow97": 1,
      "-": 151
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.name \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "git config user.fat \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 1,
      "-": 41
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Calgo was developed by the http://github.com/AY1920S2-CS2103T-F11-1[CS2103T F11-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "We are a student team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d Project Team: F11-1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Vineeth Buddha"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::buddhavineeth.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "{empty}[https://github.com/buddhavineeth[github]] [\u003c\u003cbuddhavineeth#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Role: Software Developer \u0026 Git Expert +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Responsibilities: Data Analysis \u0026 Insights Report, Deliverables \u0026 Deadlines In-Charge"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Eugene Tan Yew Chin"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::eugenetyc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "{empty}[https://github.com/eugenetyc[github]] [\u003c\u003ceugenetyc#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Responsibilities: Data Search \u0026 Storage, Team Lead"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Cai Rui Cong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::ray-97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "{empty}[https://github.com/ray-97[github]] [\u003c\u003cray-97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Responsibilities: Data Collection \u0026 Organisation, Code Integration"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Low Zhang Xian"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::jeremylow97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "{empty}[https://github.com/jeremylow97[github]] [\u003c\u003cjeremylow97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Responsibilities: Object Modelling, Architecture \u0026 Code Quality"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Janice Ong Yi Wen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::j-dan23.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "{empty}[https://github.com/J-Dan23[github]] [\u003c\u003cj-dan23#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Role: Software Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Responsibilities: User Experience, Graphical Interface \u0026 Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 28,
      "-": 28
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103T-F11-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Contributing* : This is a closed project and contributions can only be made by approved software developers."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Email us* : For any queries or contribution requests, please reach us via `rc97 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 3,
      "-": 4
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/protein/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 1,
      "-": 47
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d Calgo - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "By: `Team F11-1`      Since: `March 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*Table of Contents*:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d About this guide"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "This Developer Guide is a document to guide future software developers of the Calgo App by providing a sufficient and comprehensible overview of the project. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "While we aim to provide a reasonable amount of depth, do keep in mind that the goal of this document is not to serve as a replacement for reading the actual code. +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Welcome on-board the Software Development Team for Calgo! Together, we will inspire a healthier lifestyle!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "the link:{repoURL}/tree/master/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The *_Architecture Diagram_* given above describes the high-level design of the Calgo Application. From now on, all"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "instances of Calgo Application will be referred to as App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The `Main` component comprises of two classes called link:{repoURL}/blob/master/src/main/java/life/calgo/Main.java[`Main`] and"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/life/calgo/MainApp.java[`MainApp`]."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "This component is responsible for:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* Launching App: Initializes the other components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* Exiting App: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "In particular, the `LogsCenter` class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* `LogsCenter` : Writes log messages to the App\u0027s log file, for various classes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The rest of the App comprises of four components."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The User Interface (UI)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: The in-memory representation of the App data."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: The file manager for reading from and writing to the hard disk."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Each of the four components:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* Defines its _Application Programming Interface (API)_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete n/Apple`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ".Component interactions for `delete n/Apple` command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*API* : link:{repoURL}/tree/master/src/main/java/life/calgo/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `FoodListPanel`, `DailyListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/blob/master/src/main/java/life/calgo/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/blob/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The `UI` component:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ". Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ". Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/life/calgo/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".  `Logic` uses the `CalgoParser` class to parse the user command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a food)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete n/Apple\")` API call."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ".Interactions Inside the Logic Component for the `delete n/Apple` Command"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` and `DeleteCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[[Model-Component]]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/life/calgo/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ". `Model` stores user\u0027s preferences in a `UserPref` object."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". `Model` also stores Food Record and Consumption Record data."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". This component exposes both `ObservableList\u003cFood\u003e` and `ObservableList\u003cDisplayFood\u003e`. The data stored in"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "these two list objects is reflected in UI. Therefore, any changes made to the data in these lists are shown in the UI in"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "real-time."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ". To update the `Model` (and hence reflect the changes in the UI), `Food` attributes need to satisfy certain `Predicates`, which represent these changes."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ". This component does not depend on any of the other three components."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ray-97"
        },
        "content": "To make `Model` follow the Object-Oriented Paradigm (OOP) more closely,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "we can store a `Tag` list in `Food Record`, which `Food` objects can reference."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "This would allow `Food Record` to only require one `Tag` object per unique `Tag`,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "instead of each `Food` needing their own `Tag` object."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "An example of how such a model may look like is given in the below diagram. +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "image::BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "// tag::storagecomponent[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/life/calgo/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The `Storage` component allows us to save `FoodRecord`, `UserPref`, `Goal`, and `ConsumptionRecord`  data in json format onto the disk, and read them back later on during the next session."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "This would facilitate the following functions:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ". Load past user App data and preferences."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ". Generate and save insights reports based on previously and currently recorded user consumption."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ". Generate and save a user-friendly version of the accumulated `FoodRecord`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "// end::storagecomponent[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Classes used by multiple components are in the `life.calgo.commons` package."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "//tag::reportCommandDG[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[Implementation-InsightsReport]]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d Generating consumption statistics and insights report +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "(by Vineeth)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "This feature allows a user to automatically generate a report that contains statistics and personalised insights based on"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "his or her food consumption pattern on a given date. Do note that the generated report is a .txt file."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The user can invoke this functionality by entering the `report` command, which follows the following format: `report d/DATE`. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "This section explains: +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* how the `report` command works and the crucial method it invokes during execution (In the Implementation subsection)."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* the various aspects that were deliberated over when coming up with the design of the statistics and insights report feature (In the Design Considerations subsection)."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* a summary that shows a simplified Activity Diagram that captures the essential logic in the execution of the  `report` command (In the Summary subsection)."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Before moving on to learn how the feature works, if you want to see what the report includes, you can refer to our \u003c\u003cUserGuide#, User Guide\u003e\u003e."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The specified feature is facilitated by a `ReportGenerator` object. If you are interested in how `ReportGenerator` fits into the architecture of Calgo,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "refer to this \u003c\u003cDesign-Storage, section\u003e\u003e."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "To learn how the `report` command works, the most important method that you need to know is the `generateReport()` method from the `ReportGenerator` class."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Refer to the sequence diagram below to understand the top-level execution of the `generateReport()` operation after the user enters a valid `report` command."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".Sequence Diagram for `report` command: generating 2020-03-27_report.txt"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::ReportFeatureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The lifelines for the `ReportCommandParser` object, `ReportCommand` object, `ReportGenerator` object should end at their destroy markers (X) but due to a limitation of PlantUML, the lifelines reach the end of diagram."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "From the above diagram, creating a report for the consumption patterns on 27th of March 2020 involves the following steps:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 1: User inputs `report d/2020-03-27` to generate the insights report based on food consumption of the abovementioned date. +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 2: This input is saved as a `String` and passed into the `LogicManager`. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 3: The `String` input is parsed by `CalgoParser`, which removes the \"d/\" `Prefix` and sends"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ray-97"
        },
        "content": "the date input to `ReportCommandParser`. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 4: Once the `ReportCommandParser` checks that the given date is valid, it creates a `ReportCommand` object and"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ray-97"
        },
        "content": "returns it to `LogicManager`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 5: `LogicManager` then executes the `ReportCommand`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 6: From `Model`, `ReportCommand` retrieves the required objects to construct an instance of `ReportGenerator`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 7: With the relevant objects retrieved from Steps 6, `ReportCommand` constructs a"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ray-97"
        },
        "content": "`ReportGenerator` object."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 8: Using the `ReportGenerator` object, `ReportCommand` invokes the *crucial* method `generateInsights()`, which prints"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "neatly organised sections of analysed data based on the `DailyFoodLog` of the input date. For the section that gives insights related to"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "the user\u0027s favourite `Food`, the past seven days of `DailyFoodLog` objects are analysed."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 9: This newly generated report is saved in the `data/reports` folder. If the report is successfully generated,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ray-97"
        },
        "content": "the `CommandResult` is true. Otherwise, it is false. This `CommandResult` object is finally returned to `LogicManager`,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "to signify the end of the command and GUI shows a result message to the user."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Many of the design considerations made for `report` command are similar to that of the `export` command. You can check"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "out the similar design considerations over \u003c\u003cDesign-Export, here\u003e\u003e."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "In addition to those design considerations, the following consideration is specific to the functionality of the `report` command."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How many days of past data should be used to analyse user\u0027s favourite `Food` for the suggestions section of the report."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* *Alternative 1 (current choice): Analyse past seven days of consumption data*"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Pros: This implementation is more efficient as it does not have to churn out all existing consumption data produced by the user so far."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Cons: The reliability of the suggestions may be impacted due to certain special events such as buffet celebrations, in which the user may consume"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "`Food` that he or she does not usually eat."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* *Alternative 2: Analyse all data*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Pros: The insights will be much more reliable and more tolerant of outlier data points."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Cons: The efficiency of the `report` command gets worse over time and may cause dissatisfaction to the user."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d Summary"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The following activity diagram summarizes what happens when user executes a `report d/DATE` command with a correctly formatted date: +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Activity Diagram for Report command"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::ReportActivityDiagram.png[]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "You can check out this code snippet to see how the `ReportCommand` object determines if there are no `Food` entries present"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "in the given date:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "----"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "// if there is no food consumed on the given date, do not execute command"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "if (!model.hasLogWithSameDate(queryDate) || model.getLogByDate(queryDate).getFoods().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "   throw new CommandException(MESSAGE_REPORT_FAILURE + \"\\n\" + String.format(NO_SUCH_DATE, queryDate))"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "----"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "//end::reportCommandDG[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "//tag::goalCommandDG[]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[Implementation-GoalFeature]]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d Setting daily calorie goals for motivation"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "(by Vineeth)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "This feature helps a user chunk his or her long term goal of developing a healthy lifestyle into smaller daily goals."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Psychologically, this helps to motivate them as the perceived difficulty of achieving the long term goal reduces."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The user can set a daily calorie goal with the `goal` command, which follows the following format: `goal GOAL`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "This section addresses how the `goal` command works."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "In addition to the `GoalCommandParser`, the `goal` command relies heavily on the `DailyGoal` class, which is part of the"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "`Model` component. Refer to the `Model` component diagram \u003c\u003cModel-Component, here\u003e\u003e."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "To address the issue where a user does not want to set up a daily calorie goal, Calgo places a `DUMMY_VALUE` of 0 calories,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "as shown in the code snippet below, from `DailyGoal` class. To cater to a wide range of users, it also has a broad range of acceptable"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "values, ranging from 1 to 99999. However, to guide users towards a healthy lifestyle, the App does display a warning"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "message whenever a user sets a goal below the `MINIMUM_HEALTHY_CALORIES`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "----"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Values used for GoalCommandParser when parsing user inputted goals."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int MINIMUM_HEALTHY_CALORIES \u003d 1200;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int MINIMUM_ACCEPTABLE_CALORIES \u003d 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int MAXIMUM_ACCEPTABLE_CALORIES \u003d 99999;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Default value, when user does not input a goal."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int DUMMY_VALUE \u003d 0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "----"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Refer to the sequence diagram below to understand how a `goal` command is executed."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".Sequence Diagram for `goal` command: updating daily calorie goal to 2000 calories."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "image::GoalSequenceDiagram.png[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The lifelines of the `GoalCommandParser` object, `GoalCommand` object and `DailyGoal` object should end at their destroy markers (X) but due to a limitation of PlantUML, the lifelines reach the end of diagram."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The following steps explain the sequence diagram: +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 1: User inputs `goal 2000` to update his or her goal to 2000 calories. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 2: This input is saved as a `String` and passed into the `LogicManager`. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 3: The `String` input is parsed by `CalgoParser`, which sends the `goal` value input to `GoalCommandParser`. +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 4: Once the `GoalCommandParser` checks that the given value is valid, it converts the input to an `Integer` and creates a `GoalCommand` object and"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "returns it to `LogicManager`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 5: `LogicManager` then executes the `GoalCommand`, which in turn invokes `updateDailyGoal` method of `Model`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Step 6: In `Model`, the `updateDailyGoal` method is a static method that generates a new `DailyGoal` object with the corresponding input. This `DailyGoal` object is returned to `Model`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ", which replaces the existing `DailyGoal` attribute of the `ModelManager` with the newly generated `DailyGoal` object."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Type of user input data that is required for goal command"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* **Alternative 1 (current choice):** Use a simple goal feature that accepts the user\u0027s inputted value."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Pros: +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "- The user is not daunted by the large amount of information he or she needs to provide to set a goal."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "- The user will not feel paranoid as Calgo does not ask for personal data such as height, weight, gender and age."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Cons: +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "- The goal may not be effective unless the user diligently checks online for a appropriate goal and then enters it into Calgo."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* **Alternative 2:** Use a scientific method to calculate the basal metabolic rate of the user."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Pros: +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "- The goal is very effective because it matches their body type."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Cons: +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "- A lot of data is required to be inputted by the user."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "- May cause users to avoid setting goals because of the large amount of personal data they need to store in Calgo."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "- User feeling uncomfortable about setting a goal will also affect effectiveness of `report` command."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d\u003d Summary"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "In essence, the `goal` command is a fun feature that is used to motivate the user and generate specific insights if the"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "user were to invoke the `report` command after setting a daily calorie goal."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Refer to the Activity Diagram below for a visual summary of the logic behind the execution of the `goal` command."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".Activity Diagram for `goal` command."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "image::GoalActivityDiagram.png[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "//end::goalCommandDG[]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "// tag::categoricalsubstringfindsearch[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[[Implementation-FindList]]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Searching for specific `Food` via categories and substrings"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "(by Eugene)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "This section addresses how the `find` and `list` commands work. As they are complementary in their functions during the search process, both `find` and `list` commands will be explained together here for better coherence."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The `find` command allows us to search through the `FoodRecord` (via categorical or substring search) based on what the user enters for the `Prefix`. Users may enter one and only one `Prefix`. The search results can then be displayed in the GUI\u0027s `Food Record`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Meanwhile, the `list` command allows us to reset the GUI\u0027s `Food Record` to once again show all entries in lexicographical order. This can be thought of as the reverse of a `find` command. However, unlike the `find` command, the `list` command does not use any `Prefix`, and ignores any input after its command word."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "`Prefix` here indicates which `Food` attribute we are interested in. Categorical search finds `Food` objects with values that match the user-specified value representing one of the nutritional categories (`Calorie`, `Protein`, `Carbohydrate`, or `Fat`). Meanwhile, substring search finds matches for the user-entered substring in any part of the the `Name` or in any of the `Tag` objects belonging to the `Food` objects."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "For more information on lexicographical ordering, please refer to its relevant section \u003c\u003cImplementation-LexicographicalOrder, here\u003e\u003e."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The above commands rely on the `FindCommand` and `ListCommand` objects respectively. Objects of both classes use a `Predicate\u003cFood\u003e` object to filter through the current `Food` objects, where `Food` objects will be displayed in the GUI\u0027s `Food Record` should they evaluate these predicates to be true."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "To search via a particular `Food` attribute, we use a `FindCommandParser` to create the corresponding `Predicate\u003cFood\u003e` based on which `Food` attribute the `Prefix` entered represents. This predicate is then used to construct a new `FindCommand` object, which changes the GUI display when executed. +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The class diagram below shows the relevant `Predicate\u003cFood\u003e` classes used in the construction of `FindCommand` objects."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ".Class Diagram showing the relevant predicates used in constructing `FindCommand` objects"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::FindListCommandPredicateClassDiagram.png[]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "As seen in the above class diagram, each `Predicate\u003cFood\u003e` is indeed representative of either `Name`, `Calorie`, `Protein`, `Carbohydrate`, `Fat`, or `Tag`. Moreover, it should be noted that each of these predicates test against a `Food` object, and therefore have a dependency on `Food`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The sequence diagram below demonstrates how the `find` command works, for both categorical and substring search:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ".Sequence Diagram for `find` command: Categorical Search and Substring Search"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::FindSequenceDiagram.png[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The lifeline for the both of the `FindCommandParser` objects, and both of the `FindCommand` objects should end at their destroy markers (X) but due to a limitation of PlantUML, the lifelines reach the end of diagram."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "From the above, it is clear that both categorical search and substring search of the `find` command have similar steps: +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Step 1: `LogicManager` executes the user input, using `CalgoParser` to realise this is a `find` command, and a new `FindCommandParser` object is then created. +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Step 2: The `FindCommandParser` object parses the user-entered arguments that come with the `Prefix`, creating a `Predicate\u003cFood\u003e` object based on which `Food` attribute the `Prefix` represents."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- In the above diagram examples, a `ProteinContainsKeywordsPredicate` object is created for the categorical search via `Protein` while a `NameContainsKeywordsPredicate` object is created for the substring search via `Name`. +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Step 3: This `Predicate\u003cFood\u003e` object is then used to construct a new `FindCommand` object, returned to `LogicManager`. +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Step 4: `LogicManager` calls the `execute` method of the `FindCommand` created, which filters for `Food` objects that evaluate the predicate previously created to be true. It then returns a new `CommandResult` object reflecting the status of the execution. These changes are eventually reflected in the GUI."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The `find` command therefore searches through the existing `FoodRecord` and then displays the relevant search results in the GUI\u0027s `Food Record`. To once again show all `Food` entries in the display, we use the `list` command."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "In constrast to `FindCommand`, the `ListCommand` constructor takes in no arguments and simply uses the predicate `Model.PREDICATE_SHOW_ALL_FOODS` to always show all `Food` entries in its `execute` method. This is described by the sequence diagram below:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ".Sequence Diagram for `list` command"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::ListSequenceDiagram.png[]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The lifeline for the `ListCommand` object should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "How the `list` command works:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Step 1: `LogicManager` executes the user input, using `CalgoParser` to realise this is a `list` command, and a new `ListCommand` object is created. +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Step 2: `LogicManager` then calls the `execute` method of this `ListCommand`, which uses `Model.PREDICATE_SHOW_ALL_FOODS` to evaluate to true for all `Food` objects in the `FoodRecord`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Step 3:  `LogicManager` then returns a new `CommandResult` object to reflect the status of the execution, in the GUI. The GUI\u0027s `Food Record` reflects the above changes to show all `Food` entries once again."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Predicate construction source."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* **Alternative 1 (current choice):** Each `Predicate\u003cFood\u003e` is constructed using a new object of type either `Name`, `Calorie`, `Protein`, `Carbohydrate`, `Fat`, `Tag`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Defensive programming by building new objects rather than relying on mutable sources."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Can reuse existing code and classes like ArgumentMultimap and their methods."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Models objects well to reflect the real-world."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- May be more resource-intensive than other alternatives."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- New developers may not find this intuitive."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* **Alternative 2:** Each `Predicate\u003cFood\u003e` is created using a `String` which represents the keywords."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Easier to implement with fewer existing dependencies."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Less resource-intensive."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- More prone to bugs."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Difficult to ascertain which `Food` attribute it actually represents."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- More difficult to debug as `String` type is easily modified."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Does not reflect good OOP practices"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Enabling substring search."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* **Alternative 1 (current choice):** Allow substring search for both `Name` and `Tag`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Improves user experience."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Can reuse common code as the approach for both `Name` and `Tag` are similar."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Generally easy to implement substring finding."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Can use regular expressions if needed, which are powerful and suitable for our purpose."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Requires good understanding of the original project."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Need to know the `String` type, regular expressions, and their implications."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Need to implement searching via multiple types of `Food` attributes and hence introduces more dependencies."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Need to implement a new `Parser` class to detect each relevant `Prefix`."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* **Alternative 2:** Only allow exact word matches for `Name` and `Tag`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Can simply reuse large parts of the original project\u0027s existing code."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Less prone to bugs."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Diminishes user experience."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- May not fully satisfy the user requirements."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Need to implement searching via multiple types of `Food` attributes and hence introduces more dependencies."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Need to implement a new `Parser` class to detect each relevant `Prefix`."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d Summary"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "In essence, this section focuses on searching which is implemented via `find` and `list` commands. +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The `find` command performs a categorical search if a value from a nutritional category (`Calorie`, `Protein`, `Carbohydrate`, `Fat`) is specified. Otherwise, a substring search is performed to find `Food` objects that contain the entered substring in their `Name` or in one of their `Tag` s. These rely on the `Predicate\u003cFood\u003e` object used in constructing the `FindCommand`, which depend on the `Prefix` entered by the user. +"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Meanwhile, the `list` command simply uses the predicate already defined in `Model` to display all `Food` objects. +"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The above can be summarised in the activity diagram below:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ".Activity Diagram for Searching"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::FindListCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "// end::categoricalsubstringfindsearch[]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ray-97"
        },
        "content": "// tag::lexicographicalordering[]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[Implementation-LexicographicalOrder]]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Lexicographical `Food` order"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ray-97"
        },
        "content": "(by Eugene)"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This section addresses how the GUI `Food Record` entries appear in lexicographical order, which is an effect of sorting `Food` objects in the `FoodRecord`."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Over time, users will eventually have many `Food` entries -- these should be sorted for a better experience. Intuitively, the lexicographical order is the most suitable here."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ray-97"
        },
        "content": "In essence, `Food` objects are sorted by the `UniqueFoodList` (which is inside `FoodRecord`)."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Sorting is performed each time `Food` object(s) are newly added to the `UniqueFoodList`, or during the initialisation of the `UniqueFoodList` upon App start-up."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ray-97"
        },
        "content": "There is no need to re-sort when a `Food` object is deleted or edited as the order is maintained."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ray-97"
        },
        "content": "For a better understanding of adding and editing `Food` objects using the `update` command, please refer to its relevant section \u003c\u003cImplementation-SmartUpdate, here\u003e\u003e."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Although the the `list` command changes the GUI `Food Record` display, it does not actually perform sorting. It simply resets the GUI `Food Record` to show all `Food` entries, and is usually used after a `find` command. You can read more about them \u003c\u003cImplementation-FindList, here\u003e\u003e."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The `UniqueFoodList` is able to sort `Food` objects because the `Food` class implements the `Comparable\u003cFood\u003e` interface."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This allows us to specify the lexicographical order for sorting `Food` objects via their `Name`, using the following compareTo method in the `Food` class:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ray-97"
        },
        "content": "----"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public int compareTo(Food other) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    String currentName \u003d this.getName().toString();"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    String otherName \u003d other.getName().toString();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    return currentName.compareTo(otherName);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ray-97"
        },
        "content": "----"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ray-97"
        },
        "content": "How the sorting process works:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* When the App starts up, a new `UniqueFoodList` is created from the source json file (if available) or otherwise the default entries, and the created `Food` objects are sorted as they are added to it."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Existing `Food` objects are therefore arranged in lexicographic order by `Name`."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Thereafter, `UniqueFoodList` sorts the `Food` objects whenever new `Food` objects are added."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ray-97"
        },
        "content": "It should be noted that sorting is only performed by the `addFood` and `setFoods` method of the `UniqueFoodList`, which calls the `sortInternalList` method. Not to be confused, the `setFood` method, which is used when a `Food` object is edited, does not perform any sorting. +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The sequence diagram below shows how the lexicographical ordering is performed when Calgo starts up:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Lexicographical Ordering Sequence Diagram for App Start-up"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::LexicographicalOrderingStartupSequenceDiagram.png[]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Based on the above diagram, when Calgo starts: +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 1: We initialise the `ModelManager` object. For this, we use previously stored user data if available (by reading in from the source json files). Otherwise, we use the default Calgo `Food` entries. +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 2: Before we can finish constructing a new `ModelManager` object, we require the creation of a new `FoodRecord` object which in turn requires the creation of a new `UniqueFoodList` object. +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 3: Once `UniqueFoodList` is constructed, we introduce the initialising data into it using the `setFoods` method. This calls the `sortInternalList` method, which sorts the newly added `Food` objects in the `ObservableList\u003cFood\u003e` contained in `UniqueFoodList`, according to the specified lexicographical order (defined in the `Food` class)."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Moving on, the sequence diagram below (which is a reference frame omitting irrelevant `update` command details) describes the lexicographical sorting process when `Food` objects are added (not edited) using the `update` command:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Lexicographical Ordering Sequence Diagram for Updating"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::LexicographicalOrderingUpdateSequenceDiagram.png[]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This is in a reference frame as it is reused in the `update` section \u003c\u003cImplementation-SmartUpdate, here\u003e\u003e)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Here, the diagram describes what happens after parsing the user input and creating an `UpdateCommand` object. Since the `Food` entered by the user is an entirely new `Food` object without a `Name`-equivalent `Food` existing in the `UniqueFoodList`:"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 1: We call the respective `addFood` and `add` methods as seen in the diagram, eventually adding the `Food` object into the `UniqueFoodList` and arriving at its `sortInternalList` method call. +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 2: The `sortInternalList` method then sorts the `Food` objects in the `ObservableList\u003cFood\u003e` contained in `UniqueFoodList`, according to the specified lexicographical order defined in the `Food` class."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ray-97"
        },
        "content": "During an `update` command, we do not perform sorting if the user enters a `Food` object that already has an existing counterpart with an equivalent `Name` in the `UniqueFoodList`."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Any re-ordering will eventually be reflected in the GUI, facilitated by the following (in the case of an `update` command) or otherwise something similar:"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ray-97"
        },
        "content": "----"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ray-97"
        },
        "content": "model.updateFilteredFoodRecord(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ray-97"
        },
        "content": "----"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Frequency of sorting operation."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 1 (current choice):** Sort whenever a new `Food` is added or during App start-up."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Guarantees correctness of sorting."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Saves on computational cost by not sorting during deletion or edits as the order is preserved."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Computational cost is not too expensive since the introduced `Food` objects usually come individually rather than as a collection (except during App start-up)."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Need to ensure implementations of various commands changing the `Model` are correct and do not interfere with the sorting process."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- May be computationally expensive if there are many unsorted `Food` objects at once, which is possible when Calgo starts up."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 2:** Sort only when calling the `list` command."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Easier to implement with fewer existing dependencies."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Uses less computational resources since sorting is only done when `list` command is called."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Diminishes user experience."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- May be incompatible with certain `Storage` functions."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- May lead to bugs in overall product due to incompatible features."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store `Food` objects."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 1 (current choice):** Use `UniqueFoodList` to store all `Food` objects."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Can reuse existing code, removing the need to maintain a separate list-like data structure."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Based on existing code, any changes to the `Model` from the sorting process are automatically reflected in the GUI. This is very useful for testing and debugging manually."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Many of the underlying `ObservableList` methods are built-in and cannot be edited. They are also difficult to understand for those unfamiliar. This can make development slightly trickier, especially in following certain software engineering principles."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 2:** Use a simpler data structure like an `ArrayList`."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- More troublesome as we require self-defined methods, abstracted over the existing ones. If not careful, these self-defined methods can possibly contain violations of certain software engineering principles, which may introduce regression in the future."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- May be inefficient in using resources."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d Summary"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The `UniqueFoodList` facilitates the lexicographical ordering of `Food` objects and hence how their respective entries appear in the GUI `Food Record`. This can be summarised in the activity diagram below:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Activity Diagram for Lexicographical Ordering"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::LexicographicalOrderingActivityDiagram.png[]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ray-97"
        },
        "content": "// end::lexicographicalordering[]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ray-97"
        },
        "content": "// tag::exportfoodrecord[]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[Implementation-Export]]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Exporting the current `FoodRecord` into a portable file"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ray-97"
        },
        "content": "(by Eugene)"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This section addresses how the `export` command works, creating a FoodRecord.txt file showing details of all the `Food` objects currently stored in the `FoodRecord`. The information is presently neatly in table form and the file is created in the `data/exports` folder."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The `export` command mainly uses an `ExportGenerator` object to generate the file. All formatting options and methods to write the contents of the file are included in the `ExportGenerator` class, which extends the `DocumentGenerator` class."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ray-97"
        },
        "content": "You may find the `report` command similar as they both create a new file for the user. You can read more about it \u003c\u003cImplementation-InsightsReport, here\u003e\u003e."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Most of the work in generating the file is done by the `generateExport` method of `ExportGenerator`. You can access the class to view its methods for writing the header and footer components, which are relatively easily to understand."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ray-97"
        },
        "content": "However, the methods for writing the file body is likely where some explaining is required. Here, the formatting of the table body is determined by the following:"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ray-97"
        },
        "content": "----"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final int NAME_COLUMN_SIZE \u003d 45;"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final int VALUE_COLUMN_SIZE \u003d 20;"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ray-97"
        },
        "content": "----"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ray-97"
        },
        "content": "`NAME_COLUMN_SIZE` represents the allowed space for the `Name`. If a `Food` object has a `Name` which is too long, the `Name` will be truncated and continued on the following lines."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Meanwhile, `VALUE_COLUMN_SIZE` represents the allowed space for each nutritional value of `Calorie`, `Protein`, `Carbohydrate`, and `Fat` in the table. These are guaranteed to be within a length of 5 characters when parsing, and should not exceed the given space."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The nutritional values will always be shown in the first line of their respective `Food` object after its (possibly truncated) `Name`. This is facilitated by the `printBody` method of `ExportGenerator`, which calls its `printBodyComponent` method and subsequently its `generateFinalisedEntryString` method, which performs the truncation and amendment of the `Name` as necessary."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Moving on, the sequence diagram below demonstrates how the `export` command works to create the user copy of the current `FoodRecord`:"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ".Sequence Diagram for `export` command: Generating FoodRecord.txt"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::ExportSequenceDiagram.png[]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The lifeline for the `ExportCommand` object and that of the `ExportGenerator` object should end at their destroy markers (X) but due to a limitation of PlantUML, the lifelines reach the end of diagram."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ray-97"
        },
        "content": "From the above, creating FoodRecord.txt involves the following steps:"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Step 1: `LogicManager` executes the user input, using `CalgoParser` to realise this is a `export` command, and a new `ExportCommand` object is created. +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 2: LogicManager then calls the `execute` method of this `ExportCommand` object. This results in a call to the `Model` to get the current `FoodRecord`, which is used to construct a new `ExportGenerator` object. The `ExportGenerator` is responsible for creating the FoodRecord.txt file and writing to it."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 3: `ExportCommand` then calls the `generateExport` method of `ExportGenerator`, writing the required parts to the file. This returns a boolean indicating whether the file creation and writing are successful."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Step 4: A new `CommandResult` object indicating the result of the execution is then constructed and reflected in the GUI."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[[Design-Export]]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Type of file to create."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 1 (current choice):** Create a .txt file to represent the `FoodRecord`."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "- Satisfies user requirements by allowing editing of the file to include custom entries."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Need to define new classes and methods for file writing, which may introduce more dependencies."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- May be more resource-intensive than other alternatives."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- New developers may be unfamiliar with `String` manipulation and regular expressions."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 2:** Create a .pdf file to represent the `FoodRecord`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- The contents appear to be more legitimate."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Can use external libraries for convenience."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- May be less resource-intensive."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- May not satisfy user requirements as the file cannot be edited easily."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- May introduce more bugs, additional dependencies, and become prone to external factors."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- More difficult to debug due to lack of familiarity with external libraries."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- May require more space."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Abstraction for `ExportGenerator` and `ReportGenerator`."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 1 (current choice):** Create `DocumentGenerator` abstract class which both `ExportGenerator` and `ReportGenerator` extends."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Good OOP practice, following its principles."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Allows for code reuse and neater code."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Able to apply concepts of polymorphism, if required."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- May be now easier to debug."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Need to define new class, possibly introducing more dependencies."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Need to identify what is common to both `ExportGenerator` and `ReportGenerator`."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 2:** Use an interface which both classes will implement."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Similar to Alternative 1."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Does not allow methods to be defined in the interface. (Some exceptions: default methods, etc)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- May need to repeat definitions which may be the same for both classes."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 3:** Do not use an interface or abstract class."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Requires less effort."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Does not introduce additional dependencies."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Unable to reap benefits of the above alternatives."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d\u003d Summary"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "In short, this section addresses how users are able to obtain an editable copy of the current `FoodRecord` using the `export` command."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The `export` command largely relies on the `ExportGenerator` class, which facilitates creating the file and writing to it."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The above can be summarised in the activity diagram below:"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Activity Diagram for Searching"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::ExportActivityDiagram.png[]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "// end::exportfoodrecord[]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[Implementation-ConsumptionManagement]]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d `Food` consumption management"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ray-97"
        },
        "content": "(by Ruicong)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This section addresses how `nom`, `vomit`, and `stomach` commands work. They are the 3 commands that you will use"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ray-97"
        },
        "content": "to interact with `ConsumptionRecord`. `nom` allows you to add `Food`, `vomit` allows you to remove `Food`, and `stomach`"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ray-97"
        },
        "content": "gives you a way to browse a list of `Food` within the `ConsumptionRecord` at a different date. `ConsumptionRecord` is an important"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ray-97"
        },
        "content": "component because it serves as a backend for features such as `goal`, `report` and `graph`."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ray-97"
        },
        "content": "//Link to other ppls components"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The high level idea of how `Food` consumption is managed is that `ConsumptionRecord` stores all the `Food` consumed."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Whenever `nom`, `vomit`, or `stomach` is used, a list will be retrieve and sent to a FilteredList. Such a list consists of `DisplayFood` objects,"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ray-97"
        },
        "content": "for the purpose of displaying information compiled from each `Food`."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The FilteredList is an observable, so whenever it is updated, the GUI will be informed and display the contents accordingly."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ray-97"
        },
        "content": "In this section, I will be walking you through the implementation of the `ConsumptionRecord`, what happens on App startup,"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ray-97"
        },
        "content": "and what happens when a consumption related command is called. I will be talking about the `nom` command more specifically."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This is because `vomit` and `stomach` work very similarly, and you will see that it\u0027s easy to understand once you have read through this"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ray-97"
        },
        "content": "section."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[ConsumptionRecord-desc]]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ray-97"
        },
        "content": "In Calgo, you will find that the GUI `ConsumptionRecord` use a `uniqueDateToLogMap` to map each `LocalDate` to a `DailyFoodLog`."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ray-97"
        },
        "content": "As you can guess, `LocalDate` keys are unique. +"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Each `DailyFoodLog` is related to a `LocalDate` object and contains 2 `LinkedHashMap`, one to map `Food` consumed to their portion,"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ray-97"
        },
        "content": "another to map `Food` to an `ArrayList` of `Integer`, which represents the ratings given to that `Food` item consumed on that day."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ray-97"
        },
        "content": "// note that directs to main diagram and say it might be useful?"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ray-97"
        },
        "content": "On App startup, `initModelManager` of `MainApp` class is invoked. This will cause `storage` to read consumption record data from a `.json` file"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ray-97"
        },
        "content": "which stores App data. The `.json` file stores `JsonAdaptedDailyFoodLog`, which is similar to `DailyFoodLog` in every way,"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ray-97"
        },
        "content": "but deals with `JsonAdaptedFood` class instead of `Food`. Notice that there are a chain of `toModelType` commands"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ray-97"
        },
        "content": "called as we dive deeper into the method call stack. `toModelType` is actually the method to return a working counterpart of `JsonSerializable` and `JsonAdapted` classes"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ray-97"
        },
        "content": "that will be delivered to the model of Calgo."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ray-97"
        },
        "content": "So you might ask, what does `JsonAdapted` mean? Well, `JsonAdapted` classes are specially formatted versions"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ray-97"
        },
        "content": "of their counterparts that makes it easy for the `Jackson` API to read and write to."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Here is what happens when different classes call `toModelType`: +"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* `JsonSerializableConsumptionRecord` returns its equivalent copy of `ConsumptionRecord.`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* `JsonAdaptedDailyFoodLog` returns its equivalent copy of `DailyFoodLog`."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Below shows the high level view of the initialization process:"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "For the subsequent sequence diagrams in the section,"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "the lifelines for objects should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Sequence Diagram for loading of Consumption Record"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::ConsumptionRecordSequenceDiagram.png[]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Now that the `ConsumptionRecord` has been initialized, the App can start interacting with the user."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Whenever the user enters a `nom` command into the GUI, a sequence of events occur."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Here is a a step-by-step guide to what happens in such a scenario: +"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 1: `UI` component `MainWindow` receives the input as a `String`. That `String` is then passed into LogicManager,"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ray-97"
        },
        "content": "which calls the `parseCommand` of `CalgoParser`. Suppose the `String` is \"nom n/Apple d/2020-04-12 portion/2 r/7\""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ray-97"
        },
        "content": "`CalgoParser` detects that this is a `nom` command. `CalgoParser` then delegates this job by creating"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ray-97"
        },
        "content": "a new `NomCommandParser` object which will parse this `String`. +"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 2: `NomCommandParser` gets relevant values from `Prefixes` of input `String`, and then checks with the `ModelManager`."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ray-97"
        },
        "content": "It specifically checks if there exists a `DailyFoodLog` with the same `LocalDate` as what was parsed so that it can use existing information if"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ray-97"
        },
        "content": "they are already present. From all these information, a `DailyFoodLog` object representing the result of consuming a `Food` is created, and supplied to create"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ray-97"
        },
        "content": "`NomCommand`. The diagram below shows how this happens:"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Sequence Diagram for parsing of Nom command"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::NomCommandParserSequenceDiagram.png[]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 3: `NomCommand` updates the `ModelManager` with the `DailyFoodLog` obtained during its execution by `LogicManager`."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Such information cascades down the layers of abstraction until it reaches `ConsumptionRecord`,"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ray-97"
        },
        "content": "which updates its underlying \u0027uniqueDateToLogMap\u0027 aforementioned \u003c\u003cConsumptionRecord-desc, here\u003e\u003e."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Sequence Diagram of how Nom command executes"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::NomCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 4: `NomCommand` then informs the `ModelManager` to update its `FilteredList`, which gets information from the updated `ConsumptionRecord`."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Since the `FilteredList` is a wrapper of `ObservableList`, its update will inform the UI components that utilise JavaFx of changes."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This results in the GUI automatically updating to reflect the changes."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 5: A new `commandResult` object is created an passed back to `MainWindow`, and displayed in `Result Display`."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 6: Finally, the changes in `ConsumptionRecord` are saved to `StorageManager`."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How `nom` executes"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 1 (current choice):** Create a new `DailyFoodLog` to pass into `ModelManager` and then `ConsumptionRecord`."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Maintain comprehensive layers of abstraction"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Allows code to be easily testable."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons: Difficult for newcomers or even existing users to trace because of long execution path."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 2:** Bypass `ModelManager` or even not use `ConsumptionRecord` for storage of data during runtime by allowing everything to be done"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ray-97"
        },
        "content": "from parser."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros: Reduce dependencies on `ModelManager` and `ConsumptionRecord`, and make code contained in a single class file easier to navigate."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons: Violates layers of abstraction set in place by previous structure of AddressBook3. Violates Single Responsibility Principle and reduce"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ray-97"
        },
        "content": "cohesiveness of code."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the consumption commands"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 1 (current choice):** Use a single `FilteredList` to store food for any day by repopulating it each time"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ray-97"
        },
        "content": "a consumption related command is used."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros: Only uses a single `FilteredList`, so it is clear which list you are using for display."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons: May have performance issue in terms of speed when there are too many entries."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 2:** Use a `FilteredList` for each date, to store food consumed on that date."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros: Faster retrieval for display of `ConsumedFood` items. However, under practical circumstances, the difference is negligible."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons: May have performance issue in terms of storage because it requires many lists to be stored in addition to `LinkedHashMap`"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ray-97"
        },
        "content": "in `DailyFoodLog` for each `LocalDate`."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Selecting items to delete from `ConsumptionRecord` using `Vomit` command"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 1 (current choice):** Use index to select item to delete."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros: When the list is short, user can quickly identify the entry to delete."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros: Convenient for user as he is required to type less."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros: User need not spend effort remembering names."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons: When there are too many records, user is required to scroll through records."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 2:** Use name to select item to delete"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros: Can utilise the `Result Display` suggestion to improve user experience."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons: User face the hassle of memorising names and typing more."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d\u003d Summary"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This section is a summary on all the above discussed. I would do so with the aid of a few activity diagrams so that you"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ray-97"
        },
        "content": "are clear about the flow of the processes covered."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Activity Diagram for the 3 consumption related command"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::OverallConsumptionActivityDiagram.png[]"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The 2 diagrams below serves as (rakes), which shows more details."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Activity Diagram for Nom command"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::NomActiivityDiagram.png[]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Activity Diagram for Vomit command"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::VomitCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "// tag::modifyingfoodrecord[]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[Implementation-SmartUpdate]]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d\u003d\u003d Modifying the `FoodRecord`"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "(By Zhang Xian)"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "This section addresses how the `FoodRecord` can be modified by the `update` and `delete` commands."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "The `update` command allows the user to modify the `FoodRecord` by either adding a new `Food` into the `FoodRecord` or editing the"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ray-97"
        },
        "content": "nutritional values of an existing `Food` in the `FoodRecord`."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "From the user\u0027s perspective, the `update` command does either of the adding and editing functions. This implementation of `update` decides whether to"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ray-97"
        },
        "content": "override an existing `Food` in the `FoodRecord` with new values, or create a new `Food` in the `FoodRecord` for them."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "For better user experience, for all new `Food` being updated into the `FoodRecord` with the `update` command, the `Name` attribute"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "will be formatted to proper case. This means that if the user updates a new `Food` into the `FoodRecord` with the `Name` as \"char kuay teow\", the `Food` that"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "ray-97"
        },
        "content": "is stored in the `FoodRecord` will be of `Name` \"Char Kuay Teow\"."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "ray-97"
        },
        "content": "When a new Food is updated into the FoodRecord, the FoodRecord is sorted in lexicographical order. For more information on how this is implemented,"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ray-97"
        },
        "content": "please refer to its relevant section \u003c\u003cImplementation-LexicographicalOrder, here\u003e\u003e."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "The `delete` command allows the user to modify the FoodRecord by deleting a specified `Food` entry from the FoodRecord."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "This command takes in the `Name` of the `Food` entry to be deleted."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "For both `delete` and `update` commands, the `Name` parameter is implemented to be case-insensitive. This means that `n/APPLE` and `n/apple` refers to"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "the same `Food` entry with `Name` stored as `Apple`."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "The modification of the `FoodRecord` is facilitated by `UniqueFoodList`, which is responsible for storing all the `Food` entries in the `FoodRecord`."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Additional abstractions were used by `Model` and `Logic` for any operations that results in a modification of the `UniqueFoodList`."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Both commands require an additional operation, `hasFood`, in `FoodRecord` to be implemented. `hasFood` checks if there is an existing `Food` in `FoodRecord`"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "by checking if there is any `Food` in the `FoodRecord` with the same `Name`. Two `Food` entries is deemed to be of the same `Name` if their lowercase variant"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "is the same."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "This operation was exposed in the `Model` interface as `hasFood`, allowing `UpdateCommand` and `DeleteCommand` this functionality."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `update` command:"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "For the `update` command, the `hasFood` operation decides whether `UpdateCommand` adds a new `Food` into `UniqueFoodList` or"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "edits the nutritional values of an existing `Food` in the `UniqueFoodList`."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The following sequence diagram shows how the `update` operation works in both cases:"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ".Sequence Diagram for `update` command"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::UpdateSequenceDiagram.png[]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ray-97"
        },
        "content": "NOTE: The lifeline for `UpdateCommandParser` and `UpdateCommand` should end at their destroy markers (X) but due to a limitation of PlantUML, the lifelines reach the end of diagram."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "ray-97"
        },
        "content": "How the `update` command works:"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 1: `LogicManager` executes the user input of `update n/apple cal/52 p/2 c/14 f/1\", using `CalgoParser` to realise this is"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "an `update` command and creates a new `UpdateCommandParser` object."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 2: `UpdateCommandParser` then parses the arguments provided by `CalgoParser` with the `parse` method."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "ray-97"
        },
        "content": "During this parsing process, `UpdateCommandParser` calls the `covertToTitleCase` method on the `Name` argument, converting it"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "ray-97"
        },
        "content": "to proper case."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 3: `UpdateCommandParser` then creates a new `UpdateCommand` object, which `LogicManager` calls the `execute` method with this object"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "ray-97"
        },
        "content": "as an argument."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 4: `UpdateCommand` now checks if there exists an existing `Food` in the `FoodRecord` by calling `Model` \u0027s"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "`hasFood` method."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 5:"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Scenario 1:"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "ray-97"
        },
        "content": "If Food already exists in the `FoodRecord`:"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Model calls the `getExistingFood` method with the user inputted `Food`"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "as a parameter to get the existing `Food`, `existingFood` in the `UniqueFoodList`. It thens call the `setFood` method to replace the"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "existing `Food` in the `UniqueFoodList` with the new `Food` which contains new nutritional values."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Scenario 2:"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "If `Food` does not exist in `FoodRecord`:"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** This scenario is handled by the Lexicographical Ordering feature. Please refer to its relevant section \u003c\u003cImplementation-LexicographicalOrder, here\u003e\u003e."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Model calls the `addFood` method with the user inputted `Food` as a parameter to add the new `Food` into the `UniqueFoodList` in `FoodRecord`"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** After the `Food` is added into the `UniqueFoodList`, the `UniqueFoodList` is also sorted in lexicographical order."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 6: A new `CommandResult` object is then created and returned back to `LogicManager`."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `delete` command:"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "For the `delete` command, the `hasFood` operation allows `UpdateCommand` to check whether the Food that the user requests to be"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "deleted exists in the `UniqueFoodList`."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "The following sequence diagram shows how the `delete` command works:"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ".Sequence Diagram for `delete` command"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` and `DeleteCommand` should end at their destroy markers (X) but due to a limitation of PlantUML, the lifelines reach the end of diagram."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "How the `delete` command works:"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 1:  `LogicManager` executes the user input of \"delete n/Apple\", using `CalgoParser` to realise this is"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "an `delete` command and creates a new `DeleteCommandParser` object."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 2: `DeleteCommandParser` then parses the arguments provided by `CalgoParser` with the `parse` method, before creating a new"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "`DeleteCommand` object that is returned back to the `LogicManager` which calls the `execute` method with this as an argument."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 3: `DeleteCommand` now checks if there exists an existing `Food` in the `FoodRecord` by calling `Model`\u0027s `hasFood` method, which"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "checks if there is such `Food` in the `UniqueFoodList`."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 4: `Model` then calls the `getExistingFood` method to return the `Food` object to be removed from the `UniqueFoodList`. Thereafter,"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "`Model` calls the `deleteFood` method with this `Food` object as an argument to remove this `Food` from the `UniqueFoodList`."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 5: A new `CommandResult` object is then created and returned back to the `LogicManager`."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Updating the `FoodRecord` when there is an existing `Food` item in `FoodRecord`"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* *Alternative 1 (current choice):* Overrides the existing `Food` item with the new `Food` item"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** No need for an additional command of `edit` just for the user to edit an existing `Food` item in the `FoodRecord`."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** Might not be intuitive for the user since the word \"update\" is generally assumed to be for editing something only and not necessarily adding something."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** May result in additional performance overhead."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* *Alternative 2:* Informs the user that there is already an existing `Food` item, and direct him to use another command `edit` to edit the existing `Food` instead."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** More intuitive for user, since he might not know that he is overriding an existing `Food` item"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** Additional command has to be created just to handle editing"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** More tedious for user since more steps are required to achieve the same result."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d Summary"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "In summary, this section explains how commands related to modifying the `FoodRecord` is implemented."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "The `update` command is a smart command that either updates an existing `Food` entry in the `FoodRecord` with new nutritional information,"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "ray-97"
        },
        "content": "or updates a new `Food` item into the `FoodRecord`"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The following activity diagram summarises what happens when a user enters a valid `update` command:"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ".Activity Diagram for `update` command"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::UpdateActivityDiagram.png[]"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "The `delete` command allows the user to remove a `Food` entry from the `FoodRecord` by specifying it\u0027s `Name` as an parameter."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "The following activity diagram summarises what happens when a user enters a valid \u0027delete\u0027 command:"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ".Activity Diagram for `delete` command"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::DeleteActivityDiagram.png[]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "// end::modifyingfoodrecord[]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "// tag::realtimesuggestions[]"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "[[Implementation-RealTimeSuggestion]]"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d\u003d\u003d Real-time Suggestions for existing `Food` in `FoodRecord`"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "(By Zhang Xian)"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "This section addresses how the GUI `Result Display` suggests `Food` with similar `Name` to the user for the commands `update`, `delete` and `nom`."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "ray-97"
        },
        "content": "When the user have many `Food` entries in the `FoodRecord`, they may have difficulties finding out if a particular `Food` exists in the `FoodRecord`."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "For better user experience, this feature listens to the input of the user for these three commands and suggests similar existing `Food` entries in real time in the GUI\u0027s"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "`Result Display`."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This feature listens to the input of the user after the `Prefix` `n/` and checks if there is a `Food` entry in the `FoodRecord` with a similar `Name`."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The `Name` parameter is case-insensitive and searches the `Food` entries in the `FoodRecord` by whether they start with the user input so far after the"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "ray-97"
        },
        "content": "`Prefix` `n/`."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "To be able to process user\u0027s input in real-time, we set a `listener` in the `CommandBox` to listen for the input of any of the three commands: `update`, `delete` or `nom`"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "This feature is then facilitated by different objects, mainly `MainWindow` and `UniqueFoodList`. `MainWindow` interacts with `LogicManager` \u0027s method of `getSimilarFood` which exposes"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "the `FoodRecord`, allowing a filtered list of similar `Food` entries in the `UniqueFoodList` to be returned back to the user."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "A predicate, `FoodRecordContainsFoodNamePredicate` is also essential in this implementation in ensuring that the correct similar `Food` items can be filtered from the `UniqueFoodList`"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "back to the `LogicManager` to be displayed by the GUI. The `test` method of this predicate which is responsible for the above is shown:"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "----"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public boolean test(Food food) {"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    boolean foodStartsWithInputFoodName \u003d food.getName().fullName.toLowerCase()"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        .startsWith(foodName.toLowerCase().trim());"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    boolean inputFoodNameStartsWithFood \u003d foodName.toLowerCase().trim()"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        .startsWith(food.getName().fullName.toLowerCase());"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    return foodStartsWithInputFoodName || inputFoodNameStartsWithFood;"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "----"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Both of the `boolean` used for this predicate is essential. For instance, if \"Laksa is already present\" in the `FoodRecord`:"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "- If the user keys in \"Lak\", the first `boolean` `foodStartsWithInputFoodName` ensures that \"Laksa\" will be suggested to the user."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "- If the user keys in \"Laksa Spicy\", the second `boolean` `inputFoodNameStartsWithFood` ensures that \"Laksa\" will be suggested to the user."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "The following sequence diagram will explain how the different objects interact to achieve the Real-time Suggestion Feature."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ".Real-time Suggestion Feature Sequence Diagram"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::RealTimeSuggestionSequenceDiagram.png[]"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Based on the above diagram, when a user has already entered any of the `CommandWord`: `update`, `delete` or `nom`, and also the Prefix `n/`:"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 1: `CommandBox` calls the `MainWindow` method of `getSuggestions` with the parameter as the entire `String` of user input in the `CommandBox`."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 2: `MainWindow` then parses the user inputted `String` and calls `LogicManager` method of `getSimilarFood` with the parameter `foodName` which is the entire `String` after the `Prefix` `n/`"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 3: The `Model` then does the necessary work by calling methods `getFoodRecord` and `getFoodList`. This results in the current `UniqueFoodList` being returned"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 4: The `UniqueFoodList` is then filtered with the `Predicate\u003cFood\u003e`, `FoodRecordContainsFoodNamePredicate` which returns a `List\u003cFood\u003e` of `Food` objects that have similar `Name` fields to the user input."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Step 5: Finally, the filtered `List\u003cFood\u003e` is then parsed into a `String` for the user by the `MainWindow` and then displayed in the GUI\u0027s `Result Display`."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the suggestions is shown to the user."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "* *Alternative 1: (current choice):* `ResultDisplay` displays the names of similar `Food` entries in `Food Record`."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Improved user experience, allowing user to still view the unfiltered `FoodRecord` in the GUI."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** User can have access to the raw `String` of the `Name` similar `Food` entries for copying and pasting."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Additional interacting with `UI` components required, instead of just filtering `UniqueFoodList`"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Cannot reusing existing lexicographical sorting feature of `FoodRecord`."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "* *Alternative 2:* Filter the GUI\u0027s `Food Record` to show similar Food entries."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Feature is limited to minimal interactions with `UI`, making use of existing `UI`-`Model` abstractions."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Compatible with existing code relating to the `FoodRecord`, allowing code to be reused."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Takes away most of the need for `find` and `list` features since they achieve mostly the same purpose."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Commands that utilise Real-time Suggestions"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "* *Alternative 1: (current choice):* Only three commands: `update`, `delete`, `nom`"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Improves computational performance, since real-time features for every command will be computationally expensive."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Keeps the desired outcomes of other features such as `find` and `list` intact"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Decrease in user experience, as they might expect this feature to be universal for all commands"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "* *Alternative 2* All the commands"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Better standardisation of feature across all commands."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Additional computational overhead."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Not all commands have a `Name` field."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Additional implementation or significant change in how this feature works is necessary to make it universal."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d\u003d\u003d\u003d Summary"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "`CommandBox` listens for any of the three commands as mentioned, allowing `LogicManager` and `FoodRecord` to facilitate"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "the suggestions of similar `Food` entries from the `UniqueFoodList` to display in the GUI\u0027s `Result Display`. This can be summarised"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "in the activity diagram below:"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ".Real-time Suggestion Feature Activity Diagram"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::RealTimeSuggestionActivityDiagram.png[]"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "// end::realtimesuggestions[]"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[Implementation-HelpGuide]]"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "//tag:: helpCommand[]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Command guide `help` command"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "(by Janice)"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This section addresses how the `help` command works."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `help` command allows users to reference a summarised version of the User Guide (called the command guide)"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "ray-97"
        },
        "content": "containing the usages of the commands and their formats, arranged in alphabetical order. Users may enter an"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "ray-97"
        },
        "content": "optional `command word` that filters the displayed command guide."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "ray-97"
        },
        "content": "`command word` filters out only commands which contain the `command word` as a substring. If no commands contain it"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "as a substring, an error message will be displayed at the top of the GUI component `Help Window` and the full command guide will be shown."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "To generate a command guide using the `help` command, a `HelpCommand` object generates the relevant command guides"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "ray-97"
        },
        "content": "based on the provided `command word` in the input."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The sequence diagram below demonstrates how the `help` command works, should a `command word` of \"nom\" be provided."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Sequence Diagram for Help"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::HelpSequenceDiagram.png[]"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 1: `LogicManager` executes the user input, using `CalgoParser` to realise it is a `help` command, and thus creates"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "ray-97"
        },
        "content": "`HelpCommand`"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 2: `HelpCommand` constructor generates the necessary mapping of command name to the corresponding command guide."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Step 3: `LogicManager` calls the `execute` method on the `HelpCommand` object, which produces the String containing the"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "ray-97"
        },
        "content": "relevant command guides. A `CommandResult` object is produced reflecting the response to the `help` command."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- In the above sequence diagram, one possibility shown, where the user provides a `command_word`. `setFilteredGuide`"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "ray-97"
        },
        "content": "will attempt to retrieve only relevant command guides, defaulting to a list of all guides if no relevant guides exist."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Otherwise, by default a list of all guides will be provided."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Step 4: The `CommandResult` is eventually passed to the `MainWindow` class, which then displays the command guide in a separate"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "window, using the `HelpWindow` class."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "// end::helpCommand[]"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Help is displayed"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* **Alternative 1 (current choice):** GUI component `Help Window` is displayed as a separate popup."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- User can refer to the command guide in a window separately from Calgo, keeping it present as they use the App."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Command guide can give a more detailed description of command usage and format as it has more space to display in."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- No internet access is required as all information on commands is stored offline."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- `help` does not redirect to a url containing the most up-to-date User Guide. Changes made to the User Guide"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "ray-97"
        },
        "content": "must be updated in `HelpCommand` separately."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- GUI component `Help Window` might obstruct view of the App upon initially loading it, causing annoyance."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* **Alternative 2:** GUI component `Help Window` is not used, and instead content is displayed as part of GUI component `Result Display`."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- No possibility of a popup blocking the main app."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- All information is contained within a single window."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- User must use the `help` command every time they require a guide, as GUI component `Result Display` will be"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "ray-97"
        },
        "content": "overwritten after other commands."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Command guides can be selectively displayed"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 1 (current choice):** `help` displays all command guides by default. User can selectively filter to"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "ray-97"
        },
        "content": "display only desired commands by entering an optional keyword after `help`."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Desired command can be more rapidly found."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- Removes all unwanted commands from GUI component `Help Window`, reducing clutter."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Filtered `help` does not benefit users who don\u0027t know the command they\u0027re looking for."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* **Alternative 2:** Always display all command guides to ensure user will find the guide they require."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- No possibility of user being unable to find their desired command after sufficient searching."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Relatively large array of commands can be overwhelming to a new user, deterring them from using the App."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "ray-97"
        },
        "content": "- Can be very frustrating to search through for experienced users."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d Summary"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "ray-97"
        },
        "content": "`help` will produce a popup, displaying a guide on the App\u0027s available commands\u0027 purposes and usage format."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".Activity Diagram for Help"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "ray-97"
        },
        "content": "image::HelpActivityDiagram.png[]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "// tag::caloriegraph[]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[[Implementation-CalorieGraph]]"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d Past seven days calorie data graph"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "(by Janice)"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This section addresses how the graph displaying the user\u0027s past seven day\u0027s daily total calorie consumption works."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Note that the graph counts starting from the date on the current `Food Record`, and the six days prior to it."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The graph will always display the past seven days\u0027 data at the bottom of the app, and will update"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "whenever app data is changed."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "If a command changes the date of the `Food Record` (such as `nom` or `stomach`), the graph will update to show data"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "for the past seven days from that date, inclusive."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "`GraphPanel` in the `Ui` component. It contains a `LineChart` of `String` date against `Number` calories, and is populated with"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "data from an `XYChart.series`. The data is in turn obtained from the `Logic` component, which provides only the past seven days\u0027"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "of `DailyFoodLog`. The implementation of the `GraphPanel` class will be further explained."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "`GraphPanel` class implements the following operations:"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* `initialiseTreeMap` - Sets up the TreeMap that maps `LocalDate` date of `DailyFoodLog` to the `Double`"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "total calorie consumption n that day."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* `initialseGraph` - Sets up the `LineChart` with xAxis a `String` representing date, and yAxis a `Double` representing"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "total calories consumed on that date."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* `updateSeries` - Ensures the `XYChart.series` that populates the graph with data is always updated with the"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "most recent app data."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* `makeGraph` - Wrapper function that calls the above three methods."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* `getGraph` - Public accessor function to generate and retrieve the `LineChart`."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Calgo will display the past seven days\u0027 graph automatically, and likewise update automatically. It does so by having the"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": " `MainWindow` class call `getGraph` on startup and after execution of commands."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The sequence diagram below demonstrates how the `Graph` feature works."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ".Sequence Diagram for GraphPanel"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "image::GraphSequenceDiagram.png[]"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Sequence Diagram for `Graph` feature."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Step 1: `MainWindow` requests for an instance of `GraphPanel`."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "If no instance exists, a new `GraphPanel` is created. Otherwise one is retrieved. This ensures that `GraphPanel`"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "is a singleton."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Step 2: `MainWindow` calls `GraphPanel` again to generate the graph and add it to the `GraphPanelPlaceholder` inside `MainWindow`."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Step 3: Inside `GraphPanel`, a wrapper method `makeGraph` calls three methods in a row:"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "First, `initialiseTreeMap`, which has `Logic` call the `getPastWeekLogs` method onto `GraphPanel`, generating"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "a `TreeMap` of `String` date mapped to `Double` calories using the past seven days\u0027 `DailyFoodLog`."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Second, `initialiseGraph` method is called to generate the graph itself."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Third, `updateSeries` method is called to ensure the data populating the graph is up to date."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "After which, the `GraphPanel` adds the graph to `MainWindow`."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Choice of visuals for past seven days summary"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Alternative 1 (current choice):* Summary is represented using a line graph."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Alternative 2:* Summary is represented in a table."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When graph\u0027s dates are based on"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Alternative 1 (current choice):* Dates are based on past seven days starting from date of `Consumption Record`, inclusive."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Alternative 2:* Dates are based on past seven days starting from today\u0027s date, inclusive."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d\u003d Summary"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "In summary, this section addresses how the graph obtains information on the past seven `DailyFoodLog`, and correspondingly"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "produces a visual graph output onto Calgo\u0027s `Main Window` GUI component viewable by the user."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The graph requires the `LogicManager` class to obtain the information, and the `MainWindow` class to facilitate display"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "to the user."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "//end::caloriegraph[]"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e below)"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the App"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Certain properties of the App can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Is reasonably comfortable using `CLI` Apps"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Wants to have, or already has, a lifestyle of eating healthy"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Manages a significant number of `Food` items"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* Prefers desktop Apps over other types of Apps (such as mobile or tablet)"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Insights:* set goals, generate consumption reports and view progress and statistics"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Hassle-Free Convenience:* conveniently handles entry conflicts, tolerates incomplete search inputs and produces fast responses"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Flexibility:* generate Food records as a portable file, tracking wherever, whenever, without a device"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Efficiency:* manage caloric tracking faster than a typical mouse/GUI driven App"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (possible future development) - `*`"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who does not know what my food is made of |find out the nutritional composition of a particular food by name |locate details of the entry without having to go through the entire record."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user |have a portable, editable, and readable file to store the relevant values for each entry made |edit, share, or print my personal entries."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who may not be able to access his laptop at some time |have a copy of my past entries |use it for physical reference."
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who dislikes sieving through information and prefers to have only the relevant information presented |have a way to easily find the entries I want in the record |save time and effort and not get annoyed."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |lazy user who does not like typing too many tedious characters |find entries using incomplete words or phrases |obtain the same intended results for a search through the entries as in the case of typing fully and correctly."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who dislikes memorising things |have an option to see the entire record |know what entries currently exist in the records."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who has many entries |view entire record in lexicographical order |easily navigate to the entry I want in the record."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who is forgetful | be able to edit the nutritional value of a previously saved entry in the record | edit the entry if I remembered a nutrition value wrongly previously."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who is busy | be able to create a list of goto Food with nutritional values| quickly choose a Food Item with preset values and add it to my calorie tracker."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who doesn\u0027t like redundant things | override a Food entry in the Food Record which already exists| save time and effort and not create a duplicate item in the Food Record."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "|`* * *` |user who gets bored of food easily |deletpe a Food item that I no longer want to eat in future from my Food Record| avoid having so many Food items in the Food Record that I no longer eat."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who is a foodie | find out the statistics of the food that I have been consuming each day | systematically cut down on overeaten food and monitor progress."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who cannot decide on what to eat | obtain a list of personalised food recommendations that still align with my dietary goals | avoid wasting time deciding what to eat nor will I give in to impulse and eat junk food."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who is interested to lose weight | find out the number of calories I have consumed each day | check which days I have exceed my desired number of daily calorie and exercise more to compensate."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "|`* * *` |user who is busy | obtain an easy-to-understand consumption report | quickly understand my food consumption patterns and make plans to rectify them accordingly."
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who remembers the big picture but not the specifics | search for a particular part of a guide | not be bothered by unnecessary information."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` | user who values visuals | curated information expressed in a well organised graph | intuitively understand information."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` | user who values opinions | have some suggestions based on my goals and consumption patterns | know my options when I am indecisive on what to eat."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* * *` |user who cannot fully remember the name for a particular entry |view all entries which have the nutritional value I happen to remember |obtain a list of possible Food entries that are relevant."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "ray-97"
        },
        "content": "|`* *` |forgetful user | be able to lookup exact command formats | so that I won\u0027t need to go through the trouble of memorising commands."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "ray-97"
        },
        "content": "As you continue developing the Calgo, feel free to add more user stories here."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "For all use cases below, the *System* is the Calgo application and the *Actor* is the user, unless specified otherwise. +"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Also note that the term *MSS* refers to the Main Success Scenario for each Use Case."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d Use case: obtain reference for app\u0027s commands"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "1.  User wants to find the command guide for the commands in Calgo."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "2.  User enters `help` command with no additional `command_word`."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "3.  `Calgo` generates a popup, displaying a list of all command guides in the popup."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*2a. User enters a `command_word` after `help`, such as foe example `help nom`.*"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "2a1. `Calgo` filters out only command guides containing the `command_word` \"nom\"."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "2a2. `Calgo` generates a popup, displaying this filtered list of command guides."
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*2b. User enters a `command_word` after `help` that has no corresponding command guides.*"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "2b1. `Calgo` tries to filter out only command guides containing the `command_word` but fails to find any guides. Thus"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "it defaults to display all command guides."
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Use case resumes from Step 2."
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Use case: `find` `Food` item by `Name` or `Tag` keyword (which can be an incomplete word)"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "ray-97"
        },
        "content": "1.  User wants to find a `Food` entry by a specific keyword in `Name` or `Tag`."
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "ray-97"
        },
        "content": "2.  User enters `find` command with the `Name` `Prefix`, or the `Tag` `Prefix`, accordingly."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "3.  Calgo shows a list of `Food` entries which contains the substring indicated in any part of the `Name` or `Tag` of the `Food` entries respectively."
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*2a. User enters invalid input for particular `Prefix`* +"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "ray-97"
        },
        "content": "2a1. A message prompting the user to enter a valid input is shown. +"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Use case resumes from Step 2."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*3a. The `FoodRecord` is empty* +"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "ray-97"
        },
        "content": "3a1. A message is shown indicating that there are zero matching `Food` items and prompts users to make new entries. +"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Use case: `find` `Food` item by nutritional value"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "ray-97"
        },
        "content": "1.  User wants to `find` a `Food` item by a single nutritional value of either `Calorie`, `Protein`, `Carbohydrate`, or `Fat`."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "ray-97"
        },
        "content": "2.  User enters `find` command with appropriate `Prefix`."
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "ray-97"
        },
        "content": "3.  `Calgo` shows a list of `Food` entries which has the same nutritional value."
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*2a. User enters invalid input for particular `Prefix`* +"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "ray-97"
        },
        "content": "2a1. A message prompting the user to enter a valid input is shown. +"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Use case resumes from Step 2."
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*3a. The `FoodRecord` is empty* +"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "ray-97"
        },
        "content": "3a1. A message is shown indicating that there are zero matching `Food` items and prompts users to make new entries. +"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Use case: `export` current `FoodRecord`"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "ray-97"
        },
        "content": "1.  User wants to `export` the current `FoodRecord`."
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "ray-97"
        },
        "content": "2.  User enters the `export` command into `Calgo`."
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "ray-97"
        },
        "content": "3.  Calgo creates a user-friendly text file `FoodRecord.txt` containing all `Food` item details in the `data/exports` folder."
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*3a. User\u0027s system prevents the file from being created* +"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "ray-97"
        },
        "content": "3a1. A message is shown indicating that the file is unable to be created. +"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Use case: `list` all current `Food` entries"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "ray-97"
        },
        "content": "1.  User wants to `list` all current `FoodRecord` entries."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "ray-97"
        },
        "content": "2.  User enters the `list` command into `Calgo`."
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "ray-97"
        },
        "content": "3.  `Calgo` shows a list of all `Food` entries in the GUI\u0027s `Food Record`."
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "+"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*3a. The `FoodRecord` is empty.* +"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "ray-97"
        },
        "content": "3a1. `Calgo` shows a message indicating that all entries are shown, with the GUI showing an empty `Food Record`. User is also prompted by this message to make new entries. +"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Use case: `update` current `FoodRecord` with a new `Food` item"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "1.  User wants to add a new `Food` entry in the `FoodRecord`."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "2.  User begins to type in an `update` command with `Name` `Prefix`."
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "3.  `Calgo` shows that there are no similar `Food` entries in GUI `Result Display`."
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "4.  User completes typing in remaining `Prefixes` of `Calorie`, `Protein`, `Carbohydrate`, `Fat` `Prefixes` accordingly and enters it in `Calgo`."
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "5.  `Calgo` adds a new `Food` entry into `FoodRecord` with paramaters as specified by User."
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "+"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*3a. There are similar `Food` entries in the `FoodRecord`* +"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "3a1. `Calgo` the similar Food entries in the GUI\u0027s `Result Display`"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Use case resumes from Step 3."
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*5a. `Calgo`\u0027s FoodRecord already contains the same `Food` entry* +"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "5a1. `Calgo` overrides this existing `Food` entry with the new `Food` entry"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Use case: `delete` an existing `Food` item in current `FoodRecord`"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "1.  User wants to delete a Food entry from the `FoodRecord`"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "2.  User types in an delete command with the `Name` Prefix."
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "3.  `Calgo` shows that the `Food` entry that the User wishes to delete exists in one of the similar Food items message in the GUI Result Display."
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "4.  User enters the command into `Calgo`"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "5.  `Calgo` deletes the `Food` entry from the `FoodRecord`."
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "+"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*3a. The Food entry that the User wishes to delete does not exists in the `FoodRecord`.* +"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "3a1. GUI `Result Display` shows that there are no similar `Food` items in the `FoodRecord`."
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Use cases resumes from Step 3."
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d Use case: set a daily `goal`"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "1. User enters the `goal` command with the intended value."
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "2. Calgo updates the user\u0027s `goal` to the new value provided by the user."
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*1a. User enters an invalid input for the `goal`.* +"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "  1a1. Calgo shows a message indicating the acceptable range of values for the `goal` command. +"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "  1a2. User enters `goal` command with a new value. +"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Steps 1a1 and 1a2 are repeated until user enters a valid input. +"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d Use case: generate a `report` on a specific `date`."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "1. User enters the `report` command with a particular `date`."
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "2. Calgo analyses the `Food` consumed on that `date` and generates a `report` text file in the `data/reports` folder for the user."
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*1a. There is no `Food` consumed on the inputted `date`.* +"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "1a1. Calgo shows a message indicating that there was no `Food` consumed on the given `date`. +"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*1b. Inputted `date` in wrong format.* +"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "1b1. Calgo shows a message indicating the correct format for the `date`. +"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "1b2. User enters `report` command with the `date` in the correct format. +"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*1c. User enters `report` command without setting a daily calorie `goal`.* +"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "1c1. Calgo generates a `report` without the sections related to the `goal`. +"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Use case: consuming food on a on a specific day with `nom`."
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "ray-97"
        },
        "content": "1. User wants to record their `Food` consumption on a particular day."
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "ray-97"
        },
        "content": "2. User enters `nom` command with the appropriate `Prefixes` and values."
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "ray-97"
        },
        "content": "3. Calgo processes the command and update display."
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*2a. User misspells the command or `Prefix`* +"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "ray-97"
        },
        "content": "2a1. A message prompting the user to enter a valid input is shown. +"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Use case resumes from Step 2."
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*2b. The `Food` does not exist in `FoodRecord`* +"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "ray-97"
        },
        "content": "2b1. A message prompting the user to enter a valid input is shown. +"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Use case resumes from Step 2."
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*2c. User enters invalid value for particular `Prefix`* +"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "ray-97"
        },
        "content": "2c1. A message prompting the user to enter a valid input is shown. +"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Use case resumes from Step 2."
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ".  Should be able to hold up to 1000 `Food` items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ".  Calgo should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".  The minimum screen size for the App window to fully display its GUI is 1250 x 600."
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".  Calgo should be designed for a single-user (i.e. Calgo should not be a multi-user App)."
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".  The product should be developed incrementally over the project duration."
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".  The software\u0027s codebase should adhere to OOP."
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".  The product should have minimal network usage. Therefore, it is expected that users will find out about the"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "respective nutritional values of a `Food` entry whenever they want to `update` it into the `FoodRecord` for the first time."
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[application-user-interface]] Application User Interface (API)::"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "ray-97"
        },
        "content": "A set of tools for building software application."
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[command-line-interface]] Command Line Interface (CLI)::"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Text-based user interface used to view and manage computer files."
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[[food]] Food::"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "`Food` items entered by the user to represent a real life Food."
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "This contains nutritional values of each of their `Calorie` s, number of grams of `Protein` s, `Carbohydrate` s and `Fat` s."
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "They can also contains a series of `Tag` s."
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[gui-food-records-entry]] Food Entry::"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "ray-97"
        },
        "content": "An entry in the GUI\u0027s `Food Record` box, which shows all details for one `Food` object."
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[food-records]] FoodRecord::"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The accumulated list of all `Food` objects entered by the user."
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[[gui-food-records]] Food Record::"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The GUI\u0027s `Food Record` box, which shows all details for every `Food` entry."
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[gui]] GUI::"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The Graphical User Interface of Calgo."
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[nutritional-info]] Nutritional Information::"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Refers to `Calorie` s, `Protein` s, `Carbohydrate` s and `Fat` s."
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[oop]] OOP::"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Objected-Oriented Paradigm."
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[prefix]] Prefix::"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "ray-97"
        },
        "content": "A set of characters placed before a parameter when entering a command."
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Given below are instructions to test the App manually."
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Double-click the jar file +"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Re-launch the App by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Getting help"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Displays a guide for all commands. Can also display only commands containing the given command word."
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Prerequisites: Launch `Calgo` succesfully."
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `help` +"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: A help window pops up and shows you how to use each command."
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `help abcd` +"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: A help window pops up and shows you how to use each command anyway, but tells you abcd does not exist."
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Creating a `Food`"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Adding a `Food` item to the `FoodRecord`"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Prerequisites: Launch `Calgo` successfully"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case `update n/Apple cal/50 p/3 c/2 f/45`"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Expected: Updated all foods into Food Record:"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Apple Calories: 50 Proteins (g): 3 Carbohydrates (g): 2 Fats (g): 45"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `update x`"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Expected: +"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Invalid command format. update: Updates the food entered into the Food Record. If the food entered already exists, it will be overwritten by input values."
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Parameters: n/NAME cal/CALORIES p/PROTEIN c/CARBOHYDRATE f/FAT [t/TAG]..."
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Example: update n/Kiwi cal/150 p/2 c/25 f/3 t/Green t/Sweet"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Other incorrect commands to try: `update n/Apple c/2 f/45` (where parameters are missing) +"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Editing a `Food`"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Editing a `Food` item in the `FoodRecord`"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Prerequisites: Launch `Calgo` successfully and `Food` already exists in `FoodRecord`."
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case `update n/Apple cal/53 p/3 c/3 f/45`"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Expected: +"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Updated all foods into Food Record: Updated existing food item in Food Record:"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Apple Calories: 50 Proteins (g): 3 Carbohydrates (g): 3 Fats (g): 45"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `update x`"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Expected: Invalid command format."
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "ray-97"
        },
        "content": "update: Updates the food entered into the Food Record. If the food entered already exists, it will be overwritten by input values."
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Parameters: n/NAME cal/CALORIES p/PROTEIN c/CARBOHYDRATE f/FAT [t/TAG]..."
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Example: update n/Kiwi cal/150 p/2 c/25 f/3 t/Green t/Sweet"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Other incorrect commands to try: `update n/Apple c/2 f/45` (where parameters are missing) +"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Deleting a `Food`"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ". Deleting a `Food` item from the `FoodRecord`"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".. Prerequisites: Launch Calgo successfully and a `Food` item Apple already exists in `FoodRecord`"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ".. Test case: `delete n\\Apple` +"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `delete 0` +"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "   Expected: No food is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Other incorrect delete commands to try: `delete`, `delete n/Banana` (where `Food` banana does not exists in `FoodRecord`) +"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Listing all `Food` entries"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ". Listing down all entries, regardless of previous commands"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Prerequisites: Launch `Calgo` successfully."
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `list` +"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Expected: The GUI will show all `Food` entries existing in the `FoodRecord`."
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Navigating `Food record`"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Searches through the Calgo’s Food entries and displays relevant ones based on the specifications entered."
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Prerequisite: Launch `Calgo` succesfully, and `Food` being searched exists in `Food Record`"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `find n/Apple` +"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: `Food` having name that partially match \"Apple\" will be displayed"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `find t/sWeet +"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: `Food` having tag that partially match \"sweet\" will be displayed"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `find t/swEeT n/Apple` +"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Please specify 1 and only 1 correct parameter for filtering using the find command."
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Other incorrect commands to try: `find n/` +"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Names should only contain alphanumeric characters and spaces, and it should not be blank."
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Adding `Food` to consumption record"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Adds a Food to a specific day’s Consumption Record."
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Prerequisite: Launch `Calgo` succesfully, and `Food` being consumed exists in `Food Record`"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `nom n/chicken d/2020-03-04 portion/1.5 r/8` +"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Successfully consumed Chicken Calories: 32 Proteins (g): 20 Carbohydrates (g): 1 Fats (g): 11"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `nom n/chickn d/2020-03-04 portion/1.5 r/8` +"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: You can\u0027t eat that because it does not exist in food record."
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Other incorrect commands to try: `nom n/chicken d/2020-03-04 portion/-1 r/8` +"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Portion should be a positive number."
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Removing a portion of `Food` from consumption record"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Deletes a portion of a specific Food from the Consumption Record."
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Prerequisite: Launch `Calgo` succesfully, and `Food` being consumed exists in `Consumption Record`"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `vomit num/1 d/2020-03-04` +"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Successfully throw up Chicken Calories: 32 Proteins (g): 20 Carbohydrates (g): 1 Fats (g): 11"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `vomit num/` +"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Position should be a positive integer!"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Other incorrect commands to try: `vomit num/-1` +"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Position required an integer within range of list!"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Navigating `Consumption Record`"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Deletes a portion of a specific Food from the Consumption Record."
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Prerequisite: Launch `Calgo` succesfully, and have eaten something on the day you want to browse."
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `stomach d/` +"
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Display all food consumed. (As long as you ate on that day before, applies even if your record is empty due to using vomit)"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `stomach d/1930-04-01` +"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Your consumption record is empty because you have not consumed food on 1930-04-01 before"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Setting a goal"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Sets your daily calorie goal."
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Prerequisite: Launch `Calgo` succesfully."
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `goal 69` +"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: That is a really low goal to set. Warning: You may suffer from malnutrition."
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "ray-97"
        },
        "content": "We\u0027ll accept this now because Calgo will eventually help you to reach a daily calorie count of"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "ray-97"
        },
        "content": "1200, which is the minimum calories you should eat to stay moderately healthy."
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `goal 0` +"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Please key in a whole number that is at least 1 calorie and at most 99999 calories."
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Generating report for the day"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Generates consumption report for a given date."
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Prerequisite: Launch `Calgo` succesfully, and have eaten something on the day you want to generate report on."
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `report d/` +"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Successfully generated a report in the data/reports folder for the following date: 2020-04-13."
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `report d/2070-04-12` +"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Did not manage to generate report. There was no food consumed on 2070-04-12."
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Generating a copy of your `Food Record`"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Generates a neat and editable file containing the current Food entries."
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Prerequisite: Launch `Calgo` succesfully"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `export` +"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "ray-97"
        },
        "content": "   Expected: Successfully generated FoodRecord.txt in the data/exports folder."
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Clearing `Food Record` data"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Clears all food entries from Calgo. Note that data in Consumption Record is not deleted."
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Test case: `clear` +"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    Expected: Food Record has been cleared! Use the update command to add new food into your Food Record."
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Dealing with missing/corrupted data files."
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Calgo will start from a fresh state if your files are corrupted."
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "ray-97"
        },
        "content": ". Warning: You can edit the `.json` files in the `/data` folder. Be careful, if the files you"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "ray-97"
        },
        "content": "edit ends up with invalid format, you risk losing all existing data."
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d Effort"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Challenges and Difficulties"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "ray-97"
        },
        "content": "At the start, all of us were very new to software engineering projects. Hence, the learning curve was very steep. Because of this, most of the time, we were very confused. However, we demonstrated good teamwork because we always met often and helped each other out by explaining frameworks and teaching each other on software development tools like Git, Intellij and JavaFX."
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Due to the COVID-19 situation, there was a lot of uncertainty and our style of meetings were significantly affected. However, everyone demonstrated good attitude and the team was full of good sports, so we covered each other\u0027s weaknesses and supported one another, therefore being able to realise a strong team potential."
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Effort put in by the team"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* 3-4 meetings weekly on average"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Many unrecorded hours were put in for self-learning and managing the project."
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* We placed a lot of emphasis on brainstorming our features and implementing them to make it user-centric. For e.g. a real-time suggestion feature"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d Achievements"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Product Design"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Our team successfully morphed AB3 and its relevant tests into the Calgo you see today."
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Our team’s project idea was validated and appreciated by peers and tutors, most notably from our CS2101 presentation, CS2103T demo and PE-Dry Run testing."
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "It also has potential to be collaborated with other peer projects such as FitBiz (Group F11-2)."
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Implementation"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Ambitious in experimenting with new interesting features. For e.g. intelligent insights and graphs."
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Implemented features consistently and incrementally, allowing us to make changes to past features and"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Experimented with new workflow before deciding on one, Agile(Scrum), which we liked the most."
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Put in additional effort in making the GUI different and novel, even though it is not part of the grading rubric. This is another example of how we go the extra mile to make our product more user-centric. For e.g. we tried out new JavaFX APIs like LineChart and TableView."
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* Project Management"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Predominantly followed the forking workflow."
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Diligently created issues and assigned them on GitHub, while also consistently communicating with each other on Telegram."
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Planned and incrementally implemented our user stories throughout different milestones."
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Regularly reviewed each other’s code on and off Github."
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 108,
      "buddhavineeth": 320,
      "ray-97": 717,
      "eugenetyc": 296,
      "jeremylow97": 210,
      "-": 302
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d Calgo - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 2,
      "-": 121
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d Calgo - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ". Run the `Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `AY1920S2-CS2103T-F11-1/main` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `AY1920S2-CS2103T-F11-1/main`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, Calgo\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 1,
      "eugenetyc": 5,
      "-": 78
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d Calgo - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "e.g. `life.calgo.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "e.g. `life.calgo.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "e.g. `life.calgo.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 4,
      "-": 48
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d Calgo - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "By: `Team F11-1`      Since: `March 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*Table of Contents*:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Do you want to live a healthy lifestyle, yet never manage to reach the stage where you are able to actively track your diet?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Is it because managing the nutritional information of your meals is just too time-consuming and frustrating?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Are you searching for ways to make the meal tracking process much more convenient so that you can save all of that"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "time and memory for the many other aspects of your life? Search no more because we have the solution for you."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Introducing *Calgo*, your new personal meal-tracking assistant!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Calgo is an *all-in-one smart calorie tracker* that helps you to always be one step ahead in your fitness goals! +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Here are a few ways in which Calgo can help you:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Data Management*: Store and organise of all your favourite `Food` entries at your fingertips."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Insights:* Set your personal diet goals and Calgo helps you to achieve them by providing you with consumption"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "reports, a graphical summary and insights on how to improve your diet."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Hassle-Free Convenience:* Generate a portable copy of your `Food Record` or personalised consumption reports"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "with a single command anytime, anywhere."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *User-Friendly Software Interface:* Optimise your meal-tracking experience with features that tolerate incomplete"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "search inputs, produce fast responses and suggestions."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Performance:* Enjoy a smooth and fast workflow, powered by a combination of a robust"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Command Line Interface (CLI) and an objectively clear Graphical User Interface (GUI). +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "As you can see, Calgo\u0027s features are optimised for you to build healthy eating habits and learn how to keep track of your diet."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d Additional Information"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Before continuing, it may be helpful to familiarise yourself with a few symbols that you will encounter in this User Guide:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This provides you with additional information that should be taken note of."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This informs you of useful tips about Calgo."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Also, as you may be wondering from the previous section, any words that are marked up in this format: `This is an example` refer to technical terms related to Calgo\u0027s implementation."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Check out the list below on how to use this User Guide."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* If you are a first-time user, start from \u003c\u003cQuick Start, *here*\u003e\u003e for instructions for downloading and setting up Calgo."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* If you are unsure of the GUI of Calgo, start from \u003c\u003cGUI, *here*\u003e\u003e to learn what each component of the App is."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* If you are interested to learn about the various features Calgo has, check out the Commands section \u003c\u003cCommands, *here*\u003e\u003e."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* If you are already familiar with Calgo, but need a slight refresher, check out the Command Summary section \u003c\u003cCommandSummary, *here*\u003e\u003e."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".  Download the latest application file named `calgo.jar` link:{repoURL}/releases[over here]."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ".  Copy the `.jar` file to a folder which you will use as the home folder for the Calgo application."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This is where all of your consumption data will be stored as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ".  Double-click the `.jar` file to start the App. The GUI should appear in a few seconds, similar to what is shown in \u003c\u003cgui\u003e\u003e."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": ".An illustration of Calgo on startup"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[[gui]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[reftext\u003d\"Figure 3.1\"]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[caption\u003d\"Figure 3.1: \"]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ". To verify that Calgo is working for you, type your desired command in the command box and press kbd:[enter] to execute it. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Example:* Type *`help`* and press kbd:[enter] to open the `Help Window`, which should look like this: +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".A screenshot of Calgo\u0027s Help Window"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[[helpwindow]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[reftext\u003d\"Figure 3.2\"]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[caption \u003d \"Figure 3.2: \"]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "image::Help.png[width \u003d \"790]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ".  Now that Calgo is working perfectly fine, what are you waiting for? Your healthy lifestyle begins now! +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Start experimenting with the commands yourself and experience the convenience Calgo brings."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "- Learn specific details about the various commands Calgo offers by referring to \u003c\u003cCommands, this section\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "- If you need a complete summary of all commands, refer to \u003c\u003cCommand Summary, this table\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "//tag::interpretGUI[]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[[GUI]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d Interpreting Calgo\u0027s Graphical User Interface +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "(by Janice) +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "//placeholder unlabelled image"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ".A labelled illustration of Calgo on startup"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[reftext\u003d\"Figure 4.1\"]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[caption \u003d \"Figure 4.1: \"]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "image::UiLabelled.png[]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Calgo\u0027s GUI is designed to be sleek and compact, allowing you to use and view all of Calgo\u0027s features on a single window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "However, that might be a little overwhelming at the start. Hence,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "this section aims to give a rundown on the GUI\u0027s various parts and ease you into using the App, starting from the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "top of the GUI shown in the above diagram."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "These sections are labelled from 1 to 8, in the following order:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ". `Menu Bar`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ". `Command Box`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ". `Result Display`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ". `Daily Goal Display`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ". `Consumption Record`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ". `Graph Display`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ". `Food Record`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ". `Status Bar`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "There is  a ninth part, the `Help Window`, that is a separate pop up - only appearing when required for your convenience."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `Menu Bar`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The bar has two buttons, `File` and `Help`. The buttons allow"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "you to exit the App by clicking the exit option under `File`, and to access the command guide by clicking the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": " help option under `Help`. These buttons are there for your convenience, as exiting the app can also be done through the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "`exit` command. Likewise, accessing the command guides can be done using the `help` command."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `Command Box`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Calgo listens to your requests and processes them. The `Command Box` is where you type commands into."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[[TIP]]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Should you mistype a command, Calgo will prompt you to use the right format. You can easily edit the wrong command"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "inside the `Command Box` without needing to retype it entirely."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `Result Display`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This is where Calgo displays textual updates as a result of processing your inputted commands. The `Result Display` will"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "always show a response so you will know whether your commands have been correctly processed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `Daily Goal Consumption`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This section is labelled \"Your Goal Information\" on the GUI, and consists of two parts. The left box"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "displays your target daily calorie goal (after you\u0027ve set it using the `goal` command). The right box shows"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "the amount of calories you still need to consume to meet your daily goal, or the amount you\u0027ve exceeded by."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `Daily Goal Consumption` updates automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `Consumption Record`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `Consumption Record` displays the list of `Food` entries that you have consumed on that day. Although it only shows"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "one day\u0027s consumption, the `stomach` command lets you view other days\u0027 records."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "It has three subsections:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ". The name of the `Food` entry."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ". The number of portions of the `Food` you consumed that day."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ". The average rating as set by you, color-coded from red to green for low to high rating."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `Graph Display`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This section contains a graph that shows a summary of your past seven day\u0027s total calorie consumption. It displays data"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "starting from the date of the current `Consumption Record`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example: `Consumption Record` currently shows 2020-04-12. `Graph Display` will thus show the daily calories consumed from"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "2020-04-06 to 2020-04-12."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `Food Record`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This is a list of all `Food` entries you currently have in Calgo. Each `Food` entry will have a name, its nutritional"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "information, and optional tags as set by you. The `Food Record` alternates colors between entries so that you"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "can easily tell one entry apart from its neighbours."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `Status Bar`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This bar shows where Calgo reads system data from. You should not delete or modify these files."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "//end::interpretGUI[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[[Commands]]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d Commands"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "In this section, specific information about each command will be explained. This includes the purpose of each command,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "how it is formatted and visual examples of its usage."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Before we begin, do take note of the following information which applies to all Calgo commands:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Command Format Information*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* Words in `UPPER_CASE` are parameters that you should provide."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** *Example:* In `n/NAME`, `NAME` is a parameter. `n/kiwi` would mean that the name of the `Food` is \u0027kiwi\u0027."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* Parameters in square brackets (i.e. []) are optional."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** *Example:* In `[t/TAG]`, `TAG` is an optional parameter which can be used as `t/fruit` to tag the `Food` as a \u0027fruit\u0027."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* Parameters can be given in any order, as long as the correct prefix appears before the parameter."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** *Example:* If a command specifies `n/NAME p/PROTEIN`, then entering `p/PROTEIN n/NAME` also gives the same functionality."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* Parameters with ellipses (`…`)​ after them can be used zero or more times."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** *Example:* For `[t/TAG]...` the following are valid:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- Leaving the parameter empty."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- Typing `t/favourite` with one tag."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- Typing `t/favourite t/green` with two tags."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- Typing with more than 2 tags."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "TIP: As you key in the name of the `Food` for any of the following commands: `update`, `delete`, or `nom`, the `Result Display`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "will show suggestions for `Food` entries based on what you have typed."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Never make spelling mistakes again!"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The following subsections will elaborate on the specific details of Calgo commands."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "// tag::clearCommandUG[]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `clear` : Clearing all entries"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "(by Vineeth)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "If you want to clear all the `Food` entries currently stored in your `Food Record`, this command will be useful to you."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The data in your `Consumption Record` and `Graph Display` will not be affected from executing the `clear` command."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "To cater to fast typists who are more likely to make typing mistakes, Calgo will still execute this command even if there are"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "other parameters or words that are typed after `clear`. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Format: `clear` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Suppose that you want to drastically improve your diet. You decide to take a look at all of your `Food` entries"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "currently in the `Food Record` but realise none of them fit into your new diet."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "To avoid the hassle of deleting each `Food` entry one by one, you decide to `clear` them. This is what you need to do:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::ClearCommandBefore.png[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "First, type `clear` and then press kbd:[enter], as shown in the above diagram."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::ClearCommandAfter.png[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Upon entering the command, all your `Food` entries in the  `Food Record` will be deleted. This will result in an empty `Food Record`, as shown above."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "As mentioned previously, your data in the `Consumption Record` and `Graph Display` is left unchanged."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "// end::clearCommandUG[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "// tag::deletecommand[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d `delete` : Deleting a `Food` from current `Food Record`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "(by Zhang Xian)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "If you no longer require Calgo to store a particular `Food` and its nutritional values for you, you can use the `delete` command"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "to remove the specified `Food` from your `Food Record`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "The `Food` that you wish to `delete` must already exist in the current `Food Record`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "For your convenience, the `NAME` field of your input for the `delete` command is case insensitive. Therefore, `n/Pizza`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "and `n/pizza` are treated by Calgo as the same `Food`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Format: `delete n/NAME`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Say you want to remove a `Food`, `Pizza`, that already exists in your `Food Record`. This is how you can do it:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::DeleteCommandBefore.png[]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ray-97"
        },
        "content": "You should first enter `delete n/pizza` as input, and press kbd:[enter]. Note that `delete n/Pizza` also has the same effect."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::DeleteCommandAfter.png[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Once the command has been entered, the `Result Display` shows the results of your command and the `Food Record` no longer shows"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "a `Food` entry for `Pizza`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "// end::deletecommand[]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `exit`: Closing Calgo"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "If you want to exit the App, you can use the `exit` command."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "All your data is automatically saved upon"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "exiting Calgo."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "// tag::exportfoodrecord[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `export` : Exporting the current `Food Record` into a reference sheet"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "(by Eugene) +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Obtaining a portable copy of the current `Food Record` may be useful for various purposes. For instance, you can"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "conveniently share your `Food` entries with friends, print the `Food Record` for future reference, or even adapt it to"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "suit your personal cooking needs in the kitchen. Whatever the purpose, we have you covered with the `export` command. +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `export` command provides you with a neatly formatted, editable file that reflects all entries in the current `Food Record`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This file (named FoodRecord.txt) will be created in the `data/exports` folder. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Here are some key pointers for using the command:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* FoodRecord.txt shows the `Food Record` in alphabetical order of `Food` names, and includes the corresponding details"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "of each `Food` neatly in a table."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* If a previous FoodRecord.txt file exists, do close any instances of the file (if previously opened) before running the"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": " `export` command. The file will be replaced by an updated version representing your latest `Food Record`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* Tags are placed outside of the dashed lines."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This lets you manually track your diet using a reference sheet of your past `Food` entries. You can freely edit this"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "reference sheet to include information outside of Calgo. +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Certain `Food` names may be too long to fit into the given space. Such names will be shown on multiple lines."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "However, rest assured that all your information is still captured and neatly organised."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Individual entries will also appear on separate lines."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Format: `export` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "(any parameters entered are ignored)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Let\u0027s suppose you wish to export the current `Food Record` so that you can print a copy for reference while cooking. Here\u0027s how you can do it:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::ExportCommandBefore.png[]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "You should type in the command and press kbd:[enter], as seen above."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::ExportCommandAfter.png[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Doing so, Calgo  will show you a result message indicating the copy has been successfully generated."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "You can find this copy (named FoodRecord.txt) in the `data/exports` folder."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "// end::exportfoodrecord[]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "// tag::findcommand[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[[FindCommand]]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `find` : Finding a `Food` entry by nutritional value or keyword(s)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "(by Eugene) +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "When you have many entries in the `Food Record`, it may be rather difficult to search for a particular one."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This is where the `find` command comes in nicely."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `find` command shows all `Food` entries that have a nutritional value matching what you specify. This can be the"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "number of calories, or the number of grams of protein, carbohydrate or fat."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Alternatively, you can choose to search for a keyword which appears in any part of the name or in one of the tags"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "associated with a particular `Food` entry."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* The `find` command takes in one, and only one parameter."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* For finding via nutritional value, only `Food` entries with the same value will be shown."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* You don\u0027t have to capitalise keywords. The search is always case insensitive when searching for keyword(s) via name or tag. +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* You don\u0027t actually have to type out the entire keyword either. For your convenience, incomplete keywords will be matched"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "to `Food` entries containing them in any part of the specified parameter of name or tag. +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* You can search for multiple name keywords by using a single `n/` `Prefix`, separating them with space(s). +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "If you\u0027re a fast typist, fear not! We understand the possibility that typing errors can be made quite often, so any"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "additional input for the `find` command without a preceding `Prefix` (e.g. `n/`, `p/`) will be ignored."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `Food Record` displays the relevant entries of each `find` command. We can reset the `Food Record` to show all"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "entries once again using the \u003c\u003cListCommand, `list`\u003e\u003e command."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Format: `find [n/NAME] [cal/CALORIES] [p/PROTEINS] [c/CARBOHYDRATES] [f/FATS] [t/TAG]` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "(Reminder: choose only 1 parameter)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example 1: Say you want to use Calgo to search for a `Food` entry with 150 calories because you are"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "looking for a light snack. Here is how you can do it:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::FindCommandCalorieBefore.png[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "You should type `find cal/150`, then press kbd:[enter]. +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::FindCommandCalorieAfter.png[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Once the command has been entered, the `Result Display` shows the results of your command and the `Food Record`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "displays the relevant entries with 150 calories."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example 2: Say you wish to find entries which contain the keyword `Cheese` in their name, but your hand slipped and"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "the keyboard only typed `Chees`. This is what happens: +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::FindCommandSubstringBefore.png[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "You are likely to enter `find n/Chees` as the command input. +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::FindCommandSubstringAfter.png[]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Once the command has been entered, the `Result Display` shows the results of your command and the `Food Record` shows"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "the relevant entries which contain `Chees` in their name. This is not too bad, as you still obtain entries that will"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "be largely relevant to `Cheese`. This shows that the `find` command can search for `Food` entries"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "with incomplete keywords."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example 3: Say you are lazy but wish to find entries containing the keyword `sweet` in their tag. Here is how you can do it: +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::FindCommandTagBefore.png[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "You can type `find t/swe` as input, and then press kbd:[enter]. +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::FindCommandTagAfter.png[]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Upon entering the command, the `Food Record` will display all entries which have the `swe` keyword present in any one of"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "their tags. As you can search using incomplete keywords, the intended search for the `sweet` tag will also have its result shown. +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Please note that the search is case-insensitive, an example being the resulting `Sweet` tag of `Bandung`. Moreover,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "as with Example 2, we allow for incomplete words to be used as search keywords."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "// end::findcommand[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "//tag::goalCommandUG[]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[[goal]]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `goal` : Setting a daily calorie target"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "(by Vineeth)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "A healthy lifestyle is not achieved overnight. Calgo understands the importance of keeping the end in mind with regards to achieving your healthy lifestyle."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Thus, to motivate you to put in consistent effort, you can set daily calorie goals for yourself using the `goal` command."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "****"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* The goal that you set will be used to generate insights in your consumption report. For more information related to that, you check out the `report` command \u003c\u003creport, here\u003e\u003e."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* After setting a daily calorie goal, you can still change it whenever you want to. All Calgo insights will subsequently update so that they are based on your most current goal."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "****"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Acceptable values are positive integers, ranging from 1 to 99999."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Format: `goal GOAL`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Let\u0027s suppose you are a young adult who is trying to lose weight because your favourite jeans have become too tight."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "You search online for the ideal number of calorie you should consume daily to lose weight. A credible online source states"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "it should be 1900 calories. Now, you want to reflect that daily calorie goal in Calgo. You can do that by following this simple step:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "image::GoalCommandBefore.png[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Type in `goal 1900` and press kbd:[enter], as shown above. +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::GoalCommandAfter.png[]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "As you can see, the `Daily Goal Display` has updated to reflect your daily calorie goal. You can now track your meals"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "and get immediate updates on the remaining amount of calories you have to consume for that day to achieve your goal."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "//end::goalCommandUG[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "// tag::helpCommand[]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `help` : Displaying `help` when lost"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "(by Janice)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Whether you are an experienced Calgo user or a newcomer to the App, it can be hard to remember what a command\u0027s usage and format"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "is. Thus, the `help` command aims to remind you of them."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* The `help` command displays all available commands, in alphabetical order."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* If you want to find out more about a specific command, `help` can used with a keyword."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- This keyword is the name of the command you want to know more about."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Format: `help [COMMAND_WORD]`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Let\u0027s say you\u0027ve forgotten how to add `Food` entries to your `Consumption Record`. You know there is a command called `nom`,"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "but don\u0027t recall its format. You can use the `help` command to obtain the format like so:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::HelpCommandBefore.png[]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Type `help`, then press kbd:[enter]."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::HelpCommandPopup.png[]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This creates a popup (the `Help Window`) with command guides. However that displays all the commands, which might make searching for only"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "`nom` a bit daunting. Instead, you can type `help nom`, then press kbd:[enter]."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::HelpCommandWithNomBefore.png[]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "As you can see, the `Help Window` popup now only shows the command guide for `nom`."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::HelpCommandWithNomPopup.png[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "// end::helpCommand[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "// tag::listcommand[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[[ListCommand]]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `list` : Listing all `Food` in current `Food Record`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "(by Eugene) +"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "With a large number of entries in the `Food Record`, you may remember that we can use the \u003c\u003cFindCommand, `find`\u003e\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "command to display only the relevant `Food` entries. Once we are done with the search, we will eventually want to"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "view all entries again. This is where the `list` command comes in handy. +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The `list` command resets the display accordingly to show all entries in the `Food Record`. These entries will be neatly sorted,"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "just as the `Food Record` previously appeared:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "****"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* All entries will appear in lexicographical order."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* `Food` entries will once again be listed with all their corresponding details."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "****"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "You can think of this as the reverse of a \u003c\u003cFindCommand, `find`\u003e\u003e command."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "After a `find` command, you are advised to complete your intended actions first, before using the `list` command to"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "reset the display. This allows for a smoother workflow as you will now avoid the need to perform the same `find` command again."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Format: `list` +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "(any parameters entered are ignored)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Let\u0027s say you want to view all entries again after performing a `find n/Chicken` command. You can do the following:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::ListCommandBefore.png[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Type `list` as input, then press kbd:[enter]."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::ListCommandAfter.png[]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The `Result Display` will then indicate the result of your command, and the `Food Record` will now show all `Food` entries once again."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "// end::listcommand[]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `nom` : Adding `Food` to `Consumption Record`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "(by Ruicong)"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Your `Consumption Record` stores everything that you have consumed."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "With the `nom` command, you can add `Food` that you have consumed on a certain day to your"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "`Consumption Record`. +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `nom` command helps you to keep track of your consumption on certain date. +"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Below is some information to keep in mind:"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "****"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* The `Food` you consume should exist in `Food Record`."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* Date follows yyyy-mm-dd format."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* The `nom` command has some default behavior when you choose to not provide values for certain `Prefixes`. Do note that"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "this is not the same as excluding optional parameters."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* The following are the default behaviors:"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- If you do not provide the date, or if its `Prefix` does not have a value,"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Calgo will by default take it that you consumed the `Food` today."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- If you do not provide the portion, or if its `Prefix` does not have a value,"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Calgo will by default take it that you consumed 1 portion of `Food`."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- If you do not provide the rating, the consumption of `Food` will not have a rating associated with it."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "However, if you do not give the `Prefix` a value, you will get an error."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* The rating for a `Food` displayed is based on the average rating given to the `Food` on that day."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "****"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "As you enter `nom n/..`, Calgo will show you `Food` suggestions that match what you are searching for in the `Result Display`."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Names in Calgo are case insensitive, so you can type quickly without worrying about the specific name of the `Food`."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "If you have planned to eat something at a future date, you can use `nom` to record a consumption"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "with a date that comes after today."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Format: `nom n/NAME [d/DATE] [portion/PORTION][r/RATING]`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Suppose you want to have a Cheeseburger today and have already stored its nutritional content"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "in `Food Record`. Since you just want to dig in as soon as possible, yet still want to jot your meal down,"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "you decide to enter the simplest command possible. Here\u0027s how you do it:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::NomCommandBefore.png[]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "First, enter `nom n/Cheeseburger` as input and press kbd:[enter]."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::NomCommandAfter.png[]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Once you enter the command, the `Result Display` will inform you that the food has been consumed."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `Consumption Record` panel and `Graph Display` are updated to reflect your latest consumption."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "//tag::reportCommandUG[]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[[report]]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d `report` : Generating key statistics and insights"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "(by Vineeth)"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Why stop at keeping track of your meals? Go a step further and use your past consumption patterns"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "to learn how to improve your eating habits. Moreover, won\u0027t it be convenient if you can automatically generate tips on how to improve?"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This is exactly what the `report` command can help you with!"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Given a date, the `report` command analyses your consumption pattern in that day to generate relevant statistics and"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "helpful insights for improving your diet. You no longer have to tediously calculate the total amount of calories you consumed in a day. Calgo does it for you, instantly!"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The document generated by the `report` command is stored in the `data/reports` folder. This document is named after the given date in this format: yyyy-mm-dd_report.txt. For instance, if you generate a report on 27th of April 2020, the generated document is 2020-04-27_report.txt."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "To generate more insightful suggestions, do set a daily calorie goal before generating the report. To learn how to do that,"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "check out the `goal` command \u003c\u003cgoal, here\u003e\u003e."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Refer to the list below for the various types of insights that you can easily obtain from the `report` command."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "****"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* All `Food` consumed on the given date. For each `Food` entry, the following information will be included:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** The name of the `Food`."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Quantity consumed. For instance, 1.5 portions."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Number of calories consumed."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* The total number of calories consumed in that day."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* The total number of grams of protein, carbohydrate and fat consumed on that day."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* Insights on whether you have achieved your goal."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* Insights on what your favourite `Food` is and whether it should continue to be in your diet."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "****"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Format: `report d/DATE`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "When entering the `report` command, do note there is a default behaviour for the `DATE` prefix. If you do not provide the date, or if its `Prefix` does not have a value,"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Calgo will by default take it that you intend to generate a report based on today\u0027s date."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Let\u0027s suppose you had a buffet on 27th of April 2020 and you managed to `nom` lots of exciting `Food` into your"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "`Consumption Record`. It is now the end of the day and you want to look back and find out how you fared. This is what you can do:"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::ReportCommandBefore.png[]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "First, type `report d/2020-04-27` and press kbd:[enter], as shown above."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::SampleReport.png[]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Second, go to the `data/reports` folder and open 2020-04-27_report.txt. You will"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "see a report that looks similar to the one in the above screenshot."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The following steps breakdown what information is included in each section of the report."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::ReportHeader.png[]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The first section is the `Report Header`, which states the date of your consumption pattern that is being analysed in the report. In this case,"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "your food consumption pattern on the 27th of April 2020 is analysed in the displayed report screenshot."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::ReportGoalInfo.png[]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The second section is `Your Goal Information`. This section reminds you of the daily calorie goal that you have set for yourself."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::ReportFoodwiseStatistics.png[]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The third section is `Food-wise Statistics`. As the name suggests, this section provides you with relevant statistics for every `Food` entry in your `Consumption Record` of the given day."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "In this case, you can see a variety of `Food` entries that you have tracked from your buffet experience. For each `Food` entry, the report displays the name of the `Food`, the total number of portions you consumed and the total amount of calories from that `Food`."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "You can use this information to realise what `Food` you may be over-consuming."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::ReportAggregateStatistics.png[]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The fourth section is `Aggregate Statistics`, which shows you the total amount of calories, protein, carbohydrates and fat that you have consumed on the given day."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "This section could be particularly helpful if you are interested in tracking your total nutritional intake each day."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::ReportInsights.png[]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The fifth section is called `Insights for You`. In this section, Calgo uses your daily calorie goal to explain how close you were to achieving it."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "For you to continually improve your eating habits, Calgo, like any other friend, pushes you with motivating messages and congratulates you if you achieved the goal."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "In this case, as you exceeded the daily calorie goal by 959 calories, Calgo provides you with some reassurance that you can do better the next day to ensure that you do not give up."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::ReportSuggestions.png[]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The penultimate section is `Suggestions for You`. In this section, Calgo analyses your `Consumption Record` of the past week from the given date to find out what you can do to improve your eating habits."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Calgo does this by using a mix of your ratings and quantity consumed of each `Food` to intelligently infer what your favourite `Food` is. It then analyses if you can continue to keep your favourite `Food` in the past week in your diet based on your daily calorie goal."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Over time, through Calgo\u0027s smart suggestions, you will eventually have a diet consisting of your favourite `Food` entries that are compatible with your goal. How awesome is that!"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::ReportFooter.png[]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The final section is the `Report Footer`, which informs you that the report has concluded. This is the part where you realise that Calgo provides you with so many key insights in such a neatly organised and compact document."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "//end::reportCommandUG[]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `stomach` : Showing all `Food` consumed on a particular day"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ray-97"
        },
        "content": "(by Ruicong)"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Do you find it a hassle to constantly recall what you ate? Can\u0027t seem to remember what you had for lunch last week? +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "You can now remember everything, because Calgo remembers for you. The `stomach` command displays all of the `Food` you ate on a"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "particular day, showing it in the `Consumption Record`."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ray-97"
        },
        "content": "[tip]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "For a more detailed statistical report with nutritional values of `Food` consumed, you can refer to"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "the section on the `report` command \u003c\u003creport, here\u003e\u003e."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "****"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* Calgo uses today\u0027s date by default if no value is given for its `Prefix`."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* Date follows yyyy-mm-dd format."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "****"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Format: `stomach [d/DATE]`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example: If you want to see what you have consumed on 12 April 2020, here\u0027s how you can do it:"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::StomachCommandBefore.png[]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Type the command `stomach d/2020-04-12` as input and press kbd:[enter]."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::StomachCommandAfter.png[]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `Consumption Record` will display all the `Food` you have consumed on 12 April 2020."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "You can also see that `Daily Goal Display` has updated to show the amount of calories you have consumed on 12 April 2020,"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "relative to your daily goal."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "// tag::updatecommand["
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `update` : Updating Calgo\u0027s `Food Record`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "(by Zhang Xian)"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Tired of searching for nutritional information online for the same food repeatedly? Frustrated of having no convenient place to note it down?"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `update` command allows you to enter new `Food` entries into Calgo\u0027s `Food Record`. Moreover, as a smart feature, Calgo detects if"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "there is an existing `Food` entry with the same name. If so, it will edit that `Food` entry with new information provided by you."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "****"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* All of Calgo\u0027s `Food` entries have unique names."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* Calgo automatically formats name inputs to proper case. Therefore it does not matter whether you input a name in"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "upper or lower case."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- For instance, updating a `Food` with name `chicken nugget spicy` will result in the `Food` being saved as `Chicken Nugget Spicy` in the `Food Record`"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "****"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "We suggest you to be as specific as possible in naming your `Food`."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Instead of naming your `Food` \"Chocolate\", perhaps \"White Chocolate\" or \"Dark Chocolate\" would be a better idea."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Format: `update n/NAME cal/CALORIES p/PROTEINS c/CARBOHYDRATES f/FATS [t/TAGS]`"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example 1: Suppose you want to create a `Food` entry for Mee Goreng in Calgo. After searching online for the"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "nutritional values for Mee Goreng, you found that Mee Goreng has 418 calories, 8g of protein, 58g of carbohydrate and 17g of fat."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Here\u0027s how you update your new `Food`, Mee Goreng, into your `Food Record`:"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::UpdateCommandNewBefore.png[]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "You should type `update n/Mee Goreng cal/418 p/8 c/58 f/17` and press kbd:[enter]."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::UpdateCommandNewAfter.png[]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Once the command has been entered, the `Result Display` shows the result of your command and the `Food Record` has been updated with a new `Food`, Mee Goreng."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example 2: Perhaps you realised that there was an error with the nutritional values keyed in for an existing `Food`, Mee Goreng, inside your `Food Record`."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "You wish to `update` the protein value for Mee Goreng to a new value of 10g. This is how you can do it:"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::UpdateCommandExistingFoodBefore.png[]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Type `update n/Mee Goreng cal/418 p/10 c/58 f/17` as input and press kbd:[enter]."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::UpdateCommandExistingFoodAfter.png[]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Once the command has been entered, the `Result Display` shows the result of your command and the `Food`, Mee Goreng, in"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "`Food Record` has been updated with a new protein nutritional value of 10g."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example 3: Suppose you want to `update` a new `Food`, Char Kuay Teow, into the `Food Record`. However, you typed the"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "name of the `Food` in hurry and did not capitalise some letters properly."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Instead of \"Char Kuay Teow\", you accidentally typed \"char KUay TeoW\" in the name field. You can do this:"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::UpdateCommandCapitaliseBefore.png[]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "You can then type `update n/char KUay TeoW cal/200 p/20 c/22 f/30 t/greasy` and press kbd:[enter]."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::UpdateCommandCapitaliseAfter.png[]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Calgo automatically formats the name of your `Food` for you to proper case. Hence, you"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "see that instead of a hideous \"char KUay TeoW\""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "being updated into the `Food Record`, your new `Food` item is updated as \"Char Kuay Teow\"."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "// end::updatecommand[]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d\u003d `vomit` : Removing portions of `Food` from `Consumption Record`"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "(by Ruicong)"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "If you have overstated an amount previously (or actually vomited from over-consumption), you can amend existing"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "consumption records using the `vomit` command."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `Food` that you wish to `vomit` must already exist in the current `Consumption Record`,"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "but not necessarily exist in the `Food Record`."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "****"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* The `vomit` command deletes a portion of food at the specified index. This index refers to the position of `Food` shown in"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "the `Consumption Record`. The index should be a positive integer: 1, 2, 3, ..."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* Date follows yyyy-mm-dd format."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* The `vomit` command has some default behavior when you choose to not provide values for certain `Prefixes`. Do note that"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "this is not the same as excluding optional parameters."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- If you do not provide the date, or if its `Prefix` does not have a value,"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Calgo will by default take it that you `vomit` today."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- If you do not provide the portion, or if its `Prefix` does not have a value,"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Calgo will by default take it that you wish to `vomit` the whole portion `Food`, resulting in the deletion of that entire entry."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "- If you specified a portion greater than what you have consumed, the entire entry will be deleted as well."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* Using `vomit` on a portion of food will not affect its ratings."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "If you gave a rating by mistake, you can use the `undo` command,"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "which will be available from version 2.0 onwards."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "****"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Format: `vomit num/INDEX [d/DATE] [portion/PORTION]`"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Example: Let\u0027s say you ordered a glass of Bandung and previously used `nom` with `PORTION` set to 1."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "However, because the drink was too sweet, you only finished half a glass, you can use `vomit` to adjust your"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "`Consumption Record`. Here\u0027s how you can do this:"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::VomitCommandBefore.png[]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "You should enter `vomit num/1 portion/0.5`, then press kbd:[enter]."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "image::VomitCommandAfter.png[]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "As you can see from the `Consumption Record` panel, the portion has been reduced to 0.5."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "The `Graph Display` also reflects a drop in calories."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Q*: How do I transfer my Calgo data to another Computer? +"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*A*: Install Calgo in a folder inside the target computer and copy over your current `data` folder into that folder."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Q*: Where can I find my exported `Food` entries and consumption reports? +"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*A*: They are both found in the `exports` and `reports` subfolders in the `data` folder respectively. Please do not"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "remove the json files in the `data` folder. These are system files."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Q*: How can I save the data I keyed into Calgo? +"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*A*: Calgo’s data is automatically saved into the computer after any command that changes the data. Manual saving isn\u0027t needed."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Case-insensitive*: Upper-case letters and lower-case letters are treated in the same manner."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Command Line Interface (CLI)*: Text-based user interface used to view and manage computer files."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Command*: Instruction to be performed by Calgo to achieve a desired result."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Consumption Record*: GUI component that shows Food entries consumed on a particular day"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Date*: A specific day on the calendar."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Food Entry*: A food item that contains name, amount of calories, total grams of protein, carbohydrate and fat."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "It can also contain optional tags."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Food Record*: GUI component that shows Food entries and their respective nutritional information"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*Goal*: Daily calorie goal set by the user."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Graphical User Interface (GUI)*: A visual interface by which users can interact with Calgo with."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Index*: The number beside the name of the corresponding `Food` entry in the `Consumption Record`."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Nutritional Information*: Refers to calories, proteins, carbohydrates and fats."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Portion*: A number that describes the quantity of food"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Prefix*: A set of characters placed before a parameter when entering a command"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Report*: Refers to the document generated by the `report` command."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Result Display*: A GUI Component that shows the outcome message after a command is executed."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Search Keyword*: The user input to find matches for during a search."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Tag*: A single word that describes a food item."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*Proper Case*: A format where words have all their first letters capitalised. (This Is An Example Of Proper Case)."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "[[CommandSummary]]"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"17%,\u003c18%,\u003c20%,\u003c25%,\u003c20%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|Command Category|Command Name|Function|Format|Example (if applicable)"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ".3+|Navigate App|Exit|Exits the app.|`exit`|-"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "|Goal|Sets your daily calorie goal.|`goal GOAL`|`goal 2500`"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|Help|Displays a guide for all commands. Can also display only commands containing the given command word."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    |`help [COMMAND_WORD]`|`help` +"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     *OR* +"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     `help nom`"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ".3+|Edit `Food Record`|Clear|Clears all `food` entries from Calgo. Note that data in `Consumption Record` is not deleted.|`clear`|-"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|Delete|Deletes the specified `Food` from the Calgo.|`delete`|`delete n/pizza`"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|Update|Updates a `Food` in Calgo.|`update n/NAME cal/CALORIE p/PROTEIN c/CARBOHYDRATE f/FAT [t/TAG]`"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    |`update n/pizza cal/200 p/10 c/200 f/200` +"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    *OR* +"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    `update n/pizza cal/100 p/10 c/100 f/30 t/Italiano t/Favourite`"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ".2+|Navigate `Food Record`|Find|Searches through the Calgo\u0027s `Food` entries and displays relevant ones based on the specifications entered."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    |`find [n/NAME] [cal/CALORIE] [p/PROTEIN] [c/CARBOHYDRATE] [f/FAT] [t/TAG]` (choose only 1 parameter)"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    |`find n/piz hotdog` +"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    *OR* +"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    `find n/Pizza` +"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    *OR* +"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    `find cal/110` +"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|List|Displays all current entries inside the `Food Record`.|`list`|-"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ".3+|Edit and Navigating `Consumption Record`|Nom|Adds a `Food` to a specific day\u0027s `Consumption Record`.|`nom n/NAME [d/DATE] [portion/PORTION][r/RATING]`"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    |`nom n/chicken d/2020-03-04 portion/1.5 r/8`"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|Stomach|Displays all `Food` in a particular day\u0027s `Consumption Record`.|`stomach [d/DATE]`|`stomach d/2020-04-20`"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|Vomit|Deletes a specific `Food` from the `Consumption Record`.|`vomit num/INDEX [d/DATE] [portion/PORTION]`"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    |`vomit num/1 d/2020-03-04 portion/3` +"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    *OR* +"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    `vomit num/1` +"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    *OR* +"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    `vomit num/1 d/ portion/`"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ".4+|Generate Document|Report|Generates consumption report for a given date.|`report d/DATE`|`report d/2020-04-20`"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|Export|Generates a neat and editable file containing the current `Food` entries.|`export`|-"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Please note the following: +"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* For the `clear`, `export`, and `list` commands, any parameters entered will be ignored. +"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* For the `find` command, only one parameter is accepted. Any input entered without a preceding `Prefix` will be ignored."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* For commands that have date parameters, they are to be in the format YYYY-MM-DD."
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 447,
      "buddhavineeth": 233,
      "ray-97": 27,
      "eugenetyc": 114,
      "jeremylow97": 60,
      "-": 90
    }
  },
  {
    "path": "docs/team/buddhavineeth.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d Vineeth Buddha - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d PROJECT: Calgo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "This portfolio page highlights some of my contributions to Calgo - a Software Engineering project developed in my second year of undergraduate studies in the National University of Singapore."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d About the Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "We are 5 Year 2 Computer Science undergraduates reading CS2103T: Software Engineering."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d\u003d\u003d About the Project"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Calgo is an all-in-one personal meal tracking assistant which seeks to encourage a healthy lifestyle among its users. It allows users to not only have a convenient nutritional record of all their favourite food entries, but also track, monitor, and plan their food consumption. Moreover, the team has come up with a plethora of user-centric features to make Calgo well-suited to provide users with both convenience and utility."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "My team was tasked with morphing an existing https://github.com/nus-cs2103-AY1920S1/addressbook-level3[Address Book Level 3 (AB3) project] into a new product via Brownfield software development."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "We were therefore required to use the existing AB3 project as Calgo\u0027s project foundation, to create a desktop application supporting the Command Line Interface. This was to target users who prefer typing but also enjoy the benefits of a Graphical User Interface."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "With all of us being food lovers and realising a greater societal need for healthy eating, Calgo was born."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* *Major enhancement*: I implemented the *generation of useful statistics and key insights* via the `report` command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** What it does: The feature provides the user with a statistical summary of the food he/she has consumed on a given day. It also generates personalised insights on how the user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "can improve his/her eating habits and whether his/her favourite food item should continue to be part of the diet."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Justification: The feature improves Calgo significantly because a user can now go beyond just tracking his/her daily meal consumption. The user can now obtain insights on"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "how to improve their eating habits and find out the food that contributes the most to their daily calorie count. They also no longer have to spend lots of time calculating the nutritional content they consumed in a day because"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "the statistics section does that for them instantly. This makes Calgo much more than a meal tracker. It helps the user build a healthy lifestyle through eating."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Highlights: This enhancement requires an in-depth understanding of the Logic and Model components\u0027 architecture and a good understanding of String formatting. It also makes use of a sophisticated sorting mechanism"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "to decide what the favourite food of the user is in the past week."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* *Major enhancement*: I also implemented the `goal` command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** What it does: The feature helps the user to set a daily calorie goal. This goal is also reflected in Calgo\u0027s GUI, so that the user is always reminded of how many calories he/she is left with whenever they consume food."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Justification: Our target user is health-conscious and wants to build a healthy lifestyle. As that is a vague goal, it often is hard to achieve. That is why the `goal` command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "is created, to help the user set clear objectives for each day and chunk their big long-term goal of eating healthily into smaller daily goals. This allows them to see noticeable progress too and is motivating. The goal is also"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "used to generate personalised insights in the abovementioned `report` command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Highlights: For this enhancement, I worked on the front-end, back-end logic, storage of the goal and unit testing as well. This required a deep understanding of all aspects of the project."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* *Minor enhancement*: I helped in the redesigning of the GUI by adding the Goal Displays, Remaining Calorie Count Display, creating labels and helping Janice with"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "the graph feature."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "* *Code contributed*: You can view my functional code and test code contributions to Calgo https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dbuddhavineeth\u0026tabRepo\u003dAY1920S2-CS2103T-F11-1%2Fmain%5Bmaster%5D[here]."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*** As the in-charge of Deadlines and Deliverables, I ensured the team was on task and was putting in consistent effort. I also managed all releases `v1.1` - `v1.4` (4 releases) on GitHub. https://github.com/AY1920S2-CS2103T-F11-1/main/releases[1]."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*** I maintained the team\u0027s GitHub issue tracker and set up project dashboards and ensured everybody was assigned at least one user story to work on. Furthermore, the user stories were split into multiple milestones to ensure we worked incrementally. https://github.com/AY1920S2-CS2103T-F11-1/main/milestones?state\u003dclosed[2]."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*** Contributed to product ideation, brainstorming key features and ensuring that everyone has equal responsibilities."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Team Documentation:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*** Wrote the sections for `clear`, `report` and `goal` commands in Calgo\u0027s User Guide."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/161[#161],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/169[#169],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/171[#171],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/288[#288]."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*** Wrote sections for Generating statistics and insights, setting daily calorie goals for Developer Guide. https://github.com/AY1920S2-CS2103T-F11-1/main/pull/161[#161],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/292[#292],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/298[#298]."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*** Vetted through User Guide and Developer Guide. https://github.com/AY1920S2-CS2103T-F11-1/main/pull/307[#307]."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*** Refined Calgo\u0027s team pages to be more user-centric (especially README.adoc). https://github.com/AY1920S2-CS2103T-F11-1/main/pull/133[#133],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/161[#161],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/242[#242],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/277[#277],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/281[#281],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/283[#283],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/292[#292],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/298[#298],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "** Beyond the team:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*** Peer testing and bug reporting:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/1[#1],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/2[#2],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/3[#3],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/4[#4],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/5[#5],"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/6[#6],"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/7[#7],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/8[#8],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/9[#9],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/10[#10],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/11[#11],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/12[#12],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/13[#13],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/14[#14],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "https://github.com/buddhavineeth/ped/issues/15[#15]."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "*** Providing consistent feedback to peer projects on how to enhace their features. For instance, providing advice to"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "Team `F11-3` during tutorials and after the practice demo round."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "include::../UserGuide.adoc[tag\u003dclearCommandUG]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreportCommandUG]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "include::../UserGuide.adoc[tag\u003dgoalCommandUG]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreportCommandDG]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgoalCommandDG]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 85,
      "-": 31
    }
  },
  {
    "path": "docs/team/eugenetyc.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d Eugene Tan Yew Chin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d PROJECT: Calgo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "This portfolio page highlights some of my contributions to Calgo - a Software Engineering project developed in my second year of undergraduate studies in the National University of Singapore."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d About the Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "We are 5 Year 2 Computer Science undergraduates reading CS2103T: Software Engineering."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d About the Project"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "Calgo is an all-in-one personal meal tracking assistant which seeks to encourage a healthy lifestyle among its users. It allows users to not only have a convenient nutritional record of all their favourite food entries, but also track, monitor, and plan their food consumption. Moreover, the team has come up with a plethora of user-centric features to make Calgo well-suited to provide users with both convenience and utility."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "My team was tasked with morphing an existing https://github.com/nus-cs2103-AY1920S1/addressbook-level3[Address Book Level 3 (AB3) project] into a new product via Brownfield software development."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "We were therefore required to use the existing AB3 project as Calgo\u0027s project foundation, to create a desktop application supporting the Command Line Interface. This was to target users who prefer typing but also enjoy the benefits of a Graphical User Interface."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "With all of us being food lovers and realising a greater societal need for healthy eating, Calgo was born."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003d\u003d\u003d\u003d Enhancements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Major enhancement*: I implemented categorical search via the `find` command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** What it does: This allows users to search for `Food` entries by narrowing down on a specific `Food`-related attribute of either `Name`, `Calorie`, `Protein`, `Carbohydrate`, `Fat`, or `Tag`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Justification: Users now have an option to perform refined searches, preventing the need to tediously scroll through the `Food Record`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Highlights: This enhancement requires in-depth understanding of the application\u0027s architecture. A new parser for the `find` command was created to detect different prefixes entered by the user, as with supporting classes to facilitate background workings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Major enhancement*: I implemented the `export` command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** What it does: This allows users to export their current `Food` entries to a portable, neatly formatted editable .txt file. They can now also add their own notes and share their entries."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Justification: This improves user experience as they can now obtain a copy of their `Food` entries for multiple purposes like printing onto paper."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Highlights: This enhancement requires comprehensive understanding of how commands are processed. A new class for the command, as well as supporting classes (such as for table formatting) were created. Moreover, as the `report` command is similar, we applied good OOP practices for better code quality and reuse."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Minor enhancement*: I implemented substring search via the `find` command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** What it does: This allows users to search for `Food` entries by typing incomplete keywords for searching using the `Name` or `Tag` prefixes. Results are entries containing these substrings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Justification: Users no longer have to type the full keyword. Those who are lazy, or happen to enter incomplete keywords can still have their results shown."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Highlights: This enhancement relies on `Predicate` s, as with categorical search above."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Minor enhancement*: I implemented the lexicographical ordering of `Food` objects."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** What it does: This makes the `Food Record` show all entries in lexicographical order."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Justification: It is frustrating to scroll through messy entries."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Highlights: We perform sorting only when Calgo starts up or when new entries are added for efficiency."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "* *Code contributed*: You can view my contributions to Calgo https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003deugenetyc\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003deugenetyc\u0026tabRepo\u003dAY1920S2-CS2103T-F11-1%2Fmain%5Bmaster%5D[here]."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*** Wrote sections for `find`, `list`, `export` of the User Guide: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/117[#117], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/141[#141], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/159[#159], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/160[#160], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/206[#206], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/217[#217], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/223[#223], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/226[#226], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/268[#268], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/272[#272], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/278[#278], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/287[#287]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*** Wrote sections for Storage Component, Searching, Lexicographical Ordering, and Exporting, of the Developer Guide: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/123[#123], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/124[#124], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/141[#141], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/245[#245], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/259[#259], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/272[#272], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/275[#275], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/278[#278], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/287[#287]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*** Miscellaneous contributions: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/65[#65], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/67[#67], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/68[#68], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/89[#89], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/116[#116], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/121[#121], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/165[#165]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Project and team management \u0026 contributions:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*** Morphed AB3 to a minimally functional Calgo: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/89[#89], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/96[#96]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*** Update team pages/documentation: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/40[#40], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/42[#42], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/52[#52], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/65[#65], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/67[#67], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/89[#89], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/117[#117], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/121[#121], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/123[#123], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/124[#124], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/141[#141], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/159[#159], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/160[#160], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/206[#206], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/223[#223]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*** Team lead: facilitated meetings and discussions, standardisation, providing technical help. Also reviewed some PRs: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/288#pullrequestreview-391976279[1], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/271#pullrequestreview-391976983[2]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*** Product ideation, user testing, facilitating issue tracker and milestone management, curating some JUnit tests (e.g. for `find` command)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "** Beyond the team:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*** Peer testing \u0026 bug reporting: https://github.com/eugenetyc/ped/issues/1[#1], https://github.com/eugenetyc/ped/issues/2[#2], https://github.com/eugenetyc/ped/issues/3[#3], https://github.com/eugenetyc/ped/issues/4[#4], https://github.com/eugenetyc/ped/issues/6[#6], https://github.com/eugenetyc/ped/issues/7[#7], https://github.com/eugenetyc/ped/issues/8[#8], https://github.com/eugenetyc/ped/issues/9[#9], https://github.com/eugenetyc/ped/issues/10[#10], https://github.com/eugenetyc/ped/issues/11[#11], https://github.com/eugenetyc/ped/issues/13[#13], https://github.com/eugenetyc/ped/issues/14[#14], https://github.com/eugenetyc/ped/issues/15[#15], https://github.com/eugenetyc/ped/issues/16[#16], https://github.com/eugenetyc/ped/issues/17[#17]."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "*** Contributed to forum discussions (examples: https://github.com/nus-cs2103-AY1920S2/forum/issues/29[1], https://github.com/nus-cs2103-AY1920S2/forum/issues/109[2], https://github.com/nus-cs2103-AY1920S2/forum/issues/55[3], https://github.com/nus-cs2103-AY1920S2/forum/issues/56[4], https://github.com/nus-cs2103-AY1920S2/forum/issues/50[5], https://github.com/nus-cs2103-AY1920S2/forum/issues/52[6], https://github.com/nus-cs2103-AY1920S2/forum/issues/28[7], https://github.com/nus-cs2103-AY1920S2/forum/issues/54[8])"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users. Please note that some hyperlinks may not work as the guide is not part of this portfolio._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfindcommand]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexportfoodrecord]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistcommand]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project. Please note that some hyperlinks may not work as the guide is not part of this portfolio._"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstoragecomponent]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcategoricalsubstringfindsearch]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlexicographicalordering]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexportfoodrecord]"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 62,
      "-": 30
    }
  },
  {
    "path": "docs/team/j-dan23.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d Janice Ong Yi Wen - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d PROJECT: Calgo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "This portfolio page highlights some of my contributions to Calgo - a Software Engineering project developed in my second year of undergraduate studies in the National University of Singapore."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d About the Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "We are 5 Year 2 Computer Science undergraduates reading CS2103T: Software Engineering."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003d\u003d About the Project"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "Calgo is a personalised calorie and meal tracker application, morphed from the existing https://github.com/nus-cs2103-AY1920S1/addressbook-level3[Address Book Level 3 (AB3) project] code base. My team was tasked with morphing it via Brownfield software development into a new application, while still maintaining its original Command Line Interface (CLI) nature and the majority of the code architecture."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "It is difficult to maintain a balanced diet if you greatly enjoy food. Thus, we created Calgo to solve that issue. Calgo aims to aid seekers of a healthy lifestyle in adhering to a consistent daily dietary goal by increasing the convenience of tracking their daily meals. Calgo can keep track of nutritional information of the food users eat, monitor their daily caloric consumption to ensure they are meeting their goals, and summarises all these into portable insights for even more convenience."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Major enhancement*: I improved *the ability to for users to obtain guidance on the usage and format of Calgo commands.*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** What it does: The user can easily refer to a popup `Help Window` should they need a reminder for how the commands work."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** Justification: The initial `help` command requires not only required users to refer to the entire User Guide (UG), it also merely provided a link to the UG. Together, we found both issues very overwhelming and inconvenient. Thus, the `help` function provides a summarised guide for the commands - removing the tediousness of trawling through the UG."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** Highlights: The user can filter the command guide in `Help Window` to show only the commands they want."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Major enhancement*: I added *the ability to view a summarised graph of daily caloric consumption for the past seven days.*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** What it does: Calgo displays a line graph of daily caloric consumption against the date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** Justification: One of Calgo\u0027s goals is to provide summarised insights for users. The graph enables a visual version of that."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** Highlights: The graph changes its date axis depending on the date of the currently-displayed `Consumption Record`. Users can thus view insights for different sets of seven days."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Minor enhancement*: I modified *the GUI of AB3 to its current state.* (The modification was a team effort, thus this is a minor enhancement due to individual effort amount.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** What it does: This allows Calgo to display all the information we require it to, such as the `Goal Display` and `Consumption Record`. The colors have also been changed to the current theme."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** Justification: The default AB3 GUI does not support displaying all the information Calgo needs. Additionally, the current blue and orange color theme is used to give Calgo a unique aesthetic, different from AB3."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** Highlights: Calgo has a sleek and compact design, yet allows users to view all relevant information at a glance."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "* *Code contributed*: You can view my contributions to Calgo https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dj-dan23\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003deugenetyc\u0026tabRepo\u003dAY1920S2-CS2103T-F11-1%2Fmain%5Bmaster%5D[here]."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** Contributions to team-based tasks:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*** Wrote tests for features: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/214[#214], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/220[#220]."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*** Did bug-fixing for bugs found during mock practical exam: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/212[#212]."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*** Wrote the `GUI interpretation` and `help` sections and did minor editing for the User Guide: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/74[#74], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/77[#77], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/280[#280], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/282[#282], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/284[#284], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/285[#285], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/286[#286], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/289[#289], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/293[#293]."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*** Wrote the `help` command and graph sections, and did minor editing for the Developer Guide: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/78[#78], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/129[#129], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/253[#253], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/261[#261], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/280[#280], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/293[#293]."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "** Beyond the team:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "*** Peer testing \u0026 bug reporting: https://github.com/J-Dan23/ped/issues/1[#1],  https://github.com/J-Dan23/ped/issues/2[#2], https://github.com/J-Dan23/ped/issues/3[#3], https://github.com/J-Dan23/ped/issues/4[#4], https://github.com/J-Dan23/ped/issues/5[#5],  https://github.com/J-Dan23/ped/issues/6[#6], https://github.com/J-Dan23/ped/issues/7[#7], https://github.com/J-Dan23/ped/issues/8[#8], https://github.com/J-Dan23/ped/issues/9[#9]."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users.  Please note that some hyperlinks may not work as the guide is not part of this portfolio._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "include::../UserGuide.adoc[tag\u003dinterpretGUI]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhelpCommand]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project. Please note that some hyperlinks may not work as the guide is not part of this portfolio._"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dhelpCommand]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcaloriegraph]"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 42,
      "-": 31
    }
  },
  {
    "path": "docs/team/jeremylow97.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d Low Zhang Xian - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d\u003d PROJECT: CALGO"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "This Project Portfolio page aims to showcase my contributions to Calgo - a Software Engineering project developed during my second"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "year of undergraduate studies at the National University of Singapore."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d\u003d\u003d\u003d About the Team"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "We are 5 Year 2 Computer Science undergraduates reading CS2103T: Software Engineering."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d\u003d\u003d\u003d About the Project"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Calgo was created to help foodies achieve their fitness goals. Our story first began when the team was given the source code of https://github.com/nus-cs2103-AY1920S1/addressbook-level3[Address Book Level 3 (AB3) project]."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "We were challenged to collaborate as a team to morph this into a new product incrementally using Brownfield software development."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "As all of us were food lovers, we decided to embark on this journey to create Calgo, a personal meal tracking assistant. Today,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "Calgo is well-equipped to help users keep track of their meal consumption and store all their favourite food, along with its nutritional information."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "On top of this, Calgo has the ability to offer our users insightful reports based on their data. Calgo was created with a strong emphasis"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "on providing the best user experience to our users."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "* *Major enhancement*: I implemented the `update` command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** What it does: This command allows the user to add new `Food` entries or edit existing `Food` entries in the `Food Record`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Justification: Instead of having two separate commands: add and edit to perform the function of updating the Food Record, this smart"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "command decides whether to add or edit depending on whether the Food entered by the user exists in the Food Record. This improves user experience"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "and reduces the necessity of another command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Highlights: Implementing this requires comprehensive understanding of the entire application architecture. Additional thought and effort"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "was required to ensure that the process is seamless for the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "* *Major enhancement*: I implemented the Real-time Suggestion feature"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** What it does: This feature shows the user existing similar Food items in real time when using any of these three commands: `update`, `delete`, `nom`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Justification: Instead of the need to use additional commands or having to manually scroll through the `Food Record`, this feature allows user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "to know whether a particular Food item already exists. This is especially helpful for these three core commands that generally require this knowledge."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Highlights: This enhancement shows our emphasis on providing a good user experience to the user. It also requires a good understanding of the all"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "core components used by the application to achieve this."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "* *Minor enhancement*: I designed the GUI for the `DailyFoodList`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** What it does: This enhancement helps the DailyFoodList be displayed in a more minimalistic and inituitive manner."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Justification: This helps the user quickly see important aspects of their meal consumption, such as the `Name`, `Index`, `Portion` and `Rating`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "of each Food consumed. This improves the design and also user experience for the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Highlights: This enhancement is well-designed with good color scheme. A good mix of understanding of JavaFX components and research into new JavaFX APIs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "were required to achieve this."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "* *Code contributed*: You can view my contributions to Calgo https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003djeremylow97\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djeremylow97\u0026tabRepo\u003dAY1920S2-CS2103T-F11-1%2Fmain%5Bmaster%5D[here]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Contributed sections for delete and update commands in User Guide: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/69[#69], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/269[#269], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/286[#286]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Contributed sections for Logic Component, Modifying the Food Record and Real-time Suggestion for existing Food in Food Record for the Developer Guide: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/69[#69], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/128[#128], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/279[#279], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/286[#286], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/295[#295]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Project and team management:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Morphed test cases for AB3 to new features in Calgo: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/136[#136], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/139[#139]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Update team pages/documentation: https://github.com/AY1920S2-CS2103T-F11-1/main/pull/69[#69], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/128[#128], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/130[#130], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/205[#205], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/251[#251], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/269[#269], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/279[#279], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/286[#286], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/295[#295], https://github.com/AY1920S2-CS2103T-F11-1/main/pull/296[#296]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Software Developer: Handled object modelling, designing overall architecture and maintaining good code quality."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Product ideation and brainstorming, contributions to GUI design and user testing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "** Beyond the team:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "*** Peer testing and bug reporting: https://github.com/jeremylow97/ped/issues/1[#1], https://github.com/jeremylow97/ped/issues/2[#2], https://github.com/jeremylow97/ped/issues/3[#3], https://github.com/jeremylow97/ped/issues/4[#4], https://github.com/jeremylow97/ped/issues/5[#5], https://github.com/jeremylow97/ped/issues/6[#6], https://github.com/jeremylow97/ped/issues/7[#7], https://github.com/jeremylow97/ped/issues/8[#8], https://github.com/jeremylow97/ped/issues/9[#9], https://github.com/jeremylow97/ped/issues/10[#10], https://github.com/jeremylow97/ped/issues/11[#11], https://github.com/jeremylow97/ped/issues/12[#12], https://github.com/jeremylow97/ped/issues/13[#13], https://github.com/jeremylow97/ped/issues/14[#14]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users. Please note that some hyperlinks may not work as the guide is not part of this portfolio._"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dupdatecommand]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeletecommand]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project. Please note that some hyperlinks may not work as the guide is not part of this portfolio._"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003drealtimesuggestions]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodifyingfoodrecord]"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 60,
      "-": 28
    }
  },
  {
    "path": "docs/team/ray-97.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d Cai Ruicong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d PROJECT: Calgo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "This portfolio page highlights some of my contributions to Calgo - a Software Engineering project developed in my second year of undergraduate studies in the National University of Singapore."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d About the Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "We are 5 Year 2 Computer Science undergraduates reading CS2103T: Software Engineering."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003d\u003d\u003d\u003d About the Project"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Our project, Calgo is minimalistic calorie tracker. Calgo was built upon the brownfield project"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "https://github.com/nus-cs2103-AY1920S1/addressbook-level3[Address Book Level 3 (AB3) project], morphed incrementally"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "over a period of 3 months in accordance to software development principles."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Calgo is written in java and totals to around 10 thousand lines of code."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Calgo\u0027s primary purpose is to provide fast typists with a tool that they can use to store"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "records on their food consumption. Calgo uses a command line interface (CLI) to interact with the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Whenever the user interacts with our App, the feedback is immediate and the effects are contained within"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "a single window. This is so that our users can focus on their goals while Calgo do the heavy lifting."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "With many amazing features that are simple and fast to pick up, I hope our users will find it enjoyable and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "easy to monitor their health."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* *Major enhancement*: I implemented the `Consumption Records` of the App, which serves as a backend for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "features implemented by me and my teammates."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** What it does: This allows users to reliably stored data in our app."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Justification: We need a storage that can load and save information of user so that it will be useful in the long run."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "Features such as report and graphs need data to work."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The future versions of `Calgo` will mainly be working with this feature to implement extensions."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The implementation of `Consumption Record` was written to mirror the structure of AB3. However, it was much more because it has been scaled up keep track of many states and lists based on dates, as opposed to 1 list in AB3."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* *Major enhancement*: I implemented the `nom` and `vomit` command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** What it does: These commands allows users to create, read, update and delete entries that represents their food consumption."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Justification: These feature is the reason our App exists, it addresses what the user wants to do primarily."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Highlights: `Nom` allows user to rate their meal experience, which is used to generate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "actionable insights based on the user\u0027s profile."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* *Minor enhancement*: I implemented the `stomach` command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** What it does: It allows users to browse `Consumption Records` on different dates."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Justification: The `stomach` command is as essential as a remote control to a TV as it is to the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Highlights: Although this might sound simple, it actually required a lot of planning and design to implement the structure"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "because the data structure had to maintain a record for each date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* *Code contributed*: You can view my contributions using https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dray-97\u0026tabRepo\u003dAY1920S2-CS2103T-F11-1%2Fmain%5Bmaster%5D[reposense]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** Wrote sections for User Guide and Developer Guide:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/273[#273]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/252[#252]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/302[#302]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** Wrote Javadocs:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/221[#221]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-1/main/pull/215[#215]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Project and team management \u0026 contributions: +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** Maintained the issue tracker and assigned issues."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** Contributed to user stories."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** Managed the team repository and set up relevant services."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "** Beyond the team:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "*** Peer testing \u0026 bug reporting:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "https://github.com/ray-97/ped/issues/13[#13]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "https://github.com/ray-97/ped/issues/12[#12]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "https://github.com/ray-97/ped/issues/9[#9]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "https://github.com/ray-97/ped/issues/7[#7]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "https://github.com/ray-97/ped/issues/5[#5]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "The links below are not generated for PDF. So I excluded them on github to make them consistent."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "ray-97": 61,
      "-": 36
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "The class must implement the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 424
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `protein` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "The `protein` field in `Person` is actually an instance of the `seedu.protein.model.food.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ". Safe delete the field `protein` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ". Remove the usages of `protein` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "For example, removing the `protein` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "You can find them by searching for instances of the word `protein` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "For example, there is a `$protein` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "image::$protein.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "private Label protein;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003cLabel fx:id\u003d\"protein\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$protein\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "While keeping the `protein` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    \"protein\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "You can go through each individual `json` file and manually remove the `protein` field."
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 13,
      "-": 104
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "`seedu.protein.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ".. Save the protein book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ".. Add a new entity to the protein book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 3,
      "-": 255
    }
  },
  {
    "path": "src/main/java/life/calgo/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/life/calgo/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * By having a separate main class (Main) that does not extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/life/calgo/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.storage.ConsumptionRecordStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.FoodRecordStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.GoalStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.storage.JsonConsumptionRecordStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.JsonFoodRecordStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.JsonGoalStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.Storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.ui.Ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.ui.UiManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Calgo ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FoodRecordStorage foodRecordStorage \u003d new JsonFoodRecordStorage(userPrefs.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ConsumptionRecordStorage consumptionRecordStorage \u003d new JsonConsumptionRecordStorage("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                userPrefs.getConsumptionRecordFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        GoalStorage goalStorage \u003d new JsonGoalStorage(userPrefs.getGoalFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        storage \u003d new StorageManager(foodRecordStorage, consumptionRecordStorage, userPrefsStorage, goalStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s food record and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The data from the sample food record will be used instead if {@code storage}\u0027s food record is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * or an empty food record will be used instead if errors occur when reading {@code storage}\u0027s food record."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Optional\u003cReadOnlyFoodRecord\u003e foodRecordOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ReadOnlyFoodRecord initialData;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Optional\u003cReadOnlyConsumptionRecord\u003e consumptionRecordOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ReadOnlyConsumptionRecord consumptionData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Optional\u003cReadOnlyGoal\u003e goalOptional;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ReadOnlyGoal goal;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            foodRecordOptional \u003d storage.readFoodRecord();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            if (!foodRecordOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FoodRecord\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            initialData \u003d foodRecordOptional.orElseGet(SampleDataUtil::getSampleFoodRecord);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FoodRecord\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            initialData \u003d new FoodRecord();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FoodRecord\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            initialData \u003d new FoodRecord();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            consumptionRecordOptional \u003d storage.readConsumptionRecord();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            if (!consumptionRecordOptional.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with no consumption data.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            consumptionData \u003d consumptionRecordOptional.orElse(new ConsumptionRecord());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with no consumption data.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            consumptionData \u003d new ConsumptionRecord();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            logger.warning(\"Problem while reading from file. Will be starting with no consumption data.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            consumptionData \u003d new ConsumptionRecord();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goalOptional \u003d storage.readGoal();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (!goalOptional.isPresent()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with no goal set.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goal \u003d goalOptional.orElse(new DailyGoal());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            logger.warning(\"Current value of goal is not admissible. Will be starting with no goal set.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goal \u003d new DailyGoal();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            logger.warning(\"Data file not in the correct format or current goal is not an acceptable value.\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    + \" Will be starting with no goal set.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goal \u003d new DailyGoal();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            logger.warning(\"Problem while reading from the goal file. Will be starting with no goal set.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goal \u003d new DailyGoal();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new ModelManager(initialData, consumptionData, userPrefs, goal);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FoodRecord\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        logger.info(\"Starting Calgo \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Calgo ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 3,
      "buddhavineeth": 51,
      "ray-97": 18,
      "eugenetyc": 15,
      "-": 145
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Config values used by the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Config values customizable through config file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Path for the configuration json file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Path for the preferences json file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains the logging level for console messages."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return The logging level for console messages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Sets the specified logging level for console messages."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param logLevel The specified logging level for console messages."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains the user preference file path previously set."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return The user preference file path previously set."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Sets the user preference file path to the current specified."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param userPrefsFilePath User preference file path to the current specified."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the Config is the same as the other."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other The other Config to compare the current one with."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return If the Config is the same as the other."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the hashcode of the user preference file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return The hashcode of the user preference file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Gives a String representation of the Config, showing current logging level and preference file location."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return String representation of the Config, showing current logging level and preference file location."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 45,
      "-": 59
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Named {@link Logger}s can be obtained from this class. \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final String LOG_FILE \u003d \"calgo.log\"; // default naming for log files"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Creates a console handler for internal development use."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return a console handler for internal development use."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "ray-97": 1,
      "eugenetyc": 8,
      "-": 108
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format. \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_FOOD_DOES_NOT_EXISTS_IN_RECORD \u003d \"This food does not exist in the Food Records\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_FOODS_LISTED_OVERVIEW \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \"%1$d food(s) listed.\\nTo view all entries again, please use the \u0027list\u0027 command.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 3,
      "jeremylow97": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Represents a version with major, minor and patch number."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param versionString Version number string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Version object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "ray-97": 4,
      "-": 109
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains zero-based index for developer side usage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the zero-based index for developer side usage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains one-based index as to how users view the entry."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the one-based index as to how users view the entry."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks for equality of Indices."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other Index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the Indices are considered equal."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 16,
      "-": 53
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Represents an error during conversion of data from one format to another."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "ray-97": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * A container for App specific utility functions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IllegalArgumentException If {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IllegalArgumentException With {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "ray-97": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Utility methods related to Collections."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "ray-97": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Writes and reads files."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Creates parent directories of file if it has a parent directory."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Assumes file exists."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "ray-97": 5,
      "-": 79
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.core.JsonGenerator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.databind.JsonSerializer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.databind.KeyDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.databind.SerializerProvider;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.storage.JsonAdaptedFood;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Converts a Java object instance to JSON and vice versa."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    .addKeySerializer(JsonAdaptedFood.class, new JsonAdaptedFoodKeySerializer())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    .addKeyDeserializer(JsonAdaptedFood.class, new JsonAdaptedFoodKeyDeserializer()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath Cannot be null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws DataConversionException If the file format is not as expected."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param jsonFile Cannot be null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath Cannot be null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException If there was an error during writing to the file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param instance The T object to be converted into the JSON string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return JSON data representation of the given class instance, in string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ray-97"
        },
        "content": "         * Gets the logging level that matches loggingLevelString."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ray-97"
        },
        "content": "         * Returns null if there are no matches."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * A serializer for to help Jackson deal with HashMap keys that are AdaptedFood."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static class JsonAdaptedFoodKeySerializer extends JsonSerializer\u003cJsonAdaptedFood\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        public void serialize(JsonAdaptedFood value, JsonGenerator gen, SerializerProvider serializers)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                throws IOException, JsonProcessingException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            gen.writeFieldName(toJsonString(value));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * A deserializer for to help Jackson deal with HashMap keys that are AdaptedFood."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static class JsonAdaptedFoodKeyDeserializer extends KeyDeserializer {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        public JsonAdaptedFood deserializeKey(String key, DeserializationContext context)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                throws IOException, JsonProcessingException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return fromJsonString(key, JsonAdaptedFood.class);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "ray-97": 49,
      "-": 124
    }
  },
  {
    "path": "src/main/java/life/calgo/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *   Ignores case, and a non-full word match also returns true."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param sentence Cannot be null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param word Cannot be null, cannot be empty, must be a single word."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // we want to compare the keyword with the words in this sentence"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // only return true if either they are the exact equivalent ignoring casing,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // or the word is contained as a substring in any of the sentence\u0027s words"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || containsSubstringWord(wordsInPreppedSentence, preppedWord);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if the String array contains at least one String containing the substring, regardless of casing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param words String array to search in."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param substringWord Substring keyword to find if the Strings from the String array contain it."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Whether the String array contains at least one String containing the substring."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static boolean containsSubstringWord(String[] words, String substringWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (String word: words) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            if (word.toLowerCase().contains(substringWord.toLowerCase())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns if the Food has the stated nutritional value."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Nutritional value can be either Calorie, Protein, Carbohydrate, or Fat."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param origin The Food\u0027s nutritional value."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param query The stated nutritional value of the same type."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Whether the Food has the stated nutritional value."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static boolean containsNutritionalValueEqualTo(String origin, String query) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(origin);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(query);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String preppedQueryString \u003d query.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        AppUtil.checkArgument(!preppedQueryString.isEmpty(), \"Query parameter cannot be empty\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        AppUtil.checkArgument(preppedQueryString.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \"Your nutritional value query should be a single value\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        int preppedQueryValue \u003d Integer.parseInt(preppedQueryString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        int preppedOriginValue \u003d Integer.parseInt(origin);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return (preppedOriginValue \u003d\u003d preppedQueryValue);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Will return false for any other non-null string input."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws NullPointerException If {@code s} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "ray-97": 11,
      "eugenetyc": 40,
      "-": 56
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.DisplayFood;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    //  General execute method for all commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    //  Getter Methods for Day package classes in Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns a list of food objects with similar name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * @param foodName The name of the food entered by user so far."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    List\u003cFood\u003e getSimilarFood(String foodName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns an ArrayList of DailyFoodLog objects in the past week."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    ArrayList\u003cDailyFoodLog\u003e getPastWeekLogs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns the date of the daily list in Model."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    LocalDate getDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the FoodRecord."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @see Model#getFoodRecord()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    ReadOnlyFoodRecord getFoodRecord();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of foods. */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodRecord();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    ObservableList\u003cDisplayFood\u003e getFilteredDailyList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    //  Goal related Methods"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns the daily caloric goal of the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    DailyGoal getDailyGoal();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns remaining number of calories of the user for the goal."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    double getRemainingCalories();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    //   User Pref Methods"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the user prefs\u0027 food record file path."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Path getFoodRecordFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 45,
      "ray-97": 5,
      "jeremylow97": 7,
      "eugenetyc": 7,
      "-": 35
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.parser.CalgoParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.DisplayFood;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.predicates.FoodRecordContainsFoodNamePredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * The main LogicManager of the App."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final CalgoParser calgoParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        calgoParser \u003d new CalgoParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // General execute method for all commands"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Command command \u003d calgoParser.doesParserRequireModel(commandText)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ? calgoParser.parseCommand(commandText, model)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                : calgoParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            storage.saveFoodRecord(model.getFoodRecord());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            storage.saveConsumptionRecord(model.getConsumptionRecord());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            storage.saveGoal(model.getDailyGoal());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Getter Methods for Day package classes in Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public List\u003cFood\u003e getSimilarFood(String foodName) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        List\u003cFood\u003e filteredFood;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        filteredFood \u003d model.getFoodRecord()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                .getFoodList().filtered(new FoodRecordContainsFoodNamePredicate(foodName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return filteredFood;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public ArrayList\u003cDailyFoodLog\u003e getPastWeekLogs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return model.getPastWeekLogs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return model.getDate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ReadOnlyFoodRecord getFoodRecord() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return model.getFoodRecord();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodRecord() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return model.getFilteredFoodRecord();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ObservableList\u003cDisplayFood\u003e getFilteredDailyList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return model.getCurrentFilteredDailyList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Goal related Methods"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal getDailyGoal() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return model.getDailyGoal();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public double getRemainingCalories() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return model.getRemainingCalories();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // User Pref Methods"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return model.getFoodRecordFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 54,
      "ray-97": 13,
      "jeremylow97": 3,
      "eugenetyc": 7,
      "-": 55
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Clears the food record."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Food Record has been cleared! \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Use the update command to add new food into your Food Record.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        model.setFoodRecord(new FoodRecord());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 2,
      "buddhavineeth": 3,
      "eugenetyc": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Deletes a food with its name from the Food Record."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            + \": Deletes the food identified by the name of the food in the displayed food record.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            + \"Parameters: \" + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/pizza\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_DELETE_FOOD_SUCCESS \u003d \"Deleted food: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_FOOD_DOES_NOT_EXISTS_IN_RECORD \u003d \"This food does not exist in the Food Records\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final Food toDelete;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public DeleteCommand(Food food) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        toDelete \u003d food;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        if (!model.hasFood(toDelete)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new CommandException(MESSAGE_FOOD_DOES_NOT_EXISTS_IN_RECORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food foodToDelete \u003d model.getExistingFood(toDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        model.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                \u0026\u0026 toDelete.equals(((DeleteCommand) other).toDelete)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "jeremylow97": 15,
      "eugenetyc": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Calgo as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 4,
      "eugenetyc": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/ExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.storage.ExportGenerator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Generates an editable FoodRecord.txt file in the data/exports folder showing all Food Record entries."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Name, Nutritional Values and Tags are all shown, with Food items in alphabetical order."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully generated FoodRecord.txt in the data/exports folder.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Did not manage to generate FoodRecord.txt.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"If all fails, you can always factory reset Calgo by deleting the data folder.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Executes the ExportCommand, creating a txt file for Storage through the use of ExportGenerator."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the CommandResult which shows the appropriate response for the user for this command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws CommandException when the export storage file fails to be created successfully."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ReadOnlyFoodRecord foodRecord \u003d model.getFoodRecord();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ExportGenerator exportGenerator \u003d new ExportGenerator(foodRecord);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        boolean isSuccessfullyExported \u003d exportGenerator.generateExport();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!isSuccessfullyExported) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 41
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Finds and lists all Food in FoodRecord with Name/Tag containing any of, or nutritional value matching,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * the argument keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Keyword matching is case insensitive. Users can search for multiple keywords only via Name with a single n/ prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all entries containing any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"the specified keywords in the Name or one of their Tags, or match the specified nutritional value. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"More help in the User Guide.\\nChoose only 1 of the following parameters: [n/NAME] [cal/CALORIE] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"[p/PROTEIN] [c/CARBOHYDRATE] [f/FAT] [t/TAG]. NAME and TAG are case-insensitive. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"Example: \u0027\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + COMMAND_WORD + \" cal/150\u0027 to search by Calorie, or \u0027\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + COMMAND_WORD + \" n/Ban\u0027 to search by Name\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Predicate\u003cFood\u003e predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructor for FindCommand, which seeks to find Food entries that satisfy a given Predicate."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param predicate the Predicate which the FindCommand searches Food objects to satisfy as true."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FindCommand(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Executes the find command, searching through the Model to find Food objects satisfying the predicate."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the CommandResult which shows the appropriate response for the user for this command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        model.updateFilteredFoodRecord(predicate); // only show entries that satisfy a predicate to be true."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                String.format(Messages.MESSAGE_FOODS_LISTED_OVERVIEW, model.getFilteredFoodRecord().size()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the FindCommand is the same as the other specified, based off the Predicate."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other FindCommand to compare with."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the FindCommand is the same as the other specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof FindCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "eugenetyc": 37,
      "-": 25
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/GoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Updates daily caloric goal of user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Command and related Messages"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goal\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates your goal of how many calories to consume \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"daily.\\n Calgo will subsequently help you to keep track of your consumption to achieve this goal.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"The following will help you to understand how to use the command:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Parameters: \" + COMMAND_WORD + \" GOAL\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Example: To set a goal to consume 2800 calories each day, enter this: \" + COMMAND_WORD + \" 2800\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully updated your daily caloric goal to %1$d.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Please key in a whole number that is at least %d calorie and\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        + \" at most %d calories.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_WARNING \u003d \"That is a really low goal to set. Warning: You may suffer from\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \" malnutrition.\" + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"We\u0027ll accept this now because Calgo will eventually help you to reach a daily calorie count of \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"%d, which is the minimum calories you should eat to stay moderately healthy.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // the number of calories the user enters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private final int numCaloriesDaily;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public GoalCommand(int numberCaloriesDaily) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.numCaloriesDaily \u003d numberCaloriesDaily;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        model.updateDailyGoal(this.numCaloriesDaily);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // if user enters an unhealthy calorie goal"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (this.numCaloriesDaily \u003c DailyGoal.MINIMUM_HEALTHY_CALORIES) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_WARNING, DailyGoal.MINIMUM_HEALTHY_CALORIES));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, numCaloriesDaily));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                || (other instanceof GoalCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u0026\u0026 numCaloriesDaily \u003d\u003d ((GoalCommand) other).numCaloriesDaily); // attribute check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 60
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String NO_COMMAND \u003d \"Sorry, but no commands contain this keyword. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Thus, a guide for all commands will be shown.\\n\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_CLEAR_MESSAGE \u003d \"clear:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Clears all entries from the Food Record.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: clear\\n\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_DELETE_MESSAGE \u003d \"delete:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Deletes the specified Food Item from the Food Record.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: delete n/NAME\\n\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_EXIT_MESSAGE \u003d \"exit:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Exits the program.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: exit\\n\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_EXPORT_MESSAGE \u003d \"export:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Saves an editable text file (FoodRecords.txt) in data/exports folder.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"This helps you to take printouts of your records whenever you can\u0027t be around your laptop.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"The FoodRecords.txt file contains all Food item records including their nutritional content.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Format: export\\n\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_FIND_MESSAGE \u003d \"find:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Finds all Food items whose names contain any of the keyword(s)\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Alternatively, Food items can also be found by entering a specific value of its attributes,\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"i.e. Calories, Proteins, Carbohydrates, or Fats.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: find [n/NAME] [cal/CALORIE] [p/PROTEIN] [c/CARBOHYDRATE] [f/FAT] (choose only 1 parameter)\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Alt format: find KEYWORD [MORE_KEYWORDS]\\n\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_GOAL_MESSAGE \u003d \"goal:\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Sets a numerical goal for the desired number of calories to be consumed in a day.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Subsequently, Calgo will provide you with insights on how to reach your goal.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Side Note: These helpful insights are given through the report feature.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: goal GOAL\\n\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_HELP_MESSAGE \u003d \"help:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Shows a list of all commands and their usage and format.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Alternatively, search for a specific group of commands using a keyword.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Format: help [COMMAND_WORD]\\n\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_LIST_MESSAGE \u003d \"list:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Shows a list of all Food items in the Food Records,\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"with their respective nutritional values of calories, proteins, carbohydrates, and fats.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: list\\n\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_NOM_MESSAGE \u003d \"nom:\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Adds a food item into the log which keeps track of what the user has eaten on that day.\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: nom n/NAME [d/DATE] [portion/PORTION]\\n\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_REPORT_MESSAGE \u003d \"report:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Given a date, the command generates a text document that contains the following:\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"\\t - Your goal information\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"\\t - Your calorie consumption on the given date\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"\\t - Motivation and tips on how to better reach your goal.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Format: report d/yyyy-MM-dd\\n\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_STOMACH_MESSAGE \u003d \"stomach: \\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Displays a list of food items along side how many portions have been consumed on that day.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"For a more detailed statistical report with nutritional values of food consumed, see report command.\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: stomach [d/DATE]\\n\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_UPDATE_MESSAGE \u003d \"update:\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Updates a Food Item in the Food Record, or creates a new Food Item if one isn\u0027t already present.\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: update n/NAME cal/CALORIE p/PROTEIN c/CARBOHYDRATE f/FAT\\n\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_VOMIT_MESSAGE \u003d \"vomit:\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Deletes a food item that a user has previously added to the log tracking consumption on that day.\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"Format: vomit num/INDEX [d/DATE] [portion/PORTION]\\n\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String DEFAULT_HELP_MESSAGE \u003d HELP_CLEAR_MESSAGE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_DELETE_MESSAGE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_EXIT_MESSAGE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_EXPORT_MESSAGE"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_FIND_MESSAGE"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_GOAL_MESSAGE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_HELP_MESSAGE"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_LIST_MESSAGE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_NOM_MESSAGE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_REPORT_MESSAGE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_UPDATE_MESSAGE"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + HELP_VOMIT_MESSAGE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static final LinkedHashMap\u003cString, String\u003e internalMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static Set\u003cString\u003e internalSet;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static String filteredGuide;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        //dummy for test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public HelpCommand(String keyword) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        this.keyword \u003d keyword.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        addMessagesToMap();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalSet \u003d setKeySet();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static String getFilteredGuide() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return filteredGuide;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Add all help messages to the internal hashmap."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private void addMessagesToMap() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"clear\", HELP_CLEAR_MESSAGE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"delete\", HELP_DELETE_MESSAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"exit\", HELP_EXIT_MESSAGE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"export\", HELP_EXPORT_MESSAGE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"find\", HELP_FIND_MESSAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"goal\", HELP_GOAL_MESSAGE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"help\", HELP_HELP_MESSAGE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"list\", HELP_LIST_MESSAGE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"nom\", HELP_NOM_MESSAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"report\", HELP_REPORT_MESSAGE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"stomach\", HELP_STOMACH_MESSAGE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"update\", HELP_UPDATE_MESSAGE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        internalMap.put(\"vomit\", HELP_VOMIT_MESSAGE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Sets a given set to the keyset of the internalMap."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * @return Set of the keys."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private Set\u003cString\u003e setKeySet() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return internalMap.keySet();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Obtains a String for the help guide of all commands with the keyword as a substring."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * @param keyword"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * @return String containing all found commands."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private String printIfSubstring(String keyword) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        requireNonNull(internalSet);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        for (String commandName : internalSet) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            if (!commandName.contains(keyword)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            result \u003d result + internalMap.get(commandName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private void setFilteredGuide() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        if (keyword \u003d\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            filteredGuide \u003d DEFAULT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            filteredGuide \u003d printIfSubstring(keyword);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        if (filteredGuide.isEmpty()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            filteredGuide \u003d NO_COMMAND + DEFAULT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        setFilteredGuide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                true, false);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 150,
      "buddhavineeth": 17,
      "-": 15
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Lists all Food entries in the FoodRecord for the user to easily refer to."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \"Listed all foods.\\nIf your Food Record appears empty, it\u0027s time to start making entries! :)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Lists all the Food in the GUI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This relies on a Predicate that all Food entries satisfy, which is used in filtering through the FoodRecord."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the CommandResult which shows the appropriate response for the user for this command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // the updateFilteredFooodRecord method only shows Food entries satisfying the predicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        model.updateFilteredFoodRecord(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "eugenetyc": 30
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/NomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Updates the food consumed on a given day."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class NomCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"nom\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food to your consumption record. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_PORTION + \"PORTION]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"bandung \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"2020-03-14 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_PORTION + \"2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully consumed %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final DailyFoodLog foodLog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final Food foodConsumed;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public NomCommand(DailyFoodLog foodLog, Food foodConsumed) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        CollectionUtil.requireAllNonNull(foodLog, foodConsumed);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foodLog \u003d foodLog;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foodConsumed \u003d foodConsumed;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!model.hasLogWithSameDate(foodLog)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            model.addLog(foodLog);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            model.updateLog(foodLog);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        model.updateDate(foodLog.getLocalDate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model.updateCurrentFilteredDailyList(Model.PREDICATE_SHOW_ALL_CONSUMED_FOODS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                foodLog.getLocalDate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, foodConsumed));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                || (other instanceof NomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 foodConsumed.equals(((NomCommand) other).foodConsumed)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 foodLog.equals(((NomCommand) other).foodLog));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 3,
      "buddhavineeth": 7,
      "ray-97": 49,
      "eugenetyc": 1,
      "jeremylow97": 1
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/ReportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.storage.ReportGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Generates a report of all the food consumed by User on any given date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Date is in YYYY-MM-DD format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class ReportCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Generates a report containing statistics of \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"all foods consumed on a given date and saves the report in a text file in the data/reports folder.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"DATE\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"2020-05-27\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_REPORT_SUCCESS \u003d \"Successfully generated a report in the data/reports folder \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"for the following date: %tF\" + \".\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_REPORT_FAILURE \u003d \"Did not manage to generate report.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String NO_SUCH_DATE \u003d \"There was no food consumed on %tF.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String INPUT_OUTPUT_EXCEPTION \u003d \"There was an error in creating and/or \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"writing to your report file. Kindly revise your system settings to enable the app to create a new file.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // the date the user enters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private LocalDate queryDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public ReportCommand(LocalDate queryDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.queryDate \u003d queryDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // if there is no food consumed on the given date, do not execute command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!model.hasLogWithSameDate(queryDate) || model.getLogByDate(queryDate).getFoods().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new CommandException(MESSAGE_REPORT_FAILURE + \"\\n\" + String.format(NO_SUCH_DATE, queryDate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        DailyGoal dailyGoal \u003d model.getDailyGoal();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        DailyFoodLog foodLog \u003d model.getLogByDate(queryDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArrayList\u003cDailyFoodLog\u003e pastWeekLogs \u003d model.getPastWeekLogs(); // for suggestions feature"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assert foodLog.getFoods().size() \u003e 0 : \"ReportCommand is wrongly processing an empty food log.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ReportGenerator reportGenerator \u003d new ReportGenerator(queryDate, dailyGoal, foodLog, pastWeekLogs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        boolean isGenerated \u003d reportGenerator.generateReport();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // if report does not successfully generate, inform user of failure in command execution"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!isGenerated) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new CommandException(MESSAGE_REPORT_FAILURE + \"\\n\" + INPUT_OUTPUT_EXCEPTION);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REPORT_SUCCESS, queryDate));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                || (other instanceof ReportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u0026\u0026 queryDate.equals(((ReportCommand) other).queryDate)); // attribute check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 75,
      "ray-97": 4
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/StomachCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Displays all food consumed on a given day."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class StomachCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stomach\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Display food items consumed on selected date. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"2020-14-03 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Display all food consumed\"; // on %s"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public StomachCommand(LocalDate date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        model.updateDate(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model.updateCurrentFilteredDailyList(Model.PREDICATE_SHOW_ALL_CONSUMED_FOODS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                || (other instanceof StomachCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u0026\u0026 date.equals(((StomachCommand) other).date)); // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 8,
      "buddhavineeth": 5,
      "ray-97": 34,
      "jeremylow97": 1
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/UpdateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Updates Food Record with a given food object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the food entered into the Food Record.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            + \" If the food entered already exists, it will be overwritten by input values.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_CALORIES + \"CALORIES \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_PROTEIN + \"PROTEIN \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_CARBOHYDRATE + \"CARBOHYDRATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_FAT + \"FAT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Kiwi \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_CALORIES + \"150 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_PROTEIN + \"2 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_CARBOHYDRATE + \"25 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_FAT + \"3 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Green \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Sweet\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Updated all foods into Food Record:\\n%1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_UPDATE_EXISTING_FOOD_SUCCESS \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            \"Updated existing food item in Food Record:\\n%1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String MESSAGE_UPDATE_EXISTING_FOOD_SAME_VALUES_FAILED \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        \"The nutritional value that you have entered is exactly the same as %1$s in the Food Record!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Food toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Creates an UpdateCommand to update the specified {@code Food}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public UpdateCommand(Food food) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (model.hasFood(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            Food existingFood \u003d model.getExistingFood(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            if (existingFood.equals(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                throw new CommandException(String.format("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        MESSAGE_UPDATE_EXISTING_FOOD_SAME_VALUES_FAILED, existingFood.getName().fullName));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            model.setFood(existingFood, toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            model.updateConsumedLists(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            model.updateFilteredFoodRecord(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_UPDATE_EXISTING_FOOD_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            model.addFood(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            model.updateConsumedLists(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                || (other instanceof UpdateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((UpdateCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 8,
      "ray-97": 3,
      "eugenetyc": 39,
      "jeremylow97": 28
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/VomitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Command to decrement quantity of consumption of a food item from a given day."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class VomitCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"vomit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes a certain amount of food consumed. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_POSITION + \"POSITION \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_PORTION + \"PORTION]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_POSITION + \"1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"2019-01-03 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            + CliSyntax.PREFIX_PORTION + \"2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Successfully throw up %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final DailyFoodLog foodLog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final Food foodVomited;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public VomitCommand(DailyFoodLog foodLog, Food foodVomited) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        CollectionUtil.requireAllNonNull(foodLog, foodVomited);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foodLog \u003d foodLog;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foodVomited \u003d foodVomited;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model.updateLog(foodLog);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        model.updateDate(foodLog.getLocalDate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model.updateCurrentFilteredDailyList(Model.PREDICATE_SHOW_ALL_CONSUMED_FOODS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                foodLog.getLocalDate());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, foodVomited));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 2,
      "buddhavineeth": 7,
      "ray-97": 39,
      "jeremylow97": 1
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * i.e. the same argument value can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final int INITIAL_SIZE \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if the argument multimap contains only 1 user input field, of 1 Prefix."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the argument multimap contains only 1 user input field, of 1 Prefix."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean containsSingleUserInputField() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // the argument multimap begins with initial size 1 so the actual size is not 1,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // but (INITIAL_SIZE + 1) for a single user input field for 1 Prefix."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (this.argMultimap.size() !\u003d INITIAL_SIZE + 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // check that the single prefix has only 1 entry"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (List\u003cString\u003e stringList : this.argMultimap.values()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            if (stringList.size() \u003e 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 28,
      "-": 55
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "ray-97": 9,
      "-": 138
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/CalgoParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.NomCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.StomachCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.VomitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class CalgoParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param userInput Full user input String."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The command based on the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Matcher matcher \u003d matchUserInput(userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return new HelpCommand(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        case StomachCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return new StomachCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new ExportCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return new ReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        case GoalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return new GoalCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param userInput Full user input String."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param model Model for parser to retrieve information from."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The command based on the user input."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Command parseCommand(String userInput, Model model) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Matcher matcher \u003d matchUserInput(userInput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        case NomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return new NomCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        case VomitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return new VomitCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Functions as a helper method to reduce code reuse."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param userInput String to match."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Matcher object that matches user input."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Matcher matchUserInput(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return matcher;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * A method to check which overloaded parse method to call depending on the type of command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param userInput String representing command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return True if command requires use of model, false otherwise."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean doesParserRequireModel(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Matcher matcher \u003d matchUserInput(userInput);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        boolean isNomOrVomit \u003d commandWord.equals(NomCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                || commandWord.equals(VomitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return isNomOrVomit;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 35,
      "ray-97": 70,
      "eugenetyc": 4,
      "jeremylow97": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"cal/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final Prefix PREFIX_PROTEIN \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final Prefix PREFIX_CARBOHYDRATE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final Prefix PREFIX_FAT \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final Prefix PREFIX_POSITION \u003d new Prefix(\"num/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final Prefix PREFIX_PORTION \u003d new Prefix(\"portion/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "ray-97": 4,
      "eugenetyc": 4,
      "-": 9
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        if (!isNamePrefixPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Calorie calorie \u003d new Calorie(\"0\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Protein protein \u003d new Protein(\"0\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Carbohydrate carbohydrate \u003d new Carbohydrate(\"0\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Fat fat \u003d new Fat(\"0\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new Food(name, calorie, protein, carbohydrate, fat, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return new DeleteCommand(food);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns true if the name prefix is present {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static boolean isNamePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 14,
      "ray-97": 1,
      "jeremylow97": 28,
      "eugenetyc": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static life.calgo.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.CalorieContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.CarbohydrateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.FatContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.ProteinContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Parses input arguments and creates a new FindCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_EXCESS_FIND_FILTERS \u003d \"Please specify 1 and only 1 correct parameter for \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"filtering using the find command.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand, returning a FindCommand object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_CALORIES,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                        CliSyntax.PREFIX_PROTEIN, CliSyntax.PREFIX_CARBOHYDRATE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                        CliSyntax.PREFIX_FAT, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // argMultimap should contain only 1 prefix at this point"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Predicate\u003cFood\u003e pred \u003d generateFindCommandPredicate(argMultimap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assert (pred !\u003d null) : \"The current predicate for the FindCommand is null.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new FindCommand(pred);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the corresponding type of Predicate based on the single prefix entered by the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param am the Argument Multimap we search through to produce the Predicate."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the corresponding type of Predicate based on the single prefix entered by the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws ParseException is thrown when there is more than 1 Prefix used, or when Prefix value is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Predicate\u003cFood\u003e generateFindCommandPredicate(ArgumentMultimap am) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!am.containsSingleUserInputField()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_EXCESS_FIND_FILTERS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // below are the specific checks for the single Prefix of the Argument Multimap am"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return generateSpecificPredicate(am);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Creates the Prefix-specific Predicate that produces a particular FindCommand\u0027s CommandResult."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param am the ArgumentMultimap we search through for the Prefix."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the Prefix-specific Predicate that produces the eventual CommandResult after FindCommand execution."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws ParseException when no allowed Prefix is present, or when an allowed Prefix has an invalid value."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Predicate\u003cFood\u003e generateSpecificPredicate(ArgumentMultimap am) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // each specific Prefix produces a specific class of Predicate\u003cFood\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_NAME)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Name name \u003d ParserUtil.parseName(am.getValue(CliSyntax.PREFIX_NAME).get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new NameContainsKeywordsPredicate(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_CALORIES)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Calorie calorie \u003d ParserUtil.parseCalorie(am.getValue(CliSyntax.PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new CalorieContainsKeywordsPredicate(calorie);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_PROTEIN)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Protein protein \u003d ParserUtil.parseProtein(am.getValue(CliSyntax.PREFIX_PROTEIN).get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new ProteinContainsKeywordsPredicate(protein);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_CARBOHYDRATE)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Carbohydrate carbohydrate \u003d ParserUtil.parseCarbohydrate(am.getValue(CliSyntax.PREFIX_CARBOHYDRATE).get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new CarbohydrateContainsKeywordsPredicate(carbohydrate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_FAT)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Fat fat \u003d ParserUtil.parseFat(am.getValue(CliSyntax.PREFIX_FAT).get());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new FatContainsKeywordsPredicate(fat);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (arePrefixesPresent(am, CliSyntax.PREFIX_TAG)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            // use getAllValues to double check tagList size as users are most likely to enter more than 1 Tag"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e(ParserUtil.parseTags(am.getAllValues(CliSyntax.PREFIX_TAG)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            // assumption to test: FindCommandParser only allows for 1 single Tag prefix"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            assert (tagList.size() \u003d\u003d 1) : \"tagList for find contains more than 1 Tag!\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return new TagContainsKeywordsPredicate(tagList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // should never arrive here"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        throw new ParseException(\"Please try again, with a different input following the correct format.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "ray-97": 1,
      "eugenetyc": 105,
      "-": 17
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/GoalCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Parses input arguments and creates a new GoalCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class GoalCommandParser implements Parser\u003cGoalCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoalCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * and returns a GoalCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format or acceptable values."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public GoalCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String[] splitArgs \u003d args.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (trimmedArgs.isEmpty() || splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String goalArg \u003d splitArgs[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int targetCalories \u003d ParserUtil.parseGoal(goalArg);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new GoalCommand(targetCalories);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 31
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/NomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CARBOHYDRATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PORTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.NomCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Parses input arguments in order to create a new NomCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class NomCommandParser implements Parser\u003cNomCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_FOOD \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            \"You can\u0027t eat that because it does not exist in food record.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final double DEFAULT_PORTION \u003d 1.0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public NomCommandParser(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NomCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param args A String of arguments provided by user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return A NomCommand object for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If user does not conform to expected format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public NomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_PORTION, PREFIX_RATING,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        PREFIX_CALORIES, PREFIX_PROTEIN, PREFIX_CARBOHYDRATE, PREFIX_FAT, PREFIX_TAG);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, NomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog foodLog \u003d fixNomDate(new DailyFoodLog(), argMultimap);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        double portion \u003d fixNomPortion(argMultimap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Optional\u003cFood\u003e optionalFood \u003d fixNomFood(argMultimap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assert (!optionalFood.get().equals(Optional.empty()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foodLog \u003d foodLog.consume(optionalFood.get(), portion);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foodLog \u003d fixNomRating(foodLog, optionalFood, argMultimap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new NomCommand(foodLog, optionalFood.get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper to update DailyFoodLog with a date."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param toFix DailyFoodLog that you want to have date set."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param argMultimap ArgumentMultimap containing value of date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return DailyFoodLog with updated date."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If date is not valid, compared to Calendar."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private DailyFoodLog fixNomDate(DailyFoodLog toFix, ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog foodLog \u003d toFix;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foodLog \u003d foodLog.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (model.hasLogWithSameDate(foodLog)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foodLog \u003d model.getLogByDate(foodLog.getLocalDate());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foodLog;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper function for getting the portion required to add to food."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param argMultimap ArgumentMultimap containing prefix of portion mapped to its value."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Double representing the portion that is parsed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If value\u0027s string representation exceeds 10 character or is negative."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private double fixNomPortion(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        double portion \u003d DEFAULT_PORTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PORTION).isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            portion \u003d ParserUtil.parsePortion(argMultimap.getValue(PREFIX_PORTION).get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return portion;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper function for getting the food that is being consumed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param argMultimap ArgumentMultimap containing prefix of food name mapped to its value."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Optional wrapped food object."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If food does not exist in Food Record."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Optional\u003cFood\u003e fixNomFood(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Optional\u003cFood\u003e optionalFood \u003d model.getFoodByName("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        if (optionalFood.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_NONEXISTENT_FOOD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return optionalFood;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper function for getting the food that is being consumed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param toFix DailyFoodLog that rating is to be added to."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param optionalFood Optional wrapped food object that is to be rated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param argMultimap ArgumentMultimap containing prefix of rating mapped to its value."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return DailyFoodLog reflecting the food that has been rated."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If rating\u0027s value is not an integer between 0 and 10."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private DailyFoodLog fixNomRating("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            DailyFoodLog toFix, Optional\u003cFood\u003e optionalFood, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog foodLog \u003d toFix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            int rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foodLog \u003d foodLog.addRating(optionalFood.get(), rating);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foodLog;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 2,
      "buddhavineeth": 21,
      "ray-97": 116
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If {@code userInput} does not conform the expected format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "ray-97": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String DATE_PATTERN \u003d \"yyyy-MM-dd\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_PATTERN);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d String.format("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            \"Invalid date entered. Give an actual date and follow the format of %s\" , DATE_PATTERN);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_INVALID_PORTION \u003d \"Portion is either a number or left empty.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final String MESSAGE_NON_POSITIVE_PORTION \u003d \"Portion should be a positive number.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index should be a positive number.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_INVALID_POSITION \u003d \"Position should be a positive integer!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_INVALID_RATING \u003d \"Rating should a an integer between 0 to 10.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_PORTION_LENGTH \u003d \"Length of portion should be at most 5 characters.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final int VALIDATION_LENGTH \u003d 5;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final int INT_INVALID_RATING \u003d -1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final int INT_MINIMUM_NATURAL_NUMBER \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final int INT_MAXIMUM_RATING \u003d 10;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final int NUTRITIONAL_VALUE_MAXIMUM_DIGITS \u003d 5; // human diets do not exceed 5 digits in calories"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Protein, Carbohydrate, Fat will hence also never exceed 5 digits as each gram of these gives \u003e1 calorie"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as helper method to check if input length is valid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param input String representing input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param message Message to display if check fails."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If input length exceeds validation length."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static void inputLengthValidation(String input, String message) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (input.length() \u003e VALIDATION_LENGTH) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns true if given String can be parsed as a number."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param strNum String argument to be parsed as a number."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return True if the input can be parsed as a number."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static boolean isNumeric(String strNum) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (strNum \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            double d \u003d Double.parseDouble(strNum);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns true if given String can be parsed as an Integer."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param strNum String argument to be parsed as a Integer."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return True if the input can be parsed as a Integer."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static boolean isInteger(String strNum) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (strNum \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            int d \u003d Integer.parseInt(strNum);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Parses {@code goal} into an integer and returns it."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws ParseException If the specified value is invalid (not an integer that is \u003e\u003d MINIMUM_ACCEPTABLE_CALORIES"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * and \u003c\u003d MAXIMUM_ACCEPTABLE CALORIES."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static int parseGoal(String goal) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!(isInteger(goal) \u0026\u0026 goal.length() \u003c\u003d 5 \u0026\u0026 Integer.parseInt(goal) \u003e\u003d DailyGoal.MINIMUM_ACCEPTABLE_CALORIES"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u0026\u0026 Integer.parseInt(goal) \u003c\u003d DailyGoal.MAXIMUM_ACCEPTABLE_CALORIES)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(String.format(GoalCommand.MESSAGE_FAILURE, DailyGoal.MINIMUM_ACCEPTABLE_CALORIES,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    DailyGoal.MAXIMUM_ACCEPTABLE_CALORIES));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return Integer.parseInt(goal);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses given String representation of position into an OptionalInt."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Position refers to index the food object has in food record display."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param position String representation of position."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return OptionalInt representation of position."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static int parsePosition(String position) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(position);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String trimmedPosition \u003d position.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!isInteger(trimmedPosition)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_POSITION);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return Integer.parseInt(trimmedPosition);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Instantiate LocalDate object from date represented in String."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param date Date in String representation."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return LocalDate Object with date equivalent to that expressed in argument."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If given String date is in invalid format."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (trimmedDate.equals(\"\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            // extra check for tricky dates like 2020-02-31"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            DateFormat df \u003d new SimpleDateFormat(DATE_PATTERN);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            df.setLenient(false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            df.parse(date);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return LocalDate.parse(trimmedDate, FORMATTER);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses String portion as a double."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param portion String representation of portion argument."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Double representation of portion argument."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If given argument cannot be parsed as a number."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static double parsePortion(String portion) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(portion);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String trimmedPortion \u003d portion.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        inputLengthValidation(trimmedPortion, MESSAGE_PORTION_LENGTH);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        boolean isInvalidPortion \u003d !isNumeric(trimmedPortion) \u0026\u0026 trimmedPortion.length() \u003e 0;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (isInvalidPortion) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PORTION);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        double value \u003d isNumeric(trimmedPortion) ? Double.parseDouble(trimmedPortion) : 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (value \u003c\u003d INT_MINIMUM_NATURAL_NUMBER) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_NON_POSITIVE_PORTION);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Parses a String rating as an int."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param rating String representation of rating argument."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Double representation of rating argument."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If given argument cannot be parsed as an int."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static int parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        boolean isWithinRange \u003d false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        int parsedInt \u003d INT_INVALID_RATING;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (isInteger(trimmedRating)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            parsedInt \u003d Integer.parseInt(trimmedRating);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            isWithinRange \u003d parsedInt \u003e\u003d INT_MINIMUM_NATURAL_NUMBER \u0026\u0026 parsedInt \u003c\u003d INT_MAXIMUM_RATING;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!isWithinRange) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_RATING);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return parsedInt;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If the given {@code Name} is invalid."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses a {@code String calorie} into a {@code Calorie}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If the given {@code calorie} is invalid."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static Calorie parseCalorie(String calorie) throws ParseException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(calorie);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String trimmedCalorie \u003d calorie.trim();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        boolean isInvalidCalorie \u003d !Calorie.isValidCalorie(trimmedCalorie);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        boolean hasUnacceptableStringLength \u003d !ParserUtil.hasAcceptableLengthNutritionalValue(trimmedCalorie);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (isInvalidCalorie || hasUnacceptableStringLength) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String processedCalorieValueString \u003d ParserUtil.removeLeadingZerosFromIntegerString(trimmedCalorie);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Calorie(processedCalorieValueString);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses a {@code String protein} into an {@code Protein}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If the given {@code protein} is invalid."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static Protein parseProtein(String protein) throws ParseException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(protein);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String trimmedProtein \u003d protein.trim();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        boolean isInvalidProtein \u003d !Protein.isValidProtein(trimmedProtein);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        boolean hasUnacceptableStringLength \u003d !ParserUtil.hasAcceptableLengthNutritionalValue(trimmedProtein);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (isInvalidProtein || hasUnacceptableStringLength) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String processedProteinValueString \u003d ParserUtil.removeLeadingZerosFromIntegerString(trimmedProtein);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Protein(processedProteinValueString);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses a {@code String carbohydrate} into an {@code Carbohydrate}."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If the given {@code carbohydrate} is invalid."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static Carbohydrate parseCarbohydrate(String carbohydrate) throws ParseException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(carbohydrate);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String trimmedCarbohydrate \u003d carbohydrate.trim();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        boolean isInvalidCarbohydrate \u003d !Carbohydrate.isValidCarbohydrate(trimmedCarbohydrate);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        boolean hasUnacceptableStringLength \u003d !ParserUtil.hasAcceptableLengthNutritionalValue(trimmedCarbohydrate);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (isInvalidCarbohydrate || hasUnacceptableStringLength) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String processedCarbohydrateValueString \u003d ParserUtil.removeLeadingZerosFromIntegerString(trimmedCarbohydrate);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Carbohydrate(processedCarbohydrateValueString);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses a {@code String fat} into a {@code Fat}."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If the given {@code fat} is invalid."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static Fat parseFat(String fat) throws ParseException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(fat);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String trimmedFat \u003d fat.trim();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        boolean isInvalidFat \u003d !Fat.isValidFat(trimmedFat);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        boolean hasUnacceptableStringLength \u003d !ParserUtil.hasAcceptableLengthNutritionalValue(trimmedFat);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (isInvalidFat || hasUnacceptableStringLength) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new ParseException(Fat.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String processedFatValueString \u003d ParserUtil.removeLeadingZerosFromIntegerString(trimmedFat);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Fat(processedFatValueString);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If the given {@code tag} is invalid."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param tags The Collection of Strings to convert into Tags."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The Set of Tags created."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException Should any issues occur during the conversion."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns whether all Prefixes appear in the Argument Multimap."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param argumentMultimap The Argument Multimap we search each Prefix through."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param prefixes Each Prefix we need to search for matches."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Whether every Prefix appears in the Argument Multimap."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Removes leading zeros from a source String which represents an Integer."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param source The source String which represents an Integer and can only contain Integer values."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The processed String which has leading zeros removed."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static String removeLeadingZerosFromIntegerString(String source) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        int processedValue \u003d Integer.parseInt(source);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String processedValueString \u003d String.valueOf(processedValue);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return processedValueString;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks whether the given String is within the acceptable length for a nutritional value."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param value the String representing the nutritional value we want to check."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the given String representing a nutritional value can possibly be valid."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static boolean hasAcceptableLengthNutritionalValue(String value) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return (value.length() \u003c\u003d NUTRITIONAL_VALUE_MAXIMUM_DIGITS);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 34,
      "ray-97": 154,
      "eugenetyc": 109,
      "-": 77
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/ReportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Parses input arguments in order to create a new ReportCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class ReportCommandParser implements Parser\u003cReportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReportCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param args A String of arguments provided by user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return A ReportCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws ParseException If user does not conform to expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public ReportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_DATE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    ReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // at this breakpoint, PREFIX_DATE is present in args"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assert argMultimap.getValue(PREFIX_DATE).isPresent() : \"ReportCommandParser is wrongly parsing the date.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        LocalDate queryDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new ReportCommand(queryDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 40,
      "ray-97": 1
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/StomachCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CARBOHYDRATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PORTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_POSITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.StomachCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Parses input arguments and creates a new StomachCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class StomachCommandParser implements Parser\u003cStomachCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StomachCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param args a String of arguments provided by user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return a StomachCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException if the user does not conform to the expected format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public StomachCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_PORTION, PREFIX_RATING,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        PREFIX_CALORIES, PREFIX_PROTEIN, PREFIX_CARBOHYDRATE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        PREFIX_FAT, PREFIX_POSITION, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        boolean hasInvalidArg \u003d argMultimap.getValue(PREFIX_DATE).isEmpty() \u0026\u0026 args.split(\" \").length \u003e 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (hasInvalidArg) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, StomachCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new StomachCommand(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 1,
      "buddhavineeth": 24,
      "ray-97": 26
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/UpdateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " *  Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_CALORIES,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        CliSyntax.PREFIX_PROTEIN, CliSyntax.PREFIX_CARBOHYDRATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        CliSyntax.PREFIX_FAT, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_CALORIES,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                CliSyntax.PREFIX_PROTEIN, CliSyntax.PREFIX_FAT, CliSyntax.PREFIX_CARBOHYDRATE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            // if not all prefixes are present then throw error"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String nameInTitleCase \u003d convertToTitleCase(argMultimap.getValue(CliSyntax.PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Name name \u003d ParserUtil.parseName(nameInTitleCase);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Calorie calorie \u003d ParserUtil.parseCalorie(argMultimap.getValue(CliSyntax.PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Protein protein \u003d ParserUtil.parseProtein(argMultimap.getValue(CliSyntax.PREFIX_PROTEIN).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Carbohydrate carbohydrate \u003d ParserUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                .parseCarbohydrate(argMultimap.getValue(CliSyntax.PREFIX_CARBOHYDRATE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Fat fat \u003d ParserUtil.parseFat(argMultimap.getValue(CliSyntax.PREFIX_FAT).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(CliSyntax.PREFIX_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new Food(name, calorie, protein, carbohydrate, fat, tagList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return new UpdateCommand(food);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Parses the foodName and returns it back in Title Case."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * @param foodName the foodName in non-titled case."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * @return the foodName back in Title Case,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static String convertToTitleCase(String foodName) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return Arrays"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .stream(foodName.split(\" \"))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .map(word -\u003e word.isEmpty()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        ? word"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        : Character.toTitleCase(word.charAt(0)) + word.substring(1).toLowerCase())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 27,
      "ray-97": 2,
      "jeremylow97": 52
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/VomitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CARBOHYDRATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PORTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_POSITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.VomitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Parses input arguments and creates a new VomitCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class VomitCommandParser implements Parser\u003cVomitCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_LOG \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            \"Record not initialized yet as you have not eaten anything on %s before.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_INVALID_POSITION \u003d \"Position required an integer within range of list!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public VomitCommandParser(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the VomitCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param args given String of arguments."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return a VomitCommand object for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException if the user does not conform to the expected format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public VomitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_PORTION, PREFIX_RATING,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        PREFIX_CALORIES, PREFIX_PROTEIN, PREFIX_CARBOHYDRATE, PREFIX_FAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        PREFIX_POSITION, PREFIX_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_POSITION)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, VomitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog foodLog \u003d fixVomitDate(new DailyFoodLog(), argMultimap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        OptionalDouble portion \u003d fixVomitPortion(argMultimap);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        int indexOfFood \u003d fixVomitIndex(argMultimap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foodLog \u003d fixVomitFoodLogByDate(foodLog, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Optional\u003cFood\u003e optionalFood \u003d fixVomitFood(foodLog, indexOfFood);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foodLog \u003d foodLog.vomit(optionalFood.get(), portion);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assert (!optionalFood.get().equals(Optional.empty()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new VomitCommand(foodLog, optionalFood.get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper function for getting the date that vomit occurs."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param toFix DailyFoodLog that needs date to be set."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param argMultimap ArgumentMultimap containing prefix of date mapped to its value."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return DailyFoodLog with the date set."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If date is not valid according to calendar, or if date has invalid format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private DailyFoodLog fixVomitDate(DailyFoodLog toFix, ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog foodLog \u003d toFix;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foodLog \u003d foodLog.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foodLog;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper function for getting the portion that you wish to vomit."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param argMultimap ArgumentMultimap containing prefix of portion mapped to its value."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return OptionalDouble representing the portion."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If value\u0027s string representation exceeds 10 character or is negative."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private OptionalDouble fixVomitPortion(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        OptionalDouble portion \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PORTION).isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            double parsedValue \u003d ParserUtil.parsePortion(argMultimap.getValue(PREFIX_PORTION).get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            portion \u003d OptionalDouble.of(parsedValue);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return portion;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper function for getting the index of food that you wish to vomit."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param argMultimap ArgumentMultimap containing prefix of portion mapped to its value."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Int representing the index of food to be removed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If index is out of bound."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private int fixVomitIndex(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return ParserUtil.parsePosition(argMultimap.getValue(PREFIX_POSITION).get()) - 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper function for getting the corresponding DailyFoodLog to the date where vomit happens."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param toFix The DailyFoodLog used to retrieve an existing DailyFoodLog in model with the same date."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param model Model representing all the data of the program."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return DailyFoodLog that is retrieved from model."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If user has not consumed anything on the date before, hence log does not exist."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private DailyFoodLog fixVomitFoodLogByDate(DailyFoodLog toFix, Model model) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog foodLog \u003d toFix;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!model.hasLogWithSameDate(foodLog)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NONEXISTENT_LOG, foodLog.getLocalDate()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foodLog \u003d model.getLogByDate(foodLog.getLocalDate());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foodLog;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper function for getting the type of Food to vomit."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param foodLog DailyFoodLog that contains food to vomit."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param indexOfFood Index of food to vomit."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Optional wrapped Food object at specified index."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws ParseException If index out of bound."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Optional\u003cFood\u003e fixVomitFood(DailyFoodLog foodLog, int indexOfFood) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return foodLog.getFoodByIndex(indexOfFood);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_POSITION);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 20,
      "ray-97": 132
    }
  },
  {
    "path": "src/main/java/life/calgo/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructor for ParseException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param message The message to represent the ParseException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructor for ParseException stating the cause of the exception."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param message The message to represent the ParseException."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param cause The cause of the ParseException."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "ray-97": 3,
      "eugenetyc": 8,
      "-": 15
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ConsumptionRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.UniqueDateToLogMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.DisplayFood;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Wraps all data at the consumption record level."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class ConsumptionRecord implements ReadOnlyConsumptionRecord {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final UniqueDateToLogMap dateToLogMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap \u003d new UniqueDateToLogMap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecord() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Creates a ConsumptionRecord using the DailyFoodLog objects in the {@code toBeCopied}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param toBeCopied ReadOnlyConsumptionRecord that provides data for this record to reset with."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecord(ReadOnlyConsumptionRecord toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Resets the existing data of this {@code ConsumptionRecord} with {@code newData}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void resetData(ReadOnlyConsumptionRecord newData) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap.setDateToLogMap(newData.getDateToLogMap());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public HashMap\u003cLocalDate, DailyFoodLog\u003e getDateToLogMap() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.getDateToLogMap();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void addLog(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap.addLog(foodLog);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean hasLogWithSameDate(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.hasLogWithSameDate(foodLog);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog getLogByDate(LocalDate date) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.getLogByDate(date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Updates a log in {@code dateToLogMap}, replacing it with {@code logAfterConsumption}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param logAfterConsumption DailyFoodLog object reflecting the food recently consumed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateLog(DailyFoodLog logAfterConsumption) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap.updateLog(logAfterConsumption);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateConsumedLists(Food food) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap.updateMapWithFood(food);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void setDailyListDate(LocalDate date) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dateToLogMap.setDailyListDate(date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ObservableList\u003cDisplayFood\u003e getDailyList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.asUnmodifiableDailyList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public List\u003cDailyFoodLog\u003e getDailyFoodLogs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.getDailyFoodLogs();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                || (other instanceof ConsumptionRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 dateToLogMap.equals(((ConsumptionRecord) other).dateToLogMap));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return dateToLogMap.hashCode();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 102
    }
  },
  {
    "path": "src/main/java/life/calgo/model/FoodRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Contains all Food entries, ensuring they are in lexicographic order and without duplicates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Duplicates are not allowed by .isSameFood comparison."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class FoodRecord implements ReadOnlyFoodRecord {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final UniqueFoodList foodList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodRecord() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Creates a FoodRecord using the Food objects in the {@code toBeCopied}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodRecord(ReadOnlyFoodRecord toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces the contents of the food list with {@code foods}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoodList(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodList.setFoods(foods);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Resets the existing data of this {@code FoodRecord} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void resetData(ReadOnlyFoodRecord newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        setFoodList(newData.getFoodList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // food-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the FoodRecord."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param food the Food to check for existence in the current FoodRecord."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current FoodRecord contains this Food."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodList.contains(food);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Adds a Food to the FoodRecord."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The Food must not already exist in the FoodRecord."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param food the Food to add."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces the given Food {@code target} in the FoodRecord\u0027s foodList with {@code editedFood}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code target} must exist in the FoodRecord."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the food record."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param target the Food to be replaced."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param editedFood the new updated Food."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(editedFood);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodList.setFood(target, editedFood);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Removes {@code key} from this {@code FoodRecord}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code key} must exist in the FoodRecord."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param key the Food to remove from the FoodRecord."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void removeFood(Food key) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodList.remove(key);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the existing Food object in FoodRecord."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param toGet the Food to obtain from within the FoodRecord."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the Food of interest."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public Food getExistingFood(Food toGet) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return foodList.getExistingFood(toGet);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // utility methods"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cFood\u003e getFoodByName(Name name) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foodList.getFoodByName(name);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns a line-by-line representation of the FoodRecord, displaying all its details."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the line-by-line representation of the FoodRecord."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (Food f: foodList.asUnmodifiableObservableList()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            result +\u003d f + \"\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the ObservableList representation of the current FoodRecord."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This should not be used for modification purposes."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the ObservableList representation of the current FoodRecord."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks for equivalence between 2 FoodRecords."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other FoodRecord."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the 2 FoodRecords can be considered equivalent."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof FoodRecord"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 foodList.equals(((FoodRecord) other).foodList));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the hashcode of the FoodRecord."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the supposedly unique hashcode of the FoodRecord."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodList.hashCode();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 4,
      "ray-97": 5,
      "eugenetyc": 154,
      "jeremylow97": 7
    }
  },
  {
    "path": "src/main/java/life/calgo/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.DisplayFood;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /** {@code Predicate} that always evaluate to true. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Predicate\u003cFood\u003e PREDICATE_SHOW_ALL_FOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    Predicate\u003cDisplayFood\u003e PREDICATE_SHOW_ALL_CONSUMED_FOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // User prefs related methods"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the user prefs\u0027 food record file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Path getFoodRecordFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Sets the user prefs\u0027 food record file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void setFoodRecordFilePath(Path foodRecordFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // FoodRecord related methods"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Getter methods"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /** Returns the FoodRecord */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    ReadOnlyFoodRecord getFoodRecord();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /** Returns the existing Food item in FoodRecord. */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    Food getExistingFood(Food toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    Optional\u003cFood\u003e getFoodByName(Name parseName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /** Returns an unmodifiable view of the filtered food record. */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodRecord();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Setter methods"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Replaces food record data with the data in {@code foodRecord}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void setFoodRecord(ReadOnlyFoodRecord foodRecord);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Deletes the given food."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The person must exist in the food record."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void deleteFood(Food target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Adds the given food."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code food} must not already exist in the food record."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void addFood(Food food);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces the given food {@code target} with {@code editedFood}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code target} must exist in the food record."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the food record."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void setFood(Food target, Food editedFood);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Updates the filter of the filtered food record to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void updateFilteredFoodRecord(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Utility method"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the FoodRecord."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    boolean hasFood(Food food);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Consumption Record related methods"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Getter methods"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    DailyFoodLog getLogByDate(LocalDate localDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    ReadOnlyConsumptionRecord getConsumptionRecord();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    ObservableList\u003cDisplayFood\u003e getCurrentFilteredDailyList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    ArrayList\u003cDailyFoodLog\u003e getPastWeekLogs();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Setter methods"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void addLog(DailyFoodLog foodLog);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void updateLog(DailyFoodLog logAfterConsumption);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    void updateCurrentFilteredDailyList(Predicate\u003cDisplayFood\u003e predicate, LocalDate date) throws CommandException;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    void updateConsumedLists(Food food);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Utility methods"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    boolean hasLogWithSameDate(DailyFoodLog foodLog);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    boolean hasLogWithSameDate(LocalDate date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Goal related methods"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Getter methods"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    DailyGoal getDailyGoal();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    double getRemainingCalories();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    LocalDate getDate();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Setter methods"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void updateDailyGoal(int targetDailyCalories);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void updateDate(LocalDate date);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Utility method"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    boolean isGoalMade();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 67,
      "ray-97": 25,
      "eugenetyc": 66,
      "jeremylow97": 2
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static life.calgo.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.DisplayFood;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents the in-memory model of the food record data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final FoodRecord foodRecord;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final ConsumptionRecord consumptionRecord;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoods;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final FilteredList\u003cDisplayFood\u003e currentFilteredDailyList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private DailyGoal targetDailyCalories;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Initializes a ModelManager with the given foodRecord and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ModelManager(ReadOnlyFoodRecord readOnlyFoodRecord, ReadOnlyConsumptionRecord readOnlyConsumptionRecord,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs, ReadOnlyGoal readOnlyGoal) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireAllNonNull(readOnlyFoodRecord, readOnlyConsumptionRecord, userPrefs, readOnlyGoal);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        logger.fine(\"Initializing with food record: \" + readOnlyFoodRecord + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                + \" and goal \" + readOnlyGoal);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodRecord \u003d new FoodRecord(readOnlyFoodRecord);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.consumptionRecord \u003d new ConsumptionRecord(readOnlyConsumptionRecord);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.targetDailyCalories \u003d new DailyGoal(readOnlyGoal);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        filteredFoods \u003d new FilteredList\u003c\u003e(this.foodRecord.getFoodList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        currentFilteredDailyList \u003d new FilteredList\u003c\u003e(this.consumptionRecord.getDailyList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        refreshCurrentFilteredDailyList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this(new FoodRecord(), new ConsumptionRecord(), new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // User prefs related methods"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return userPrefs.getFoodRecordFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoodRecordFilePath(Path foodRecordFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(foodRecordFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        userPrefs.setFoodRecordFilePath(foodRecordFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Day package classes in Model component related methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cFood\u003e getFoodByName(Name name) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foodRecord.getFoodByName(name);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean hasLogWithSameDate(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecord.hasLogWithSameDate(foodLog);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean hasLogWithSameDate(LocalDate date) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecord.hasLogWithSameDate(new DailyFoodLog().setDate(date));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void addLog(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord.addLog(foodLog);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateLog(DailyFoodLog logToUpdate) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord.updateLog(logToUpdate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog getLogByDate(LocalDate localDate) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecord.getLogByDate(localDate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Gets remaining calories after considering all food consumed in currentFilteredDailyList."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public double getRemainingCalories() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        DailyGoal goal \u003d getDailyGoal();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (goal \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return DailyGoal.DUMMY_VALUE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int currCaloriesConsumed \u003d 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (DisplayFood food : currentFilteredDailyList) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            double currCalories \u003d Integer.parseInt(food.getCalorie().value);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            double currPortion \u003d food.getPortion();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            currCaloriesConsumed +\u003d currCalories * currPortion;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return goal.getGoal() - currCaloriesConsumed;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Updates ModelManager\u0027s DailyGoal to the new targetDailyCalories."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param targetDailyCalories the new targeted number of calories to consume each day by user."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void updateDailyGoal(int targetDailyCalories) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (isGoalMade()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            this.targetDailyCalories \u003d this.targetDailyCalories.updateDailyGoal(targetDailyCalories);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            this.targetDailyCalories \u003d new DailyGoal(targetDailyCalories);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Checks if goal already exists."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return true if there is already some goal."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public boolean isGoalMade() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return this.targetDailyCalories !\u003d null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns Integer value of user goal."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal getDailyGoal() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return this.targetDailyCalories;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // FoodRecord-related methods"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ReadOnlyFoodRecord getFoodRecord() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecord;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ReadOnlyConsumptionRecord getConsumptionRecord() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return consumptionRecord;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoodRecord(ReadOnlyFoodRecord foodRecord) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodRecord.resetData(foodRecord);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecord.hasFood(food);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Food getExistingFood(Food toGet) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecord.getExistingFood(toGet);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodRecord.removeFood(target);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodRecord.addFood(food);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        updateFilteredFoodRecord(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodRecord.setFood(target, editedFood);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Filtered Food Record Accessors"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Food} backed by the internal list of"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * {@code versionedFoodRecord}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodRecord() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return filteredFoods;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void updateFilteredFoodRecord(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        filteredFoods.setPredicate(predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return foodRecord.equals(other.foodRecord)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u0026\u0026 filteredFoods.equals(other.filteredFoods);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Filtered Consumption Record Accessors"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code DisplayFood}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ObservableList\u003cDisplayFood\u003e getCurrentFilteredDailyList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return currentFilteredDailyList;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateCurrentFilteredDailyList(Predicate\u003cDisplayFood\u003e predicate, LocalDate date)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord.setDailyListDate(date);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        currentFilteredDailyList.setPredicate(predicate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return currentDate;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void updateDate(LocalDate date) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        currentDate \u003d date;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public ArrayList\u003cDailyFoodLog\u003e getPastWeekLogs() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArrayList\u003cDailyFoodLog\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        LocalDate currentDate \u003d getDate();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (consumptionRecord.getDateToLogMap().containsKey(currentDate)) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                result.add(consumptionRecord.getDateToLogMap().get(currentDate));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                result.add(new DailyFoodLog());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            currentDate \u003d currentDate.minus(Period.ofDays(1));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Updates existing DisplayFood items having same name as {@code food} in consumption record for display."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food food that has been updated."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateConsumedLists(Food food) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord.updateConsumedLists(food);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        refreshCurrentFilteredDailyList();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Causes FilteredList to be updated to reflect latest changes."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private void refreshCurrentFilteredDailyList() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            updateCurrentFilteredDailyList(Model.PREDICATE_SHOW_ALL_CONSUMED_FOODS, LocalDate.now());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            logger.info(\"Filtered List not initialized for the day yet.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 3,
      "buddhavineeth": 112,
      "ray-97": 88,
      "eugenetyc": 64,
      "jeremylow97": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ReadOnlyConsumptionRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.DisplayFood;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Unmodifiable view of a consumption record."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public interface ReadOnlyConsumptionRecord {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns an unmodifiable view of displayFood in consumption record."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * This list will not contain any duplicate foods."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    ObservableList\u003cDisplayFood\u003e getDailyList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns a collection of LocalDate to DailyFoodLog key-value pairs in consumption record."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * This HashMap will not contain any duplicate dates."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    HashMap\u003cLocalDate, DailyFoodLog\u003e getDateToLogMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    List\u003cDailyFoodLog\u003e getDailyFoodLogs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 29
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ReadOnlyFoodRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Unmodifiable view of a FoodRecord in lexicographic order without duplicates."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public interface ReadOnlyFoodRecord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns an unmodifiable view of the FoodRecord, in lexicographic order."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This list will not contain any duplicate foods."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "eugenetyc": 15
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ReadOnlyGoal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Unmodifiable view of a daily caloric goal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public interface ReadOnlyGoal {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns an unmodifiable view of the daily caloric goal."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    Integer getGoal();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 12
    }
  },
  {
    "path": "src/main/java/life/calgo/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Path getFoodRecordFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "eugenetyc": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/life/calgo/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Path foodRecordFilePath \u003d Paths.get(\"data\" , \"foodrecord.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Path consumptionRecordFilePath \u003d Paths.get(\"data\", \"consumptionrecord.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private Path goalFilePath \u003d Paths.get(\"data\", \"goal.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param userPrefs The user preferences we wish to set."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param newUserPrefs The user preferences we wish to set."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        setFoodRecordFilePath(newUserPrefs.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtain current GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This includes settings like Window size."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The current GUI settings for the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Sets the GUI settings to be that of the specified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param guiSettings The specified GUI settings we wish to change to."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains the FoodRecord\u0027s json file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This path stores all relevant Food data in a certain format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The FoodRecord\u0027s json file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecordFilePath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Sets the file path for the json file of the FoodRecord."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * It is best to keep this in a convenient and appropriate location."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param foodRecordFilePath The new file path we wish to set to."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoodRecordFilePath(Path foodRecordFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(foodRecordFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodRecordFilePath \u003d foodRecordFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains the ConsumptionRecord\u0027s json file path."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This path stores all relevant Food data in a certain format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The ConsumptionRecord\u0027s json file path."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Path getConsumptionRecordFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecordFilePath;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains the json file path for the file representing the goal set by the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This path stores all relevant goal data in a certain format."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The goal\u0027s json file path."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Path getGoalFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return goalFilePath;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks for equivalence between UserPrefs."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param other The other user preferences we wish to compare with."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Whether the two UserPrefs are equivalent."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!(other instanceof UserPrefs)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 foodRecordFilePath.equals(o.foodRecordFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains hashcode for the UserPrefs object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The supposedly unique hashcode for the UserPrefs object."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return Objects.hash(guiSettings, foodRecordFilePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains String representation of the UserPrefs object, specifying the appropriate file paths and data."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The String representation of the UserPrefs object."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + foodRecordFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 7,
      "ray-97": 17,
      "eugenetyc": 55,
      "-": 72
    }
  },
  {
    "path": "src/main/java/life/calgo/model/day/DailyFoodLog.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * A data structure that stores a map of Food to portion and Food to rating for a certain date where food is consumed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class DailyFoodLog {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int RATING_DUMMY_VALUE \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private final LinkedHashMap\u003cFood, Double\u003e foods;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LocalDate localDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Functions as constructor when you have attributes you wish to set."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param foods LinkedHashMap representing the mapping of Food to its portion."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param ratings LinkedHashMap representing the mapping of Food to its ratings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param localDate LocalDate associated to the DailyFoodLog."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog(LinkedHashMap\u003cFood, Double\u003e foods,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings, LocalDate localDate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireAllNonNull(foods, ratings, localDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foods \u003d foods;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.localDate \u003d localDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.ratings \u003d ratings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns a new DailyFoodLog with same data fields, but different date."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param date Date you wish to set the log to."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Replica of this DailyFoodLog, with different date."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog setDate(LocalDate date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(copyFoods(), copyRatings(), date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Adds food into foods LinkedHashMap."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food Food that has been consumed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param quantity Number of portions of food that has been consumed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Updated DailyFoodLog object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog consume(Food food, double quantity) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(this.add(food, quantity), copyRatings(), localDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper method to consume method."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param foodToAdd Food object to be added to LinkedHashMap as key."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param quantity Double representing portion, to be stored as value in LinkedHashMap."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return LinkedHashMap containing the Food and portion as key-value pairs."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cFood, Double\u003e add(Food foodToAdd, double quantity) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d copyFoods();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (foods.containsKey(foodToAdd)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(foodToAdd, quantity + foods.get(foodToAdd));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(foodToAdd, quantity);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            ratings.put(foodToAdd, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Decreases portion of food consumed in the key value pair, or totally remove the entry."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food Food that is to be removed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param quantity Number of portions of food that should be removed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Updated DailyFoodLog object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog vomit(Food food, OptionalDouble quantity) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(this.remove(food, quantity), copyRatings(), localDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper method to vomit method."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param foodToRemove Food object to be possibly removed LinkedHashMap\u0027s key."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param quantity Double representing portion to reduce by."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return LinkedHashMap containing the Food and portion as key-value pairs."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cFood, Double\u003e remove(Food foodToRemove, OptionalDouble quantity) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d copyFoods();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        boolean shouldRemoveCompletely \u003d quantity.isEmpty() || quantity.getAsDouble() \u003e\u003d foods.get(foodToRemove);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!foods.containsKey(foodToRemove)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } else if (shouldRemoveCompletely) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.remove(foodToRemove);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            ratings.put(foodToRemove, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(foodToRemove, foods.get(foodToRemove) - quantity.getAsDouble());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Replaces food in current DailyFoodLog with updated food."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param newFood Food with updated attribute(s)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Updated DailyFoodLog object."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog updateFoodWithSameName(Food newFood) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d copyFoods();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings \u003d copyRatings();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        OptionalDouble portion \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ArrayList\u003cInteger\u003e rating \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food: this.foods.keySet()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            if (food.isSameFood(newFood)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                portion \u003d OptionalDouble.of(foods.remove(food));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                rating \u003d new ArrayList\u003c\u003e(this.ratings.get(food));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ratings.remove(food);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (portion.isPresent()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(newFood, portion.getAsDouble());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            ratings.put(newFood, rating);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(foods, ratings, localDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as an accessor method to get the set of food objects in the data structure."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Set of food objects."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Set\u003cFood\u003e getFoods() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food: this.foods.keySet()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(food, this.foods.get(food));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return foods.keySet();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Retrieves a Food object by its position in the LinkedHashMap."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param index Zero based index of the food object."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Food object within an optional wrapper."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws IndexOutOfBoundsException If given index is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cFood\u003e getFoodByIndex(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArrayList\u003cFood\u003e temp \u003d new ArrayList\u003c\u003e(foods.keySet());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Food food \u003d (Food) temp.get(index);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return Optional.of(food);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as an accessor method to get the portion consumed of a given food object."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food Food consumed."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Portion of food consumed in DailyFoodLog."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public double getPortion(Food food) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!foods.containsKey(food)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods.get(food);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Calculates the total number of calories consumed based on all food objects stored in DailyFoodLog object."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return total number of calories consumed in this DailyFoodLog object."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public double getTotalCalories() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        double totalCalories \u003d 0.0;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (Food food : foods.keySet()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            totalCalories +\u003d Integer.parseInt(food.getCalorie().value) * foods.get(food);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return totalCalories;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Adds an Integer into the list of ratings related to a Food object."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food Food that receives rating."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param rating Rating given to the food."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return DailyFoodLog object with rating added."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog addRating(Food food, int rating) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings \u003d copyRatings();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.get(food).add(rating);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(copyFoods(), ratings, localDate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as accessor method to get rating that is to be displayed for a given food object."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food Food that rating is for."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Double representing the rating to display."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public double getRating(Food food) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return getMeanRating(food);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper method to consume method."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param foodToAdd Food object to be added to LinkedHashMap as key."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param quantity Double representing portion, to be stored as value in LinkedHashMap."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return LinkedHashMap containing the Food and portion as key-value pairs."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as a helper method to calculate mean rating for getRating method."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food Food that you want rating of."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Double which is the average rating of food, calculated based on it\u0027s ratings array."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private double getMeanRating(Food food) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        OptionalDouble average \u003d ratings.get(food).stream().mapToInt(i -\u003e i).average();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (average.isEmpty()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return RATING_DUMMY_VALUE;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return average.getAsDouble();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns a copy of this DailyFoodLog\u0027s ratings."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e copyRatings() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food: this.ratings.keySet()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            ratings.put(food.copy(), new ArrayList\u003c\u003e(this.ratings.get(food)));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return ratings;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns a copy of this DailyFoodLog\u0027s foods."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public LinkedHashMap\u003cFood, Double\u003e copyFoods() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food: this.foods.keySet()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(food.copy(), this.foods.get(food));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog copy() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(copyFoods(), copyRatings(), localDate);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!(other instanceof DailyFoodLog)) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog otherFoodLog \u003d (DailyFoodLog) other;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return otherFoodLog.getLocalDate().equals(getLocalDate())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 otherFoodLog.copyFoods().equals(copyFoods())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 otherFoodLog.copyRatings().equals(copyRatings());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 37,
      "ray-97": 251
    }
  },
  {
    "path": "src/main/java/life/calgo/model/day/DailyGoal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Represents the daily number of calories the user aims to consume in a day."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class DailyGoal implements ReadOnlyGoal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Values used for GoalCommandParser when parsing user inputted goals."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int MINIMUM_HEALTHY_CALORIES \u003d 1200;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int MINIMUM_ACCEPTABLE_CALORIES \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int MAXIMUM_ACCEPTABLE_CALORIES \u003d 99999;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Default value, when user does not input a goal."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int DUMMY_VALUE \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private int targetDailyCalories;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal(Integer numCalories) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(numCalories);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!isValidGoal(numCalories)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new IllegalArgumentException(\"An inadmissible value of daily goal has been given\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.targetDailyCalories \u003d numCalories;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal(ReadOnlyGoal readOnlyGoal) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.targetDailyCalories \u003d readOnlyGoal.getGoal();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.targetDailyCalories \u003d DUMMY_VALUE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Getter method"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Integer getGoal() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return targetDailyCalories;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Setter method"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Updates value of \u003ccode\u003etargetDailyCalories\u003c/code\u003e to \u003ccode\u003enewTarget\u003c/code\u003e."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param newTarget The new desired number of calories to consume each day."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return Updated DailyGoal object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal updateDailyGoal(Integer newTarget) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new DailyGoal(newTarget);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Utility methods"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static boolean isValidGoal(Integer targetDailyCalories) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return targetDailyCalories \u003e\u003d MINIMUM_ACCEPTABLE_CALORIES \u0026\u0026 targetDailyCalories \u003c\u003d MAXIMUM_ACCEPTABLE_CALORIES;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return \"Calorie goal: \" + this.targetDailyCalories;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Checks if the current DailyGoal can be considered equivalent to the other, based on identity and value."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param other the other DailyGoal to compare with."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return whether the current DailyGoal and the other can be considered equivalent."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                || (other instanceof DailyGoal"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u0026\u0026 targetDailyCalories \u003d\u003d (((DailyGoal) other).targetDailyCalories));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 81,
      "ray-97": 1
    }
  },
  {
    "path": "src/main/java/life/calgo/model/day/UniqueDateToLogMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.DisplayFood;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * A data structure to hold date keys which have corresponding food consumed as their values."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class UniqueDateToLogMap {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final HashMap\u003cLocalDate, DailyFoodLog\u003e internalMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final ObservableList\u003cDisplayFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final ObservableList\u003cDisplayFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog getLogByDate(LocalDate date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return internalMap.get(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public List\u003cDailyFoodLog\u003e getDailyFoodLogs() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new ArrayList\u003c\u003e(internalMap.values());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Checks if internalMap has an existing DailyFoodLog with same date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param foodLog DailyFoodLog containing the date you want to search with."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return True if internalMap contains a DailyFoodLog with same date as foodLog."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean hasLogWithSameDate(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return internalMap.containsKey(foodLog.getLocalDate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Populates internalMap with LocalDate and DailyFoodLog key value pairs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param dateToLogMap HashMap containing data to populate internalMap."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void setDateToLogMap(HashMap\u003cLocalDate, DailyFoodLog\u003e dateToLogMap) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        internalMap.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (DailyFoodLog dailyFoodLog : dateToLogMap.values()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            internalMap.put(dailyFoodLog.getLocalDate() , dailyFoodLog.copy());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns key value pairs inside internalMap as a HashMap."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public HashMap\u003cLocalDate, DailyFoodLog\u003e getDateToLogMap() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        HashMap\u003cLocalDate, DailyFoodLog\u003e copy \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (DailyFoodLog dailyFoodLog : internalMap.values()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            copy.put(dailyFoodLog.getLocalDate(), dailyFoodLog.copy());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Updates every food with same name in each DailyFoodLog in internalMap."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param food Food that is most up-to-date with Food Record."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateMapWithFood(Food food) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (DailyFoodLog log: internalMap.values()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            internalMap.put(log.getLocalDate(), log.updateFoodWithSameName(food));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void addLog(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        internalMap.put(foodLog.getLocalDate(), foodLog);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Updates internal key-value pair by updating the value of the given date key."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param logAfterConsumption The updated day object after consuming a certain food"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void updateLog(DailyFoodLog logAfterConsumption) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireAllNonNull(logAfterConsumption);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        internalMap.put(logAfterConsumption.getLocalDate(), logAfterConsumption);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Sets internalList to reflect a DailyFoodLog with DisplayFood items."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param date Date of DailyFoodLog be reflected."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws CommandException If user requests to display an empty DailyFoodLog."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void setDailyListDate(LocalDate date) throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!internalMap.containsKey(date)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    String.format(\"Your consumption record is empty because you have not consumed food \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    + \"on %s before\", date));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Set\u003cFood\u003e foods \u003d internalMap.get(date).getFoods();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (!foods.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            for (Food food : foods) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                DailyFoodLog foodLog \u003d internalMap.get(date);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                double portion \u003d foodLog.getPortion(food);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                double rating \u003d foodLog.getRating(food);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                internalList.add(new DisplayFood(food, portion, rating, date));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ObservableList\u003cDisplayFood\u003e asUnmodifiableDailyList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                || (other instanceof UniqueDateToLogMap // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                \u0026\u0026 internalMap.equals(((UniqueDateToLogMap) other).internalMap));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return internalMap.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 135
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Calorie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Foods\u0027s caloric content in the Food Records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCalorie(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class Calorie {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            \"Calorie should only contain non-negative integers within 5 digits and it should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+(?\u003d$|\\\\s)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs a {@code Calorie}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param caloricValue A valid calorie amount."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Calorie(String caloricValue) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(caloricValue);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(isValidCalorie(caloricValue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        value \u003d caloricValue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a given string is a valid Calorie."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param test the String representation of the Calorie\u0027s value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether this can be considered a valid Calorie."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static boolean isValidCalorie(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the String representation of the Calorie\u0027s value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the String representation of the Calorie\u0027s value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the current Calorie can be considered equivalent to the other, based on identity and value."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other Calorie to compare with."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current Calorie and the other can be considered equivalent."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof Calorie"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 value.equals(((Calorie) other).value));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Provides hashcode for the current Calorie object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return hashcode for the current Calorie object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 6,
      "eugenetyc": 33,
      "-": 33
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Carbohydrate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Food\u0027s carbohydrate content in grams in the Food Records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCarbohydrate(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class Carbohydrate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            \"Carbohydrate should only contain non-negative integers within 5 digits and it should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+(?\u003d$|\\\\s)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs a {@code Carbohydrate}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param carbohydrateGrams A valid Carbohydrate amount in grams."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Carbohydrate(String carbohydrateGrams) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(carbohydrateGrams);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        AppUtil.checkArgument(isValidCarbohydrate(carbohydrateGrams), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        value \u003d carbohydrateGrams;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a given string is a valid Carbohydrate."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param test the String representation of the Carbohydrate\u0027s value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether this can be considered a valid Carbohydrate."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static boolean isValidCarbohydrate(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the String representation of the Carbohydrate\u0027s value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the String representation of the Carbohydrate\u0027s value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the current Carbohydrate can be considered equivalent to the other, based on identity and value."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other Carbohydrate to compare with."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current Carbohydrate and the other can be considered equivalent."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof Carbohydrate // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 value.equals(((Carbohydrate) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Provides hashcode for the current Carbohydrate object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return hashcode for the current Carbohydrate object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "eugenetyc": 69
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/DisplayFood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * To represent food objects that have been consumed by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class DisplayFood extends Food {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final double portion;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final double rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DisplayFood(Food food, double portion, double rating, LocalDate date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        super(food.getName(), food.getCalorie(), food.getProtein(), food.getCarbohydrate(),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                food.getFat(), food.getTags());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.portion \u003d portion;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public double getPortion() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return this.portion;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public String getRating() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return rating \u003d\u003d -1 ? \"Not available yet\" : String.format(\"%.1f\", rating);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public int compareTo(Food other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DisplayFood otheDisplayFood \u003d (DisplayFood) other;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return Double.compare(this.rating, otheDisplayFood.rating);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 8,
      "ray-97": 30,
      "jeremylow97": 1
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Fat.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Food\u0027s fat content in grams in the Food Records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFat(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class Fat {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            \"Fat should only contain non-negative integers within 5 digits and it should not be blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+(?\u003d$|\\\\s)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs a {@code Fat}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param fatGrams A valid Fat amount in grams."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Fat(String fatGrams) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(fatGrams);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(isValidFat(fatGrams), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        value \u003d fatGrams;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a given string is a valid Fat."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param test the String representation of the Fat\u0027s value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether this can be considered a valid Fat."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static boolean isValidFat(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the String representation of the Fat\u0027s value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the String representation of the Fat\u0027s value."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the current Fat can be considered equivalent to the other, based on identity and value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other Fat to compare with."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current Fat and the other can be considered equivalent."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof Fat"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 value.equals(((Fat) other).value));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Provides hashcode for the current Fat object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return hashcode for the current Fat object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 6,
      "eugenetyc": 33,
      "-": 34
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Food in the food record."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class Food implements Comparable\u003cFood\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Calorie calorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Protein protein;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Carbohydrate carbohydrate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Fat fat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Can be left empty by user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Every field except for Tags must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Food(Name name, Calorie calorie, Protein protein, Carbohydrate carbohydrate, Fat fat, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, calorie, protein, carbohydrate, fat, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.carbohydrate \u003d carbohydrate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Calorie getCalorie() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Protein getProtein() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return protein;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Carbohydrate getCarbohydrate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return carbohydrate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Fat getFat() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return fat;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Food copy() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new Food(name, calorie, protein, carbohydrate, fat, tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if both foods have the same Name."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This defines a weaker notion of equality between two foods."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean isSameFood(Food otherFood) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (otherFood \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                \u0026\u0026 otherFood.getName().equals(getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if the current Food object has the same Name as the argument."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param name the name we want to check against the current Food object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether or not the current Food object has the same Name as the given."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public boolean hasName(Name name) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return name.equals(getName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if both foods have equivalent values for all fields."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This defines a stronger notion of equality between two foods."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other Food to compare with."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the 2 Food objects can be considered equivalent."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Food otherFood \u003d (Food) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return otherFood.getName().equals(getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 otherFood.getCalorie().equals(getCalorie())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 otherFood.getProtein().equals(getProtein())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 otherFood.getCarbohydrate().equals(getCarbohydrate())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 otherFood.getFat().equals(getFat())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 otherFood.getTags().equals(getTags());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains the hashcode for the current Food object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the hashcode for the current Food object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return Objects.hash(name, calorie, protein, carbohydrate, fat, tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Provides a String representation containing all the fields of the current Food item."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return a String representation of the current Food item."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int numTags \u003d getTags().size();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(getCalorie())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(\" Proteins (g): \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(getProtein())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(\" Carbohydrates (g): \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(getCarbohydrate())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .append(\" Fats (g): \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                .append(getFat());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (numTags !\u003d 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtain the String representation of the current Food object\u0027s Name."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return String representation of the current Food object\u0027s Name."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public String getFoodNameString() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return this.getName().toString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Compares names of Food objects for lexicographic order."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other Food to compare against."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return a value representing the lexicographic order."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public int compareTo(Food other) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String currentName \u003d this.getName().toString();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String otherName \u003d other.getName().toString();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return currentName.compareTo(otherName);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 13,
      "ray-97": 8,
      "eugenetyc": 158,
      "jeremylow97": 1
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Food\u0027s name in the Food Records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The first character of the food must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param test the candidate Name for the Food."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether this String is suitable to create a Name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains the String representation of the Name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the String representation of the Name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the current Name can be considered equivalent to the other, based on identity and value."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other Name to compare with."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current Name and the other can be considered equivalent."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof Name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Provides hashcode for the current Name object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return hashcode for the current Name object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 6,
      "eugenetyc": 24,
      "-": 48
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/Protein.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Food\u0027s protein content in grams in the food record."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidProtein(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class Protein {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            \"Protein should only contain non-negative integers within 5 digits and it should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+(?\u003d$|\\\\s)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs an {@code Protein}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param proteinGrams A valid Protein amount in grams."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Protein(String proteinGrams) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(proteinGrams);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(isValidProtein(proteinGrams), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        value \u003d proteinGrams;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a given string is a valid Protein."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param test the String representation of the Protein\u0027s value."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether this can be considered a valid Protein."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static boolean isValidProtein(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the String representation of the Protein\u0027s value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the String representation of the Protein\u0027s value."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the current Protein can be considered equivalent to the other, based on identity and value."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other Protein to compare with."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current Protein and the other can be considered equivalent."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof Protein // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 value.equals(((Protein) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Provides hashcode for the current Protein object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return hashcode for the current Protein object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 6,
      "eugenetyc": 68
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/UniqueFoodList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * A list of food that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * A food is considered unique by comparing using {@code Food#isSameFood(Food)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * foods uses Food#isSameFood(Food) for equality so as to ensure that the food being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * unique in terms of identity in the UniqueFoodList. However, the removal of a food uses Food#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * @see Food#isSameFood(Food)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class UniqueFoodList implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Adds a food to the UniqueFoodList\u0027s internalList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The food must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        sortInternalList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!target.isSameFood(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Removes the equivalent food from the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * The food must currently exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #setFoods(List)}, but now takes in a UniqueFoodList."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param replacement the new source UniqueFoodList."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoods(UniqueFoodList replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        sortInternalList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Replaces the contents of this list with {@code foods}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code foods} must not contain duplicate persons."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CollectionUtil.requireAllNonNull(foods);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!foodsAreUnique(foods)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        sortInternalList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cFood\u003e getFoodByName(Name name) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food:internalList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            if (food.hasName(name)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                return Optional.of(food);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the existing Food in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * The food must currently exist in the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public Food getExistingFood(Food toGet) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return internalList.stream().filter(toGet::isSameFood).findFirst().get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof UniqueFoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFoodList) other).internalList));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private boolean foodsAreUnique(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Sorts the UniqueFoodList according to the order specified for the Food objects."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * As of v1.4, it is the lexicographical order."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private void sortInternalList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 7,
      "ray-97": 10,
      "eugenetyc": 61,
      "jeremylow97": 8,
      "-": 88
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/exceptions/DuplicateFoodException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Signals that the operation will result in duplicate Food objects (they are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        super(\"Operation would result in duplicate food entries\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 10
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/exceptions/FoodNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 5
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/CalorieContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Calorie} matches the {@code Calorie} keyword given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class CalorieContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public CalorieContainsKeywordsPredicate(Calorie calorie) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.keyword \u003d calorie.value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the Food specified has an exact match in the Calorie value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param food the Food to check against."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the Food specified has an exact match in the Calorie value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return StringUtil.containsNutritionalValueEqualTo(food.getCalorie().value, keyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks for equality between the current and the other predicate, using their keyword, or identity."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other predicate to check against."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current and the other predicate can be considered equal."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof CalorieContainsKeywordsPredicate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keyword.equals(((CalorieContainsKeywordsPredicate) other).keyword));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 43
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/CarbohydrateContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Carbohydrate} matches the {@code Carbohydrate} keyword given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class CarbohydrateContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public CarbohydrateContainsKeywordsPredicate(Carbohydrate carbohydrate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.keyword \u003d carbohydrate.value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the Food specified has an exact match in the Carbohydrate value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param food the Food to check against."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the Food specified has an exact match in the Carbohydrate value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return StringUtil.containsNutritionalValueEqualTo(food.getCarbohydrate().value, keyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks for equality between the current and the other predicate, using their keyword, or identity."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other predicate to check against."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current and the other predicate can be considered equal."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof CarbohydrateContainsKeywordsPredicate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keyword.equals(((CarbohydrateContainsKeywordsPredicate) other).keyword));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 43
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/FatContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Fat} matches the {@code Fat} keyword given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class FatContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FatContainsKeywordsPredicate(Fat fat) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.keyword \u003d fat.value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the Food specified has an exact match in the Fat value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param food the Food to check against."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the Food specified has an exact match in the Fat value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return StringUtil.containsNutritionalValueEqualTo(food.getFat().value, keyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks for equality between the current and the other predicate, using their keyword, or identity."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other predicate to check against."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current and the other predicate can be considered equal."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof FatContainsKeywordsPredicate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keyword.equals(((FatContainsKeywordsPredicate) other).keyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 44
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/FoodRecordContainsFoodNamePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Calorie} matches the {@code Calorie} keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodRecordContainsFoodNamePredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final String foodName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodRecordContainsFoodNamePredicate(String foodName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        boolean foodStartsWithInputFoodName \u003d food.getName().fullName.toLowerCase()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .startsWith(foodName.toLowerCase().trim());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        boolean inputFoodNameStartsWithFood \u003d foodName.toLowerCase().trim()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .startsWith(food.getName().fullName.toLowerCase());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return foodStartsWithInputFoodName || inputFoodNameStartsWithFood;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                || (other instanceof FoodRecordContainsFoodNamePredicate"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                \u0026\u0026 foodName.equals(((FoodRecordContainsFoodNamePredicate) other).foodName));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 34
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public NameContainsKeywordsPredicate(Name name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String[] nameKeywords \u003d name.fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ArrayList\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the Food specified contains the keyword(s) in any part of its Name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param food the Food to check against."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the Food specified has any matches of the keyword(s) in its Name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(food.getName().fullName, keyword));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks for equality between the current and the other predicate, using their keywords, or identity."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other predicate to check against."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current and the other predicate can be considered equal."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "eugenetyc": 27,
      "-": 21
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/ProteinContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Protein} matches the {@code Protein} keyword given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class ProteinContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ProteinContainsKeywordsPredicate(Protein protein) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.keyword \u003d protein.value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the Food specified has an exact match in the Protein value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param food the Food to check against."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the Food specified has an exact match in the Protein value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return StringUtil.containsNutritionalValueEqualTo(food.getProtein().value, keyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks for equality between the current and the other predicate, using their keyword, or identity."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other predicate to check against."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current and the other predicate can be considered equal."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof ProteinContainsKeywordsPredicate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keyword.equals(((ProteinContainsKeywordsPredicate) other).keyword));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 43
    }
  },
  {
    "path": "src/main/java/life/calgo/model/food/predicates/TagContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.model.food.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tests that any of a {@code Food}\u0027s {@code Tag} matches any of the {@code Tag} keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (Tag t : tagList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            this.keywords.add(t.tagName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if the keyword(s) mentioned appear as part of any Tag of the Food."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param food the Food to check for Tags."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the keyword(s) mentioned appear as part of any Tag of the Food."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            food.getTags().stream().anyMatch(singleTag -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                StringUtil.containsWordIgnoreCase(singleTag.tagName, keyword)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            )"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks for equality between the current and the other predicate, using their keywords, or identity."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param other the other predicate to check against."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current and the other predicate can be considered equal."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 52
    }
  },
  {
    "path": "src/main/java/life/calgo/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a Tag in the food record."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be single-worded and alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns true if a given String is a valid Tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param test The String to check for validity."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Whether the given String can be used for a valid Tag name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks if the current Tag can be considered equivalent to the other, based on identity and tagName."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param other The other Tag to compare with."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return Whether the current Tag and the other can be considered equivalent."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                || (other instanceof Tag"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Provides hashcode for the current Tag object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return hashcode for the current Tag object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "ray-97": 4,
      "eugenetyc": 16,
      "-": 44
    }
  },
  {
    "path": "src/main/java/life/calgo/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Contains utility methods for populating {@code FoodRecord} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * This is particularly useful for initialising the App on first time usage with some data to begin with."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static Food[] getSampleFoods() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Food[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Hainanese Chicken Rice\"), new Calorie(\"389\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                new Protein(\"11\"), new Carbohydrate(\"38\"), new Fat(\"21\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                getTagSet(\"Meat\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Laksa\"), new Calorie(\"499\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Protein(\"25\"), new Carbohydrate(\"58\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Fat(\"18\"), getTagSet(\"Spicy\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Char Kuay Teow\"), new Calorie(\"742\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Protein(\"23\"), new Carbohydrate(\"76\"), new Fat(\"38\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    getTagSet(\"GuiltFood\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Roti Prata\"), new Calorie(\"212\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Protein(\"0\"), new Carbohydrate(\"26\"), new Fat(\"10\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Breakfast\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Mee Rebus\"), new Calorie(\"571\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Protein(\"23\"), new Carbohydrate(\"82\"), new Fat(\"17\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    getTagSet(\"Kampung\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new Food(new Name(\"Bandung\"), new Calorie(\"150\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    new Protein(\"4\"), new Carbohydrate(\"17\"), new Fat(\"9\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Pink\", \"Sweet\", \"Favourite\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Black Forest Cake Slice\"), new Calorie(\"340\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"4\"), new Carbohydrate(\"22\"), new Fat(\"8\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Amy\", \"Birthday\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Cheeseburger\"), new Calorie(\"450\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"22\"), new Carbohydrate(\"27\"), new Fat(\"16\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Restaurant\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Chicken Cutlet Meal\"), new Calorie(\"650\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"30\"), new Carbohydrate(\"33\"), new Fat(\"19\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Whampoa\", \"Hawker\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Fried Chicken Wing\"), new Calorie(\"175\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"8\"), new Carbohydrate(\"4\"), new Fat(\"4\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Delicious\", \"Jumbo\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Pineapple Chicken Rice\"), new Calorie(\"589\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"7\"), new Carbohydrate(\"35\"), new Fat(\"8\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Sweet\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Strawberry Milk\"), new Calorie(\"200\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"6\"), new Carbohydrate(\"17\"), new Fat(\"3\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Sweet\", \"Pink\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Sambal Chilli\"), new Calorie(\"100\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"1\"), new Carbohydrate(\"6\"), new Fat(\"3\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Sauce\", \"sweet\", \"Best\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Hot Dog Bun\"), new Calorie(\"150\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"4\"), new Carbohydrate(\"12\"), new Fat(\"2\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Bread\", \"Processed\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Cheesy Bites\"), new Calorie(\"300\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"8\"), new Carbohydrate(\"12\"), new Fat(\"5\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Midnight\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Fried Bee Hoon\"), new Calorie(\"300\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"2\"), new Carbohydrate(\"17\"), new Fat(\"3\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Grandma\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Irish Whiskey\"), new Calorie(\"50\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"0\"), new Carbohydrate(\"3\"), new Fat(\"1\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Bros\", \"Fuel4Code\", \"getYourGameON\")),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Chocolate Biscuits\"), new Calorie(\"170\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"1\"), new Carbohydrate(\"13\"), new Fat(\"2\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Favourite\", \"Chocolatey\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Salmon Creamy Linguine\"), new Calorie(\"500\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"10\"), new Carbohydrate(\"27\"), new Fat(\"9\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Italian\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new Food(new Name(\"Stirfried Kai Lan in Oyster Sauce\"), new Calorie(\"200\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    new Protein(\"0\"), new Carbohydrate(\"12\"), new Fat(\"0\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                    getTagSet(\"Chinese\"))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static ReadOnlyFoodRecord getSampleFoodRecord() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        FoodRecord sampleFr \u003d new FoodRecord();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (Food sampleFood : getSampleFoods()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            sampleFr.addFood(sampleFood);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return sampleFr;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 13,
      "eugenetyc": 50,
      "jeremylow97": 16,
      "-": 25
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/ConsumptionRecordStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Represents a storage for {@link ReadOnlyConsumptionRecord}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public interface ConsumptionRecordStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    Path getConsumptionRecordFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns ConsumptionRecord data as a {@link ReadOnlyConsumptionRecord}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws DataConversionException If the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException If there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @see #getConsumptionRecordFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord(Path filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Saves the given {@link ReadOnlyConsumptionRecord} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param consumptionRecord Cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException If there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @see #saveConsumptionRecord(ReadOnlyConsumptionRecord, Path)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 47,
      "eugenetyc": 1
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/DocumentGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * An abstract class representing functionality for ReportGenerator and ExportGenerator."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public abstract class DocumentGenerator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public static final int DOCUMENT_WIDTH \u003d 120;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected PrintWriter printWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected File file;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected final Logger logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DocumentGenerator(String pathName, Logger logger) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.file \u003d new File(pathName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.logger \u003d logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            this.printWriter \u003d new PrintWriter(file);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // happens when there is an error in opening or creating the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            logger.warning(\"Not able to generate document because file was unable to be created.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // other issues, usually due to the user\u0027s system."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            logger.warning(\"Check your system security settings and enable rights to create a new file.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Printing Methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the context/meta-information of the document."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected abstract void printHeader();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the body of the document."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected abstract void printBody();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the concluding remarks in the document."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected abstract void printFooter();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes a line for neatness in formatting."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    protected void printSeparator() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(\"--------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                + \"---------------------------------------\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes an empty line."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    protected void printEmptyLine() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printWriter.println(\"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // String Manipulation Methods"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains the wrapped String representation of the given Name suited for the specified width."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param name the Name of the Food which we want to wrap."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param width the maximum allowed width of the Name segment."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the wrapped String representation of the Name for the given width."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    protected String generateWrappedNameString(Name name, int width) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String workablePart \u003d getNameString(name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        while (!hasAcceptableLength(workablePart, width)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            result +\u003d getNextSegment(workablePart, width); // in a new line each time to follow visual format"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            workablePart \u003d getNextWorkablePart(workablePart, width);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assert (hasAcceptableLength(workablePart, width)) : \"The supposedly truncated String is still too long.\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        result +\u003d workablePart; // definitely within acceptable length at this point"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Centralises the specified String."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param text The String to be centralised."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param width The width of the line whereby String should be centralised."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return The processed String that has been centralised."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected String centraliseText(String text, int width) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int lengthOfText \u003d text.length();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int numWhitespace \u003d (width - lengthOfText) / 2;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String prefixedText \u003d addNLeadingWhitespace(text, numWhitespace);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return addNTrailingWhitespace(prefixedText, numWhitespace);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Adds a prefix of a given number of whitespaces to a given string."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param text The given string."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param n The number of whitespaces to add before the given string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return The string with leading whitespaces."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected String addNLeadingWhitespace(String text, int n) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return \" \".repeat(n) + text;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Adds a suffix of a given number of whitespaces to a given string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param text The given string."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param n The number of whitespaces to add after the given string."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return The string with trailing whitespaces."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected String addNTrailingWhitespace(String text, int n) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return text + \" \".repeat(n);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Utility Methods"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Removes the first (width) number of characters and returns the remaining String to continue working with."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param workablePart the original String to work with."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param width the number of characters to remove."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the remaining String after characters are removed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    protected String getNextWorkablePart(String workablePart, int width) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return workablePart.substring(width);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains the truncated part (in a new line) from the middle of a String considered too long for the formatting."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param workablePart the String we extract the part from."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param width the length of the extracted part."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the truncated part we wish to extract."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    protected String getNextSegment(String workablePart, int width) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return workablePart.substring(0, width) + \"\\n\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    protected String getNameString(Name name) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return name.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks whether the current Name contains a String within the acceptable length for the visual format."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param part the current String to check, which can represent a substring of another String."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param length the acceptable length."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the given String is within acceptable limits."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    protected boolean hasAcceptableLength(String part, int length) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return (part.length() \u003c\u003d length);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 88,
      "eugenetyc": 89
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/ExportGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Generating a user-friendly and editable copy of the current FoodRecord."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * All Food entries will have all their details written into the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Names that are too long will be truncated onto the next line, with nutritional details on the first line."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tags are outside of the dashed lines as users may have a large number of them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Tags are informal and hence less significant, so they should not be within the dashed lines."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class ExportGenerator extends DocumentGenerator {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String PATH_NAME \u003d \"data/exports/FoodRecord.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Formatting"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final int NAME_COLUMN_SIZE \u003d 45;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final int VALUE_COLUMN_SIZE \u003d 20;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final String STRING_FORMAT \u003d \"%-\" + NAME_COLUMN_SIZE + \"s \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"%-\" + VALUE_COLUMN_SIZE + \"s \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"%-\" + VALUE_COLUMN_SIZE + \"s \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"%-\" + VALUE_COLUMN_SIZE + \"s \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"%-\" + VALUE_COLUMN_SIZE + \"s \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            + \"%-\" + VALUE_COLUMN_SIZE + \"s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private ReadOnlyFoodRecord foodRecord;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public ExportGenerator(ReadOnlyFoodRecord foodRecord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        super(PATH_NAME, LogsCenter.getLogger(ExportGenerator.class));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodRecord \u003d foodRecord;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Formats and details the current Food Record into a txt file, then returns true if successful."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return a boolean value that is true only if FoodRecord.txt is successfully generated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public boolean generateExport() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printHeader();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printBody();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printFooter();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return file.exists() \u0026\u0026 (file.length() !\u003d 0); // success check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Printing Methods"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the header of the document."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected void printHeader() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printHeaderComponent();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the entire current Food Record into the FoodRecord.txt."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected void printBody() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printCategoriesComponent(); // categories are part of the body to indicate the table format visually to user"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printBodyComponent();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the concluding statement of the document."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected void printFooter() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printFooterComponent();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the main part of the header."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private void printHeaderComponent() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String title \u003d centraliseText(\"Your Food Record: A Collection of Your Past Entries\", DOCUMENT_WIDTH);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printWriter.println(title);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the main part of the body."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private void printBodyComponent() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ObservableList\u003cFood\u003e sourceFoodRecord \u003d foodRecord.getFoodList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (Food food : sourceFoodRecord) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            String processedString \u003d generateFinalisedEntryString(food);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            printWriter.println(processedString);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the main part of the footer."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private void printFooterComponent() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String footer \u003d centraliseText(\"Eat Good, Live Well!\", DOCUMENT_WIDTH);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printWriter.println(footer);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the categories of the nutritional information of each Food in the Food Record."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private void printCategoriesComponent() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String categories \u003d String.format("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                STRING_FORMAT, \"Name\", \"Calories\", \"Protein(g)\", \"Carbohydrates(g)\", \"Fat(g)\", \"Tags: \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printWriter.println(categories);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // String Manipulation Methods"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Generates the full String representing the Food with all its nutritional details."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Names too long are truncated onto the next line."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param food the Food of interest."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the String representation for the Food entry."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private String generateFinalisedEntryString(Food food) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Name name \u003d food.getName();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Calorie calorie \u003d food.getCalorie();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Protein protein \u003d food.getProtein();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Carbohydrate carbohydrate \u003d food.getCarbohydrate();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Fat fat \u003d food.getFat();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Set\u003cTag\u003e tags \u003d food.getTags();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (hasAcceptableLength(name, NAME_COLUMN_SIZE)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return generateFirstLine(name, calorie, protein, carbohydrate, fat, tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Name truncatedName \u003d getTruncatedName(name, NAME_COLUMN_SIZE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            String firstLine \u003d generateFirstLine(truncatedName, calorie, protein, carbohydrate, fat, tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Name untruncatedName \u003d getUntruncatedName(name, NAME_COLUMN_SIZE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            String remainderLines \u003d generateRemainderLines(untruncatedName, NAME_COLUMN_SIZE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return firstLine + remainderLines;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Generates the first line of the String representing the Food with all its nutritional details."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Names too long should be truncated onto the next line and"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * uses {@link #generateRemainderLines(Name, int)}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param name the Name of the Food."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param calorie the Calorie of the Food."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param protein the Protein of the Food."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param carbohydrate the Carbohydrate of the Food."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param fat the Fat of the Food."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param tags the Set of Tags of the Food."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the first and possibly only line of the String representing the Food with all its nutritional details."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private String generateFirstLine(Name name, Calorie calorie, Protein protein,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                                     Carbohydrate carbohydrate, Fat fat, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return String.format(STRING_FORMAT,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                name, calorie, protein, carbohydrate, fat, generateAccumulatedTagsString(tags));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Obtains the equivalent of the remainder part of the Name that does not appear in the same line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * as the nutritional details."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param remainder the Name representing the untruncated part of the name of the Food."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param width the maximum allowed width of the name segment."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the remainder part of the Name not previously shown."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private String generateRemainderLines(Name remainder, int width) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String result \u003d \"\\n\"; // adding to the truncated front part, hence a newline is needed"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // Wraps the remaining part of the Name so that it suits the required formatting"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        result +\u003d super.generateWrappedNameString(remainder, width);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Accumulates all the Tags into a space-separated String and returns this String."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param tags the tags to be converted into String representation."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the space-separated String of all the tags given."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private String generateAccumulatedTagsString(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (Tag tag: tags) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            result +\u003d tag + \" \";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Utility Methods"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Gets a new Name object containing the truncated full name of the original Name object."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param name the original Name object we wish to truncate from."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Name getTruncatedName(Name name, int truncateLength) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String nameString \u003d getNameString(name);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String truncatedNameString \u003d nameString.substring(0, truncateLength);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Name(truncatedNameString);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Gets a new Name object containing the untruncated part of the name of the original Name object."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * This is complementary to the {@link #getTruncatedName(Name, int)} method."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param name the original Name object we wish to truncate from."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Name getUntruncatedName(Name name, int truncateLength) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String nameString \u003d getNameString(name);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String truncatedNameString \u003d nameString.substring(truncateLength);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Name(truncatedNameString);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Checks whether the current Name contains a String within the acceptable length for the visual format."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #hasAcceptableLength(String, int)}, but now takes in a Name rather than a String."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param name the current Name to check."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param length the acceptable length."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return whether the current Name is within acceptable limits."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private boolean hasAcceptableLength(Name name, int length) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return (getNameString(name).length() \u003c\u003d length);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 13,
      "eugenetyc": 255
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/FoodRecordStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a storage for {@link FoodRecord}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public interface FoodRecordStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Path getFoodRecordFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns FoodRecord data obtained from the storage file as a {@link ReadOnlyFoodRecord}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns a ReadOnlyFoodRecord generated from a storage file specified by the filePath."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param filePath the file path of the source file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the resultant ReadOnlyFoodRecord obtained from the source file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws DataConversionException if the data in the file is not in the expected format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IOException if there was any problem when reading from the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @see #getFoodRecordFilePath()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the given {@link ReadOnlyFoodRecord} to the storage."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param foodRecord the ReadOnlyFoodRecord to be saved which cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void saveFoodRecord(ReadOnlyFoodRecord foodRecord) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the given {@link ReadOnlyFoodRecord} to the storage at a specified Path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param foodRecord the ReadOnlyFoodRecord to be saved."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param filePath the path of the storage file we want to save at."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @see #saveFoodRecord(ReadOnlyFoodRecord)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void saveFoodRecord(ReadOnlyFoodRecord foodRecord, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "eugenetyc": 54
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/GoalStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Represents a storage for {@link DailyGoal}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public interface GoalStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    Path getGoalFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns goal data obtained from the storage file as a {@link ReadOnlyGoal}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    Optional\u003cReadOnlyGoal\u003e readGoal() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #readGoal()}, but now reads from a specified file path."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param filePath the file path of the source file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @see #getGoalFilePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    Optional\u003cReadOnlyGoal\u003e readGoal(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Saves the given {@link ReadOnlyGoal} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param goal the ReadOnlyGoal to be saved which cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void saveGoal(ReadOnlyGoal goal) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #saveGoal(ReadOnlyGoal)}, but now saves to a specified file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param filePath the path of the storage file we want to save at."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @see #saveGoal(ReadOnlyGoal)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    void saveGoal(ReadOnlyGoal goal, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 40,
      "ray-97": 2,
      "eugenetyc": 11
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonAdaptedDailyFoodLog.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Jackson-friendly version of {@link DailyFoodLog}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class JsonAdaptedDailyFoodLog {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LinkedHashMap\u003cJsonAdaptedFood, Double\u003e foods;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LinkedHashMap\u003cJsonAdaptedFood, ArrayList\u003cInteger\u003e\u003e ratings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final LocalDate localDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Constructs a {@code JsonDailyFoodLog} with the given details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public JsonAdaptedDailyFoodLog("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @JsonProperty(\"foods\") LinkedHashMap\u003cJsonAdaptedFood, Double\u003e foods,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @JsonProperty(\"ratings\") LinkedHashMap\u003cJsonAdaptedFood, ArrayList\u003cInteger\u003e\u003e ratings,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @JsonProperty(\"localDate\") LocalDate localDate"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.foods \u003d foods;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.ratings \u003d ratings;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.localDate \u003d localDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Converts a given {@code JsonDailyFoodLog} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public JsonAdaptedDailyFoodLog(DailyFoodLog source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods \u003d adaptFoods(source.copyFoods());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings \u003d adaptRatings(source.copyRatings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        localDate \u003d source.getLocalDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as helper method to convert Food to adaptedFood for the whole LinkedHashMap,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * while maintaining the respecting portions associated with each food."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cJsonAdaptedFood, Double\u003e adaptFoods(LinkedHashMap\u003cFood, Double\u003e foods) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cJsonAdaptedFood, Double\u003e adaptedFoods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food : foods.keySet()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            adaptedFoods.put(new JsonAdaptedFood(food), foods.get(food));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return adaptedFoods;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as helper method to convert Food to adaptedFood for the whole LinkedHashMap,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * while maintaining the respecting ratings associated with each food."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cJsonAdaptedFood, ArrayList\u003cInteger\u003e\u003e adaptRatings("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cJsonAdaptedFood, ArrayList\u003cInteger\u003e\u003e adaptedRatings \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (Food food : ratings.keySet()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            adaptedRatings.put(new JsonAdaptedFood(food), new ArrayList\u003c\u003e(ratings.get(food)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return adaptedRatings;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as helper method to convert adaptedFood to Food for the whole LinkedHashMap,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * while maintaining the respecting portions associated with each food."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cFood, Double\u003e unAdaptFoods(LinkedHashMap\u003cJsonAdaptedFood, Double\u003e adaptedFoods)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (JsonAdaptedFood adaptedFood : adaptedFoods.keySet()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            foods.put(adaptedFood.toModelType(), adaptedFoods.get(adaptedFood));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Acts as helper method to convert adaptedFood to Food for the whole LinkedHashMap,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * while maintaining the respecting ratings associated with each food."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e unAdaptRatings("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            LinkedHashMap\u003cJsonAdaptedFood, ArrayList\u003cInteger\u003e\u003e adaptedRatings)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (JsonAdaptedFood adaptedFood : adaptedRatings.keySet()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            ratings.put(adaptedFood.toModelType(), new ArrayList\u003c\u003e(adaptedRatings.get(adaptedFood)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return ratings;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Converts this Jackson-friendly adapted DailyFoodLog object into the model\u0027s {@code DailyFoodLog} object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return DailyFoodLog equivalent of this adaptedDailyFoodLog object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IllegalValueException If there were any data constraints violated in the adaptedDailyFoodLog."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyFoodLog toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return new DailyFoodLog(unAdaptFoods(foods), unAdaptRatings(ratings), localDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 107
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonAdaptedFood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class JsonAdaptedFood {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String calorie;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String protein;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String carbohydrate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final String fat;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Constructing JsonAdaptedFood objects"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given Food details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param name Name of the Food."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param calorie Calorie of the Food."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param protein Protein of the Food."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param carbohydrate Carbohydrate of the Food."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param fat Fat of the Food."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param tagged Tags associated with the Food."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                           @JsonProperty(\"calorie\") String calorie,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                           @JsonProperty(\"protein\") String protein,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                           @JsonProperty(\"carbohydrate\") String carbohydrate,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                           @JsonProperty(\"fat\") String fat,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.carbohydrate \u003d carbohydrate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param source the source Food to be converted into a Jackson format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        calorie \u003d source.getCalorie().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        protein \u003d source.getProtein().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        carbohydrate \u003d source.getCarbohydrate().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        fat \u003d source.getFat().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Converting from JsonAdaptedFood objects to Model-friendly objects"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Converts this Jackson-friendly Adapted Food object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (calorie \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Calorie.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Calorie.isValidCalorie(calorie)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Calorie modelCalorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (protein \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Protein.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Protein.isValidProtein(protein)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Protein modelProtein \u003d new Protein(protein);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (carbohydrate \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    Carbohydrate.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Carbohydrate.isValidCarbohydrate(carbohydrate)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Carbohydrate modelCarbohydrate \u003d new Carbohydrate(carbohydrate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (fat \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Fat.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!Fat.isValidFat(fat)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new IllegalValueException(Fat.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Fat modelFat \u003d new Fat(fat);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final List\u003cTag\u003e foodTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            foodTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(foodTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new Food(modelName, modelCalorie, modelProtein, modelCarbohydrate, modelFat, modelTags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Provides a String representation of the JsonAdaptedFood\u0027s Name."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the String representation of the JsonAdaptedFood\u0027s Name."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 11,
      "ray-97": 4,
      "eugenetyc": 132
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonAdaptedGoal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Jackson-friendly version of {@link DailyGoal}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "class JsonAdaptedGoal {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private final int dailyGoal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Constructs a {@code JsonAdaptedGoal} with the given {@code dailyGoal}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param dailyGoal The goal to be converted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public JsonAdaptedGoal(int dailyGoal) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.dailyGoal \u003d dailyGoal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Dummy constructor for JsonAdaptedGoal class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public JsonAdaptedGoal() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.dailyGoal \u003d DailyGoal.DUMMY_VALUE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Converts this Jackson-friendly adapted dailyGoal object into the model\u0027s {@code DailyGoal} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IllegalValueException If there were any data constraints violated in the adapted goal."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!DailyGoal.isValidGoal(dailyGoal)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new IllegalValueException(GoalCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new DailyGoal(dailyGoal);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 40,
      "ray-97": 2,
      "eugenetyc": 2
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given String {@code tagName}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param tagName The String that represents a Tag to form the JsonAdaptedTag with."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param source The source Tag object we wish to convert from."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Dummy constructor for JsonAdaptedTag class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonAdaptedTag() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        tagName \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IllegalValueException If there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "ray-97": 3,
      "eugenetyc": 8,
      "-": 39
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonConsumptionRecordStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * A class to access ConsumptionRecord data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class JsonConsumptionRecordStorage implements ConsumptionRecordStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ConsumptionRecordStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public JsonConsumptionRecordStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Path getConsumptionRecordFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns a ReadOnlyConsumptionRecord wrapped in an Optional after reading from a json file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return A {@code ReadOnlyConsumptionRecord} object that was read from file path,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * wrapped within an {@code Optional}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws DataConversionException If the file is not in the correct format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return readConsumptionRecord(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #readConsumptionRecord()}, but now reads from an specified file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath Location of the data. Cannot be null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord(Path filePath)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Optional\u003cJsonSerializableConsumptionRecord\u003e jsonConsumptionRecord \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                filePath, JsonSerializableConsumptionRecord.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        if (jsonConsumptionRecord.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            return Optional.of(jsonConsumptionRecord.get().toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the ConsumptionRecord to the pre-specified file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param consumptionRecord The consumptionRecord to be saved, which cannot be null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException If there\u0027s any error when writing to the file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        saveConsumptionRecord(consumptionRecord, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #saveConsumptionRecord(ReadOnlyConsumptionRecord)}, but now saves to a specified file path."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath Location of the data. Cannot be null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(consumptionRecord);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableConsumptionRecord(consumptionRecord), filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 84,
      "eugenetyc": 13
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonFoodRecordStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * A class to access/write FoodRecord data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * JsonSerializableFoodRecord is used as a middle-man between the Model and the disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class JsonFoodRecordStorage implements FoodRecordStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFoodRecordStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonFoodRecordStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns a ReadOnlyFoodRecord obtained from a file storage specified by the current file path."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the derived ReadOnlyFoodRecord obtained from the relevant file storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws DataConversionException if the data in the file is not in the expected format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return readFoodRecord(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #readFoodRecord()}, but now reads from an explicitly specified file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Optional\u003cJsonSerializableFoodRecord\u003e jsonFoodRecord \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                filePath, JsonSerializableFoodRecord.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!jsonFoodRecord.isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return Optional.of(jsonFoodRecord.get().toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the current FoodRecord, represented by a ReadOnlyFoodRecord, into a json storage file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param foodRecord the ReadOnlyFoodRecord to be saved which cannot be null."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IOException if there was any problem when writing to the file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void saveFoodRecord(ReadOnlyFoodRecord foodRecord) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        saveFoodRecord(foodRecord, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #saveFoodRecord(ReadOnlyFoodRecord)}, but saves to a specified file at the specified path."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveFoodRecord(ReadOnlyFoodRecord foodRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(foodRecord);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFoodRecord(foodRecord), filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 13,
      "eugenetyc": 85
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonGoalStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * A class to access Daily Goal data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class JsonGoalStorage implements GoalStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonGoalStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public JsonGoalStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Path getGoalFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Reads the goal from the file path pre-specified."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return either an empty Optional if no such file, or a ReadOnlyGoal described in the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws DataConversionException if the data in the file is not in the expected format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Optional\u003cReadOnlyGoal\u003e readGoal() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return readGoal(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #readGoal()}, but now from a specified file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Optional\u003cReadOnlyGoal\u003e readGoal(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Optional\u003cJsonSerializableGoal\u003e jsonGoal \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                filePath, JsonSerializableGoal.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (jsonGoal.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return Optional.of(jsonGoal.get().toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the goal in a json file, in the pre-specified file path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param goal the ReadOnlyGoal to be saved which cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveGoal(ReadOnlyGoal goal) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        saveGoal(goal, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #saveGoal(ReadOnlyGoal)}, but now saves to the specified file path."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveGoal(ReadOnlyGoal goal, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(goal);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableGoal(goal), filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 77,
      "eugenetyc": 14
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonSerializableConsumptionRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * An Immutable ConsumptionRecord that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "@JsonRootName(value \u003d \"consumptionrecord\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class JsonSerializableConsumptionRecord {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DAILYFOODLOG \u003d \"Consumption Record contains duplicate log(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final List\u003cJsonAdaptedDailyFoodLog\u003e logs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Constructs a {@code JsonSerializableConsumptionRecord} with the given logs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public JsonSerializableConsumptionRecord(@JsonProperty(\"logs\") List\u003cJsonAdaptedDailyFoodLog\u003e logs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.logs.addAll(logs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Converts a given {@code ReadOnlyConsumptionRecord} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param source Future changes to this will not affect the created {@code JsonSerializableConsumptionRecord}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public JsonSerializableConsumptionRecord(ReadOnlyConsumptionRecord source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        logs.addAll(source.getDailyFoodLogs().stream().map(JsonAdaptedDailyFoodLog::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Converts this consumption record into the model\u0027s {@code ConsumptionRecord} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IllegalValueException If there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecord toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ConsumptionRecord consumptionRecord \u003d new ConsumptionRecord();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        for (JsonAdaptedDailyFoodLog jsonAdaptedDailyFoodLog : logs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            DailyFoodLog dailyFoodLog \u003d jsonAdaptedDailyFoodLog.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            if (consumptionRecord.hasLogWithSameDate(dailyFoodLog)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DAILYFOODLOG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            consumptionRecord.addLog(dailyFoodLog);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecord;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 59
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonSerializableFoodRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * An Immutable FoodRecord that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * This contains a number of JsonAdaptedFood objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "@JsonRootName(value \u003d \"foodrecord\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "class JsonSerializableFoodRecord {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"Food Record contains duplicate Food(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Constructs a {@code JsonSerializableFoodRecord} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonSerializableFoodRecord(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Converts a given {@code ReadOnlyFoodRecord} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param source the source FoodRecord. Note that future changes to this will not affect"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *               the created {@code JsonSerializableFoodRecord}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public JsonSerializableFoodRecord(ReadOnlyFoodRecord source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foods.addAll(source.getFoodList().stream().map(JsonAdaptedFood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Converts this JsonSerializableFoodRecord into the Model\u0027s {@code FoodRecord} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodRecord toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FoodRecord foodRecord \u003d new FoodRecord();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : foods) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            if (foodRecord.hasFood(food)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            foodRecord.addFood(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecord;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "eugenetyc": 57
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonSerializableGoal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * An Immutable Goal that is serializable to JSON format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "@JsonRootName(value \u003d \"goal\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "class JsonSerializableGoal {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private JsonAdaptedGoal goal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Constructs a {@code JsonSerializableGoal} with the given persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public JsonSerializableGoal(@JsonProperty(\"goal\") JsonAdaptedGoal goal) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Converts a given {@code ReadOnlyGoal} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableGoal}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public JsonSerializableGoal(ReadOnlyGoal source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.goal \u003d new JsonAdaptedGoal(source.getGoal());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Converts this goal into the model\u0027s {@code DailyGoal} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public DailyGoal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return goal.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 44
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Reads the user preferences from the pre-specified file path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @return the UserPrefs object wrapped in an Optional."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws DataConversionException if the data in the file is not in the expected format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #readUserPrefs()}, but reads from the specified file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param prefsFilePath the explicitly specified location of the source data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the user preferences into the pre-specified file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @param userPrefs the user preferences to save, which cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @throws IOException if there was any problem when writing to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "eugenetyc": 16,
      "-": 39
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/ReportGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Responsible for generating statistics of the user\u0027s consumption patterns on a given day."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class ReportGenerator extends DocumentGenerator {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Formatting"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final int NAME_COLUMN_WIDTH \u003d DOCUMENT_WIDTH / 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final int VALUE_COLUMN_WIDTH \u003d DOCUMENT_WIDTH / 4; // there are at most 4 value columns in report."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final int FOOD_COLUMN_NUMBER \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String COLUMN_INTERVAL \u003d \"|\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String AGGREGATE_STATISTICS_FORMAT \u003d \"\\t\\t %-\" + VALUE_COLUMN_WIDTH + \".0f \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"%-\" + VALUE_COLUMN_WIDTH + \".0f \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"%-\" + VALUE_COLUMN_WIDTH + \".0f \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"%-\" + VALUE_COLUMN_WIDTH + \".0f \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Messages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Header"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String HEADER_MESSAGE \u003d \"Report of Consumption Pattern on %tF\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Goal Information section"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_HEADER_MESSAGE \u003d \"Your Goal Information\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String NO_GOAL_MESSAGE \u003d \"You did not set any goal for daily caloric intake yet.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \" If you want to generate personalised insights, please set one!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_MESSAGE \u003d \"You have set a goal to consume at most %d calories in a day.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Foodwise Statistics"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String FOODWISE_HEADER_MESSAGE \u003d \"Food-wise Statistics\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Aggregate Statistics"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String AGGREGATE_HEADER_MESSAGE \u003d \"Aggregate Statistics\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Insights"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String INSIGHTS_HEADER_MESSAGE \u003d \"Insights for You\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_ACHIEVED_MESSAGE \u003d \"You have achieved your goal! Congratulations. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Keep up the great work and you will definitely make tremendous\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"improvements in your health and fitness.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_FAILED_MESSAGE \u003d \"You did not manage to achieve your goal today. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"You may want to re-design your diet plan so that you can make\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"improvements in your health and fitness! Check out Calgo\u0027s suggestions in the next section.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_SURPLUS_MESSAGE \u003d \"You have consumed %.0f fewer calories than your target. \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Great job!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GOAL_DEFICIT_MESSAGE \u003d \"You have consumed %.0f more calories than your target. \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Don\u0027t lose heart. You can do better!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Suggestions"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String NO_GOAL_SUGGESTIONS_MESSAGE \u003d \"Since you did not set a daily calorie goal yet, Calgo\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \" cannot advice you on whether\\n\" + \"%s is suitable for your diet.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String SUGGESTIONS_HEADER_MESSAGE \u003d \"Suggestions for You\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String FAVOURITE_FOOD_MESSAGE \u003d \"Your favourite food in the past week \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"(based on a mix of ratings and portions consumed) has been:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"%s.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String ADVICE_TO_ABSTAIN \u003d \"Unfortunately, after evaluating your daily goal, \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"Calgo advices you not to eat %s at all because it has \\n way too many calories relative to your goal.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String ADVICE_TO_CONTINUE \u003d \"Based on your goal, Calgo has verified that your favourite food,\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \" %s,\\nis sufficiently healthy! This means that it can continue to be a part of your diet.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String ADVICE_TO_EXERCISE \u003d \"Calgo has verified that your favourite food is preventing you \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"from reaching your daily goal.\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"If you do eat %s, you may want to exercise to burn off those excess calories!\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"A jog around your neighbourhood sounds like a good idea! Don\u0027t you agree?\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // for Footer"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String FOOTER_MESSAGE \u003d \"This marks the end of your report\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private DailyGoal userGoal;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private DailyFoodLog queryLog;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private ArrayList\u003cDailyFoodLog\u003e pastWeekLogs;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Statistics"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private double totalCalories \u003d 0.0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private double totalProteins \u003d 0.0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private double totalCarbs \u003d 0.0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private double totalFats \u003d 0.0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public ReportGenerator(LocalDate queryDate, DailyGoal userGoal, DailyFoodLog queryLog,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                           ArrayList\u003cDailyFoodLog\u003e pastWeekLogs) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        super(\"data/reports/\" + queryDate.toString() + \"_report.txt\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                LogsCenter.getLogger(ReportGenerator.class));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.pastWeekLogs \u003d pastWeekLogs;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.queryLog \u003d queryLog;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.userGoal \u003d userGoal;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Driver method for generation of comprehensive report of consumption patterns."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return a boolean value that is true only if report has been successfully generated."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public boolean generateReport() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        updateStatistics();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printHeader();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printBody();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printFooter();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return file.exists() \u0026\u0026 (file.length() !\u003d 0); // success check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Update Statistics Methods"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Updates aggregate statistics based on DailyFoodLog attribute."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void updateStatistics() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (Food food : queryLog.getFoods()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            double portion \u003d queryLog.getPortion(food);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            totalCalories +\u003d portion * (double) Integer.parseInt(food.getCalorie().value);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            totalProteins +\u003d portion * (double) Integer.parseInt(food.getProtein().value);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            totalCarbs +\u003d portion * (double) Integer.parseInt(food.getCarbohydrate().value);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            totalFats +\u003d portion * (double) Integer.parseInt(food.getFat().value);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Overriding Printing Methods"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the meta-information of the report."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected void printHeader() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(String.format(HEADER_MESSAGE, this.queryLog.getLocalDate()),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                DOCUMENT_WIDTH));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Writes the body of the report document."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected void printBody() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printGoalInformation();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printFoodwiseStatistics();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printAggregateStatistics();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        printInsights();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSuggestions();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the concluding remarks in the report."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    protected void printFooter() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(FOOTER_MESSAGE, DOCUMENT_WIDTH));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // ReportGenerator-Specific Printing Methods"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes information on what the goal is."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printGoalInformation() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printGoalInformationHeader();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printGoalInformationBody();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes goal information section header."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printGoalInformationHeader() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(GOAL_HEADER_MESSAGE, DOCUMENT_WIDTH));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printEmptyLine();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes goal information section body."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printGoalInformationBody() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String goalInformation;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (userGoal.getGoal() \u003d\u003d DailyGoal.DUMMY_VALUE) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goalInformation \u003d NO_GOAL_MESSAGE;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            goalInformation \u003d String.format(GOAL_MESSAGE, this.userGoal.getGoal());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(goalInformation);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes relevant statistics related to each food quantity consumed in the given day."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printFoodwiseStatistics() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printFoodwiseStatisticsHeader();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printFoodwiseStatisticsTable();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the header of the Foodwise Statistics section."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printFoodwiseStatisticsHeader() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(FOODWISE_HEADER_MESSAGE, DOCUMENT_WIDTH));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printEmptyLine();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the table of the Foodwise Statistics section."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printFoodwiseStatisticsTable() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printFoodwiseStatisticsTableHeaders();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printFoodwiseStatisticsTableData();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the headers of the table in the Foodwise Statistics section."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printFoodwiseStatisticsTableHeaders() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String foodHeader \u003d centraliseText(\"Food\", NAME_COLUMN_WIDTH) + COLUMN_INTERVAL;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String portionHeader \u003d centraliseText(\"Total Quantity\", VALUE_COLUMN_WIDTH) + COLUMN_INTERVAL;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String caloriesHeader \u003d centraliseText(\"Total Calories\", VALUE_COLUMN_WIDTH);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(foodHeader + portionHeader + caloriesHeader);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printEmptyLine();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the main information in the table of the Foodwise Statistics section."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printFoodwiseStatisticsTableData() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (Food food : queryLog.getFoods()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            double portion \u003d queryLog.getPortion(food);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            double currCalories \u003d portion * (double) Integer.parseInt(food.getCalorie().value);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // wrap name in the case it is too long"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            String foodColumn \u003d generateWrappedNameString(food.getName(), NAME_COLUMN_WIDTH);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // portion and calories do not need to be wrapped"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            String portionColumn \u003d centraliseText(String.format(\"%.1f\", portion), VALUE_COLUMN_WIDTH);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            String currCaloriesColumn \u003d centraliseText(String.format(\"%.0f\", currCalories), VALUE_COLUMN_WIDTH);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // create a list of columns"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            ArrayList\u003cString\u003e columns \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            columns.add(foodColumn);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            columns.add(portionColumn);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            columns.add(currCaloriesColumn);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // horizontally stitch the columns to form a table"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            String table \u003d combineColumns(columns);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(table);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the Aggregated Statistics section."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printAggregateStatistics() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printAggregateStatisticsHeader();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printAggregateStatisticsTable();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the header of the Aggregate Statistics section."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printAggregateStatisticsHeader() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(AGGREGATE_HEADER_MESSAGE, DOCUMENT_WIDTH));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printEmptyLine();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the table of the Aggregate Statistics section."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printAggregateStatisticsTable() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printAggregateStatisticsTableHeaders();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printAggregateStatisticsTableData();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the headers of the table in the Aggregate Statistics section."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printAggregateStatisticsTableHeaders() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String caloriesHeader \u003d centraliseText(\"Total Calories in kcal\", VALUE_COLUMN_WIDTH) + COLUMN_INTERVAL;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String proteinHeader \u003d centraliseText(\"Total Protein in grams\", VALUE_COLUMN_WIDTH) + COLUMN_INTERVAL;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String carbsHeader \u003d centraliseText(\"Total Carbohydrates in grams\", VALUE_COLUMN_WIDTH) + COLUMN_INTERVAL;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String fatsHeader \u003d centraliseText(\"Total Fats in grams\", VALUE_COLUMN_WIDTH);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(caloriesHeader + proteinHeader + carbsHeader + fatsHeader);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printEmptyLine();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the main information in the table of the Aggregate Statistics section."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printAggregateStatisticsTableData() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(String.format(AGGREGATE_STATISTICS_FORMAT, totalCalories, totalProteins,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                totalCarbs, totalFats));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the actionable insights a user can take based on user consumption patterns for the given day."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printInsights() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // Guard clause: No goal provided -\u003e No insights to print"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!isGoalSet()) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // Happy path:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printInsightsHeader();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        double remainingCalories \u003d calculateRemainingCalories();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        boolean isGoalAchieved \u003d Double.compare(remainingCalories, 0.0) \u003e\u003d 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printInsightsBody(remainingCalories, isGoalAchieved);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the header of the Insights section."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printInsightsHeader() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(INSIGHTS_HEADER_MESSAGE, DOCUMENT_WIDTH));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printEmptyLine();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the main information of the Insights section."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printInsightsBody(double remainingCalories, boolean isGoalAchieved) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (isGoalAchieved) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(GOAL_ACHIEVED_MESSAGE);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printEmptyLine();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(String.format(GOAL_SURPLUS_MESSAGE, remainingCalories));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(GOAL_FAILED_MESSAGE);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printEmptyLine();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(String.format(GOAL_DEFICIT_MESSAGE, Math.abs(remainingCalories)));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Creates a list of recommended food items to eat that will match goal of user."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printSuggestions() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSuggestionsHeader();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSuggestionsBody();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the header of the Suggestions section."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printSuggestionsHeader() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(centraliseText(SUGGESTIONS_HEADER_MESSAGE, DOCUMENT_WIDTH));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printEmptyLine();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Writes the main information of the Suggestions section."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void printSuggestionsBody() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        HashMap\u003cFood, double[]\u003e foodInPastWeek \u003d getPortionAndRatings(pastWeekLogs);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Food favouriteFood \u003d getHighestCalorieFavouriteFood(foodInPastWeek);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        String favouriteFoodName \u003d favouriteFood.getFoodNameString();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printWriter.println(String.format(FAVOURITE_FOOD_MESSAGE, favouriteFoodName));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        printEmptyLine();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int favouriteFoodCalories \u003d Integer.parseInt(favouriteFood.getCalorie().value);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int difference \u003d userGoal.getGoal() - favouriteFoodCalories;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // if Goal is not set, cannot form personalised suggestions"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (!isGoalSet()) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(String.format(NO_GOAL_SUGGESTIONS_MESSAGE, favouriteFood.getFoodNameString()));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (difference \u003c 0) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(String.format(ADVICE_TO_ABSTAIN, favouriteFoodName));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } else if (isSufficientlyHealthy(favouriteFoodCalories)) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(String.format(ADVICE_TO_CONTINUE, favouriteFoodName));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            printWriter.println(String.format(ADVICE_TO_EXERCISE, favouriteFoodName));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // String Manipulation Methods"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Combines columns to form a table. Goes line by line."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param columns An ArrayList of Strings, where each element is a column."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return A stitched String with all columns combined together."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private String combineColumns(ArrayList\u003cString\u003e columns) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArrayList\u003cString[]\u003e splitArrays \u003d splitNewLines(columns); // split each column into lines"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int maxNumLines \u003d getMaxLines(splitArrays); // get the number of lines of the longest column"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // line by line, stitch each column together"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (int currLine \u003d 0; currLine \u003c maxNumLines; currLine++) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            iterateColumn(result, splitArrays, currLine);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * A method that splits each column String into lines, represented in a String."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param columns An ArrayList of strings."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return An ArrayList of String arrays, which contain resulting substrings after split by \"\\n\"."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private ArrayList\u003cString[]\u003e splitNewLines(ArrayList\u003cString\u003e columns) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArrayList\u003cString[]\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (String string : columns) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            String[] curr \u003d string.split(\"\\n\");"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            result.add(curr);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param sb A StringBuilder object."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param columns An ArrayList of String Arrays (columns) that contain respective lines of data."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param currLine The current line number that is being iterated through."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void iterateColumn(StringBuilder sb, ArrayList\u003cString[]\u003e columns, int currLine) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int numColumns \u003d columns.size();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (int column \u003d 0; column \u003c numColumns; column++) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            String[] currColumn \u003d columns.get(column);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            int columnWidth \u003d VALUE_COLUMN_WIDTH;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (column \u003d\u003d FOOD_COLUMN_NUMBER) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                columnWidth \u003d NAME_COLUMN_WIDTH;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (currLine \u003c currColumn.length) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                String currText \u003d currColumn[currLine];"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                sb.append(addNTrailingWhitespace(currText, columnWidth - currText.length() + 1));"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                sb.append(addNTrailingWhitespace(\"\", columnWidth));"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // if last column, go to next line"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (column \u003d\u003d numColumns - 1) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Utility Methods"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Takes in a list of String arrays {@code columnLines} and returns the maximum length of the String"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * array elements."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private int getMaxLines(ArrayList\u003cString[]\u003e columnLines) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int maxLines \u003d 0;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (String[] stringArray : columnLines) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            maxLines \u003d Math.max(maxLines, stringArray.length);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return maxLines;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Calculates number of calories remaining for user to meet goal."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return the number of calories remaining for user to meet goal"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private double calculateRemainingCalories() {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return ((double) userGoal.getGoal()) - totalCalories;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Checks if goal is provided by user."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private boolean isGoalSet() {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return userGoal.getGoal() !\u003d DailyGoal.DUMMY_VALUE;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Updates Map object with number of portions and ratings of every Food object consumed in past 7 days."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private HashMap\u003cFood, double[]\u003e getPortionAndRatings(ArrayList\u003cDailyFoodLog\u003e weeklyLogs) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        HashMap\u003cFood, double[]\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (DailyFoodLog foodLog : weeklyLogs) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            updateAllPortionAndRatings(result, foodLog);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Updates all portions and all ratings of all food items from a specific DailyFoodLog."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void updateAllPortionAndRatings(HashMap\u003cFood, double[]\u003e foodHashMap, DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        for (Food food : foodLog.getFoods()) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            updateFoodPortionsAndRatings(foodHashMap, foodLog, food);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Updates portions and ratings of a specific Food item with the values from a specific DailyFoodLog."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void updateFoodPortionsAndRatings(HashMap\u003cFood, double[]\u003e foodHashMap, DailyFoodLog foodLog, Food food) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        double[] data \u003d new double[2];"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (foodHashMap.containsKey(food)) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            data \u003d foodHashMap.get(food);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            double oldPortion \u003d data[0];"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            double newPortion \u003d oldPortion + foodLog.getPortion(food);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            double rating \u003d foodLog.getRating(food);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            data[0] \u003d newPortion;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (rating !\u003d DailyFoodLog.RATING_DUMMY_VALUE) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                data[1] \u003d (foodLog.getRating(food) * oldPortion + foodLog.getRating(food)) / newPortion;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            double rating \u003d foodLog.getRating(food);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            if (rating !\u003d DailyFoodLog.RATING_DUMMY_VALUE) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                data[1] \u003d foodLog.getRating(food);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            data[0] \u003d foodLog.getPortion(food);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        foodHashMap.put(food, data);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Compares two Food objects based on ratings and portions consumed."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param f1 Food object one."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param f2 Food object two."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @param foodInPastWeek A Map of all Food objects consumed in the past week and their [portions, ratings]."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * @return -1 if f1 has \u003e value than f2 and 1 otherwise."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private int compare(Food f1, Food f2, HashMap\u003cFood, double[]\u003e foodInPastWeek) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // if both foods have a valid rating, compare by rating"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        double ratingF1 \u003d foodInPastWeek.get(f1)[1];"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        double ratingF2 \u003d foodInPastWeek.get(f2)[1];"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        boolean haveRatings \u003d ratingF1 !\u003d 0.0 \u0026\u0026 ratingF2 !\u003d 0.0;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (haveRatings) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            return ratingF2 - ratingF1 \u003c 0 ? -1 : 1;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // else compare by rating"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        double portionF1 \u003d foodInPastWeek.get(f1)[0];"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        double portionF2 \u003d foodInPastWeek.get(f2)[0];"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return portionF2 - portionF1 \u003c 0 ? -1 : 1;"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns favourite food item of past 7 days based on portions consumed and ratings."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private Food getHighestCalorieFavouriteFood(HashMap\u003cFood, double[]\u003e foodHashMap) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e(foodHashMap.keySet());"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // in case all foods have same ratings and portion, 1st item should be the food with most calories."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        foodList.sort((Food f1, Food f2) -\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                Integer.parseInt(f2.getCalorie().value) - Integer.parseInt(f1.getCalorie().value));"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // compare with portions and ratings"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        foodList.sort((Food f1, Food f2) -\u003e compare(f1, f2, foodHashMap));"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return foodList.get(0);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Returns whether specified Food object\u0027s calories is sufficiently healthy based on user goal."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * A food is defined to be sufficiently healthy if it can be consumed 3 times a day without exceeding user goal."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private boolean isSufficientlyHealthy(int foodCalories) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return (foodCalories * 3) \u003c userGoal.getGoal();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 581,
      "ray-97": 2,
      "eugenetyc": 10
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * API of the Storage component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public interface Storage extends UserPrefsStorage, FoodRecordStorage, ConsumptionRecordStorage, GoalStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // UserPrefs-related methods"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Gets the json user preferences file path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The Path for the UserPrefs json storage file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns a UserPrefs object wrapped in an Optional after reading the json user preferences file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return An empty Optional if no such file exists, or the derived UserPrefs object wrapped in an Optional."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws DataConversionException If the file format is not as expected."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException If there was any problem when reading from the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the ReadOnlyUserPrefs in a json file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param userPrefs The user preferences to save, which cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException If there was any problem when writing to the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // FoodRecord-related methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Gets the json FoodRecord file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The Path for the FoodRecord json storage file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Path getFoodRecordFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns a ReadOnlyFoodRecord object wrapped in an Optional after reading the json FoodRecord file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return An empty Optional if no such file exists, or the derived ReadOnlyFoodRecord object in an Optional."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws DataConversionException If the file format is not as expected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException If there was any problem when reading from the file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the ReadOnlyFoodRecord in a json file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param foodRecord The ReadOnlyFoodRecord to be saved which cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException If there was any problem when writing to the file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    void saveFoodRecord(ReadOnlyFoodRecord foodRecord) throws IOException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // ConsumptionRecord-related methods"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Gets the json ConsumptionRecord file path."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The Path for the ConsumptionRecord json storage file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getConsumptionRecordFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns a ReadOnlyConsumptionRecord object wrapped in an Optional after reading the json ConsumptionRecord file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return An empty Optional if no such file exists, or the derived ReadOnlyConsumptionRecord inside an Optional."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws DataConversionException If the file format is not as expected."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException If there was any problem when reading from the file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the ReadOnlyConsumptionRecord in a json file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param consumptionRecord The ReadOnlyConsumptionRecord to be saved which cannot be null."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException Tf there was any problem when writing to the file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord) throws IOException;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Goal-related methods"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Gets the json goal file path."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return The Path for the goal json storage file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getGoalFilePath();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns a ReadOnlyGoal object wrapped in an Optional after reading the json goal file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @return An empty Optional if no such file exists, or the derived ReadOnlyGoal inside an Optional."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws DataConversionException If the file format is not as expected."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException If there was any problem when reading from the file."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cReadOnlyGoal\u003e readGoal() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the ReadOnlyGoal in a json file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param goal The ReadOnlyGoal to be saved which cannot be null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @throws IOException If there was any problem when writing to the file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void saveGoal(ReadOnlyGoal goal) throws IOException;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 5,
      "ray-97": 24,
      "eugenetyc": 107
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import static life.calgo.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Manages storage of FoodRecord data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Refer to Storage.java for API and javadocs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private FoodRecordStorage foodRecordStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private ConsumptionRecordStorage consumptionRecordStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private GoalStorage goalStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public StorageManager(FoodRecordStorage foodRecordStorage, ConsumptionRecordStorage consumptionRecordStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                          UserPrefsStorage userPrefsStorage, GoalStorage goalStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        requireAllNonNull(foodRecordStorage, consumptionRecordStorage, userPrefsStorage, goalStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.foodRecordStorage \u003d foodRecordStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        this.consumptionRecordStorage \u003d consumptionRecordStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        this.goalStorage \u003d goalStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // UserPrefs-related methods"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // FoodRecord-related methods"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecordStorage.getFoodRecordFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return readFoodRecord(foodRecordStorage.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #readFoodRecord()}, but now reads from the specified file path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath The file path of the source file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodRecordStorage.readFoodRecord(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void saveFoodRecord(ReadOnlyFoodRecord foodRecord) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        saveFoodRecord(foodRecord, foodRecordStorage.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #saveFoodRecord(ReadOnlyFoodRecord)}, but now saves to the specified file path."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath The path of the storage file we want to save at."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveFoodRecord(ReadOnlyFoodRecord foodRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        foodRecordStorage.saveFoodRecord(foodRecord, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // ConsumptionRecord-related methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Path getConsumptionRecordFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecordStorage.getConsumptionRecordFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return readConsumptionRecord(consumptionRecordStorage.getConsumptionRecordFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #readConsumptionRecord()}, but now reads from the specified file path."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath The file path of the source file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public Optional\u003cReadOnlyConsumptionRecord\u003e readConsumptionRecord(Path filePath)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        logger.fine(\"Attempting to read from file: \" + filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecordStorage.readConsumptionRecord(filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        saveConsumptionRecord(consumptionRecord, consumptionRecordStorage.getConsumptionRecordFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #saveConsumptionRecord(ReadOnlyConsumptionRecord)}, but now saves to a specified file path."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath The path of the storage file we want to save at."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void saveConsumptionRecord(ReadOnlyConsumptionRecord consumptionRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecordStorage.saveConsumptionRecord(consumptionRecord, filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    // Goal-related methods"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Path getGoalFilePath() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return goalStorage.getGoalFilePath();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Optional\u003cReadOnlyGoal\u003e readGoal() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return readGoal(goalStorage.getGoalFilePath());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #readGoal()}, but now reads from a specified file path."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath The file path of the source file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Optional\u003cReadOnlyGoal\u003e readGoal(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        logger.fine(\"Attempting to read from file: \" + filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return goalStorage.readGoal(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveGoal(ReadOnlyGoal goal) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        saveGoal(goal, goalStorage.getGoalFilePath());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Similar to {@link #saveGoal(ReadOnlyGoal)}, but now saves to a specified file path."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * @param filePath The path of the storage file we want to save at."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveGoal(ReadOnlyGoal goal, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        logger.fine(\"Attempting to write data to file: \" + filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        goalStorage.saveGoal(goal, filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 38,
      "ray-97": 41,
      "eugenetyc": 96
    }
  },
  {
    "path": "src/main/java/life/calgo/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 4,
      "ray-97": 2,
      "eugenetyc": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final CommandListener commandListener;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, CommandListener commandListener) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.commandListener \u003d commandListener;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        commandTextField.textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            if (newValue.contains(\"n/\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    \u0026\u0026 (newValue.startsWith(\"update\") || newValue.startsWith(\"delete\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        || newValue.startsWith(\"nom\"))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                String foodName \u003d newValue.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                commandListener.getSuggestions(foodName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            setStyleToDefault();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public interface CommandListener {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "         * Listens into the command and filters the FoodListPanel accordingly."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "         * @see Logic#getSimilarFood(String)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        void getSuggestions(String foodName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 6,
      "ray-97": 1,
      "jeremylow97": 26,
      "eugenetyc": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/DailyListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.DisplayFood;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * Responsible for displaying food consumed in a given day."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class DailyListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final String FXML \u003d \"DailyListPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static final String NO_FOOD \u003d \"You haven\u0027t consumed anything today!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DailyListPanel.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private TableView\u003cDisplayFood\u003e dailyListView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public DailyListPanel(ObservableList\u003cDisplayFood\u003e dailyList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        setUpColumns();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        Text text \u003d new Text(NO_FOOD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        text.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        text.setFont(Font.font (\"Segoe UI Semibold\", 13));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        dailyListView.setPlaceholder(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dailyListView.setItems(dailyList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @SuppressWarnings(\"unchecked\") // suppressed an inevitable unchecked warning due to use of varargs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private void setUpColumns() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        TableColumn\u003cDisplayFood, Void\u003e index \u003d setUpIndexColumn();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        TableColumn\u003cDisplayFood, String\u003e foodName \u003d setUpFoodNameColumn();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        TableColumn\u003cDisplayFood, String\u003e portion \u003d setUpPortionColumn();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        TableColumn\u003cDisplayFood, String\u003e rating \u003d setUpRatingColumn();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        dailyListView.getColumns().addAll(index, foodName, portion, rating);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private TableColumn\u003cDisplayFood, Void\u003e setUpIndexColumn() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        TableColumn\u003cDisplayFood, Void\u003e index \u003d new TableColumn\u003c\u003e(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        index.setCellFactory(tableColumn -\u003e new IndexTableCell());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        index.prefWidthProperty().bind(dailyListView.widthProperty().multiply(0.05));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        index.setResizable(false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private TableColumn\u003cDisplayFood, String\u003e setUpRatingColumn() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        TableColumn\u003cDisplayFood, String\u003e rating \u003d new TableColumn\u003c\u003e(\"Avg Rating\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        rating.setCellValueFactory(param -\u003e new ReadOnlyObjectWrapper\u003cString\u003e(param.getValue().getRating()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        rating.setCellFactory(tableColumn -\u003e new RatingTableCell());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        rating.prefWidthProperty().bind(dailyListView.widthProperty().multiply(0.15));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        rating.setResizable(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        rating.setMinWidth(60.0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private TableColumn\u003cDisplayFood, String\u003e setUpFoodNameColumn() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        TableColumn\u003cDisplayFood, String\u003e foodName \u003d new TableColumn\u003c\u003e(\"Food Name\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodName.setCellValueFactory(param -\u003e new ReadOnlyObjectWrapper\u003cString\u003e(param.getValue().getName().fullName));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodName.setCellFactory(tableColumn -\u003e new NameTableCell());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodName.prefWidthProperty().bind(dailyListView.widthProperty().multiply(0.60));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodName.setResizable(false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private TableColumn\u003cDisplayFood, String\u003e setUpPortionColumn() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        TableColumn\u003cDisplayFood, String\u003e portion \u003d new TableColumn\u003c\u003e(\"Portion\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        portion.setCellValueFactory(param -\u003e new ReadOnlyObjectWrapper\u003cString\u003e("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                Double.toString(param.getValue().getPortion())));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        portion.setCellFactory(tableColumn -\u003e new PortionTableCell());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        portion.prefWidthProperty().bind(dailyListView.widthProperty().multiply(0.15));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        portion.setResizable(false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return portion;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Responsible for displaying index of Food item in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    class IndexTableCell extends TableCell\u003cDisplayFood, Void\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void updateIndex(int index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            super.updateIndex(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            if (isEmpty() || index \u003c 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                setText(Integer.toString(index + 1) + \".\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Custom {@code RatingTableCell} that displays the graphics of a {@code TableCell} using a {@code DisplayFood}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    class RatingTableCell extends TableCell\u003cDisplayFood, String\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        protected void updateItem(String rating, boolean empty) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            super.updateItem(rating, empty);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            if (empty || rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                setGraphic(new RatingLabel(rating).getPane());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                setStyle(\"-fx-padding: 0 0 0 0\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Custom {@code NameTableCell} that displays the graphics of a {@code TableCell} using a {@code DisplayFood}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    class NameTableCell extends TableCell\u003cDisplayFood, String\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        protected void updateItem(String food, boolean empty) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                Label label \u003d new Label();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                label.setText(food);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                label.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                setGraphic(label);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Custom {@code PortionTableCell} that displays the graphics of a {@code TableCell} using a {@code portion}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    class PortionTableCell extends TableCell\u003cDisplayFood, String\u003e {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        protected void updateItem(String portion, boolean empty) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            super.updateItem(portion, empty);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            if (empty || portion \u003d\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                Label label \u003d new Label();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                label.setText(portion);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                label.getStyleClass().add(\"portionLabel\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                StackPane pane \u003d new StackPane();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                pane.getChildren().add(label);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                pane.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                setGraphic(pane);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 8,
      "buddhavineeth": 14,
      "ray-97": 32,
      "jeremylow97": 113
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/FoodCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Label calorie;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Label protein;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Label carbohydrate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Label fat;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        calorie.setText(\"Calories: \" + food.getCalorie().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        protein.setText(\"Protein (g): \" + food.getProtein().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        carbohydrate.setText(\"Carbohydrates (g): \" + food.getCarbohydrate().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        fat.setText(\"Fat (g): \" + food.getFat().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        food.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 2,
      "eugenetyc": 19,
      "-": 56
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/FoodListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private static final String FXML \u003d \"FoodListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private ListView\u003cFood\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodListPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        personListView.setItems(foodList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                setGraphic(new FoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "eugenetyc": 11,
      "-": 32
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/GoalDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * A ui for the stack pane that displays the daily calorie goal of the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class GoalDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String FXML \u003d \"GoalDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private TextArea goalDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public GoalDisplay() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void setGoalOfUser(String goalOfUser) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(goalOfUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        goalDisplay.setText(goalOfUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 26
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/GraphPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": " * The Graph Panel, containing both the ui part for displaying a line chart of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": " * total calories against date for the past seven days,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": " * and the logic to create that chart."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "public class GraphPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static GraphPanel graphPanelInstance \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static final String FXML \u003d \"GraphPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private ArrayList\u003cDailyFoodLog\u003e pastWeekLogs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private Map\u003cLocalDate, Double\u003e caloriesAgainstDate \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private LineChart\u003cString, Number\u003e graph \u003d new LineChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private XYChart.Series\u003cString, Number\u003e series;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public GraphPanel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    // static method creates a singleton graphPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static GraphPanel getGraphPanelInstance() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        if (graphPanelInstance \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            graphPanelInstance \u003d new GraphPanel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return graphPanelInstance;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    //Wrapper"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private void makeGraph(Logic logic) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        initialiseTreeMap(logic);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        initialiseGraph();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        updateSeries();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public LineChart\u003cString, Number\u003e getPreviousGraph() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return graph;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public LineChart\u003cString, Number\u003e getGraph(Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        makeGraph(logic);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        return graph;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private void setPastWeekLogs(Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        pastWeekLogs \u003d logic.getPastWeekLogs();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Sets up the TreeMap containing mapping of date to total calories consumed on that day."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Days where there are no records are counted as 0 calories consumed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * @param logic module that contains method for obtaining daily food logs."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private void initialiseTreeMap(Logic logic) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        caloriesAgainstDate.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        setPastWeekLogs(logic);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        date \u003d logic.getDate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        for (int counter \u003d pastWeekLogs.size() - 1; counter \u003e\u003d 0; counter--) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            LocalDate logDate \u003d date.minusDays(counter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            DailyFoodLog log \u003d pastWeekLogs.get(counter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            Double totalCalories \u003d log.getTotalCalories();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            caloriesAgainstDate.put(logDate, totalCalories);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Sets up line chart axes, and adds a series to provide data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @SuppressWarnings(\"unchecked\") // to hide the inevitable unchecked warning due to use of varargs"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private void initialiseGraph() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        graph.getData().removeAll(series);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        graph.setAnimated(false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        graph.setLegendVisible(false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        graph.setTitle(\"Your Calorie Data (Past 7 Days)\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        xAxis.setLabel(\"Day\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        yAxis.setLabel(\"Calories\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        yAxis.setTickUnit(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        yAxis.setMinorTickCount(1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        yAxis.setMinorTickVisible(true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        graph.getData().add(series);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Updates the series that provides data to the graph."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private void updateSeries() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        series.getData().clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        caloriesAgainstDate.forEach((date, calories) -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            String dateString \u003d date.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            series.getData().add(new XYChart.Data\u003c\u003e(dateString, calories));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 109,
      "buddhavineeth": 11
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Controller for a help page."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f11-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"A summarised user guide is shown below. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"For the full user guide, refer to: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    //public static final String COMMAND_MESSAGE \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private static String commandGuide \u003d HelpCommand.DEFAULT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private TextArea commandMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        commandMessage.setText(commandGuide);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void setGuide(String commandGuide) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        requireNonNull(commandGuide);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        commandMessage.setText(commandGuide);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 17,
      "buddhavineeth": 2,
      "ray-97": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * The Main Window. Provides the basic application layout containing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GREETING_MESSAGE_NO_GOAL \u003d \"Welcome to Calgo! Since this is your first time, \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"do remember to set a daily calorie goal using the goal command. Type \u0027help\u0027 to learn more \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            + \"about our commands!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String GREETING_MESSAGE \u003d \"Welcome back to Calgo! We\u0027re all ready to help you meet your \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            + \"daily caloric goals.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String POSITIVE_CALORIES_MESSAGE \u003d \"%s calories left for the day\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String NEGATIVE_CALORIES_MESSAGE \u003d \"Exceeded %s calories for the day\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private ContextMenu contextMenu;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private FoodListPanel foodListPanel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private DailyListPanel dailyListPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private GoalDisplay goalDisplay;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private RemainingCaloriesDisplay remainingCaloriesDisplay;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private GraphPanel graphPanel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private StackPane foodListPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private StackPane dailyListPanelPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private StackPane goalDisplayPlaceholder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private StackPane caloriesDisplayPlaceholder;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private StackPane graphPanelPlaceholder;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Label dailyListDate;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        foodListPanel \u003d new FoodListPanel(logic.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        foodListPanelPlaceholder.getChildren().add(foodListPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dailyListPanel \u003d new DailyListPanel(logic.getFilteredDailyList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        dailyListPanelPlaceholder.getChildren().add(dailyListPanel.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        goalDisplay \u003d new GoalDisplay();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        goalDisplayPlaceholder.getChildren().add(goalDisplay.getRoot());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        remainingCaloriesDisplay \u003d new RemainingCaloriesDisplay();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        caloriesDisplayPlaceholder.getChildren().add(remainingCaloriesDisplay.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        dailyListDate.setText(\"Food Consumed On: \" + getDate());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        if (logic.getDailyGoal().getGoal().equals(DailyGoal.DUMMY_VALUE)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            resultDisplay.setFeedbackToUser(GREETING_MESSAGE_NO_GOAL);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            resultDisplay.setFeedbackToUser(GREETING_MESSAGE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        fillGoal();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        fillRemainingCalories();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        graphPanel \u003d GraphPanel.getGraphPanelInstance();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        graphPanelPlaceholder.getChildren().add(graphPanel.getGraph(logic));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, this::getSuggestions);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Fills Goal stack pane with daily goal data."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void fillGoal() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        goalDisplay.setGoalOfUser(logic.getDailyGoal().toString());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Fills remaining calories pane with number of remaining calories for the day."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void fillRemainingCalories() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        double remainingCalories \u003d logic.getRemainingCalories();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        if (remainingCalories \u003c 0.0) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            remainingCaloriesDisplay.setCaloriesOfUser(String.format(NEGATIVE_CALORIES_MESSAGE,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    (int) (remainingCalories * -1)));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            remainingCaloriesDisplay.setCaloriesOfUser(String.format(POSITIVE_CALORIES_MESSAGE,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    (int) remainingCalories));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Handles the MainWindow in event of the Help command being used."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void handleHelpHelper(String commandGuide) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        // Check if HelpWindow content is required content"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        helpWindow.setGuide(HelpCommand.getFilteredGuide());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Gets current date of daily list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return logic.getDate().toString();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public FoodListPanel getFoodListPanel() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return foodListPanel;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // update GUI components that display Model information"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // Food Record"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            foodListPanel \u003d new FoodListPanel(logic.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // Goal Information"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            fillGoal();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            fillRemainingCalories();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                handleHelpHelper(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // Daily List date display"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            dailyListDate.setText(\"Food Consumed On: \" + getDate());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            // Graph"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            graphPanelPlaceholder.getChildren().removeAll(graphPanel.getPreviousGraph());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            graphPanelPlaceholder.getChildren().add(graphPanel.getGraph(logic));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Presents similar food suggestions to user depending on their input."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private void getSuggestions(String text) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String foodName \u003d text.substring(text.indexOf(\"n/\") + 2);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        if (!foodName.isEmpty()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            List\u003cFood\u003e similarFood \u003d logic.getSimilarFood(foodName);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            String s \u003d similarFood.stream()"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                            .map(Food::getName)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                            .map(Name::toString)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                            .sorted(Comparator.naturalOrder())"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                            .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            if (!similarFood.isEmpty()) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"Here are some Food items with similar names in your Food Record: \\n\""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + s);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"It seems like there is no similar Food item in your Food Record\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 31,
      "buddhavineeth": 75,
      "ray-97": 10,
      "jeremylow97": 38,
      "eugenetyc": 6,
      "-": 174
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/RatingLabel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Responsible for creating a label to display the rating of a food inside Daily Food List."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class RatingLabel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private StackPane portionPlaceholder \u003d new StackPane();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Circle circle \u003d new Circle();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Label ratingLabel \u003d new Label();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public RatingLabel(String rating) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            double ratingInDouble \u003d Double.parseDouble(rating);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            ratingLabel.setText(rating);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            if (ratingInDouble \u003c 4.0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                circle.getStyleClass().add(\"ratingCircleFilledBad\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            } else if (ratingInDouble \u003e 4.0 \u0026\u0026 ratingInDouble \u003c 6.0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                circle.getStyleClass().add(\"ratingCircleFilledAverage\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                circle.getStyleClass().add(\"ratingCircleFilledGood\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            ratingLabel.setText(\"NA\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            circle.getStyleClass().add(\"ratingCircleEmpty\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        ratingLabel.setStyle(\"-fx-font-weight: bold; -fx-font-size: 11; -fx-text-fill: black;\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        circle.setRadius(13.0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        portionPlaceholder.getChildren().addAll(circle, ratingLabel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public StackPane getPane() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return portionPlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                || (other instanceof RatingLabel // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                \u0026\u0026 (ratingLabel.getText()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .equals(((RatingLabel) other).ratingLabel.getText()))); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 47
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/RemainingCaloriesDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " * A ui for the stack pane that displays the remaining calories to be consumed by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class RemainingCaloriesDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final String FXML \u003d \"RemainingCaloriesDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private TextArea remainingCaloriesDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public RemainingCaloriesDisplay() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void setCaloriesOfUser(String userRemainingCalories) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        requireNonNull(userRemainingCalories);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        remainingCaloriesDisplay.setText(userRemainingCalories);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 27
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * API of UI component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "ray-97": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/life/calgo/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 3,
      "ray-97": 1,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003c?import javafx.scene.control.ComboBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DailyListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003cTableView fx:id\u003d\"dailyListView\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "ray-97": 4,
      "jeremylow97": 3
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cLabel fx:id\u003d\"calorie\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calorie\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cLabel fx:id\u003d\"protein\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$protein\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cLabel fx:id\u003d\"carbohydrate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$carbohydrate\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cLabel fx:id\u003d\"fat\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$fat\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "eugenetyc": 12,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/GoalDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"goal-    stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    \u003cTextArea fx:id\u003d\"goalDisplay\" editable\u003d\"false\" styleClass\u003d\"goal-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 2,
      "buddhavineeth": 7
    }
  },
  {
    "path": "src/main/resources/view/GraphPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003c!--    \u003cTextArea fx:id\u003d\"graphPanel\" styleClass\u003d\"stack-pane\"/\u003e--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 8,
      "jeremylow97": 1
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003cfx:root height\u003d\"500.0\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        \u003cScene stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003cAnchorPane stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003cVBox AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                      \u003cHBox stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                          \u003cLabel fx:id\u003d\"helpMessage\" styleClass\u003d\"help-label\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                                  \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                              \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                                  \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                              \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                  \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003c/Button\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                              \u003cInsets bottom\u003d\"10.0\" left\u003d\"15.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                   \u003cTextArea fx:id\u003d\"commandMessage\" editable\u003d\"false\" layoutX\u003d\"-1.0\" layoutY\u003d\"43.0\" text\u003d\"\\$commandGuide\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"43.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 19,
      "-": 24
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow_OLD.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 39
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"1250.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Calgo App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    \u003cVBox fx:id\u003d\"foodList\" minWidth\u003d\"222.0\" prefHeight\u003d\"322.0\" prefWidth\u003d\"322.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                            \u003cInsets left\u003d\"10\" right\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        \u003cLabel fx:id\u003d\"goalInformation\" text\u003d\"Your Goal Information\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        \u003cHBox maxHeight\u003d\"100.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"goalDisplayPlaceholder\" styleClass\u003d\"goal-stack-pane\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" right\u003d\"15\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"caloriesDisplayPlaceholder\" styleClass\u003d\"remaining-calories-display\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"15\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        \u003cLabel fx:id\u003d\"dailyListDate\" text\u003d\"Stomach\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"dailyListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"graphPanelPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    \u003cVBox fx:id\u003d\"foodRecord\" minWidth\u003d\"315.0\" prefHeight\u003d\"322.0\" prefWidth\u003d\"315.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        \u003cLabel text\u003d\"Your Food Record\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"foodListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                                \u003cInsets top\u003d\"7\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                            \u003cInsets left\u003d\"10\" right\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 14,
      "buddhavineeth": 23,
      "ray-97": 1,
      "jeremylow97": 6,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/RemainingCaloriesDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    \u003cTextArea fx:id\u003d\"remainingCaloriesDisplay\" editable\u003d\"false\" styleClass\u003d\"remaining-calories-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 2,
      "buddhavineeth": 7
    }
  },
  {
    "path": "src/test/java/life/calgo/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 4,
      "-": 132
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 5,
      "-": 56
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 7,
      "-": 31
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 6,
      "-": 103
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 9,
      "-": 108
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/life/calgo/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Word is more than any similar words in sentence"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 12,
      "-": 135
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CALORIE_DESC_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CARBOHYDRATE_DESC_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.FAT_DESC_APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.PROTEIN_DESC_APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.APPLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.storage.JsonConsumptionRecordStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.storage.JsonFoodRecordStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.storage.JsonGoalStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonFoodRecordStorage foodRecordStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                new JsonFoodRecordStorage(temporaryFolder.resolve(\"foodrecord.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        JsonConsumptionRecordStorage consumptionRecordStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new JsonConsumptionRecordStorage(temporaryFolder.resolve(\"consumptionrecord.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        JsonGoalStorage goalStorage \u003d new JsonGoalStorage(temporaryFolder.resolve(\"invalidGoal.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(foodRecordStorage, consumptionRecordStorage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                userPrefsStorage, goalStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonFoodRecordStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                new JsonFoodRecordIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        JsonConsumptionRecordStorage consumptionRecordStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new JsonConsumptionRecordStorage(temporaryFolder.resolve(\"ioExceptionConsumptionRecord.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonGoalStorage goalStorage \u003d new JsonGoalStorage(temporaryFolder.resolve(\"ioExceptionGoal.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, consumptionRecordStorage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                userPrefsStorage, goalStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String updateCommand \u003d UpdateCommand.COMMAND_WORD + NAME_DESC_APPLE + CALORIE_DESC_APPLE + PROTEIN_DESC_APPLE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_APPLE + FAT_DESC_APPLE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(APPLE).withTags().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.addFood(expectedFood);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandFailure(updateCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFoodRecord().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static class JsonFoodRecordIoExceptionThrowingStub extends JsonFoodRecordStorage {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        private JsonFoodRecordIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void saveFoodRecord(ReadOnlyFoodRecord addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "ray-97": 12,
      "jeremylow97": 41,
      "-": 118
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model model \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.setFoodRecord(new FoodRecord());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 4,
      "jeremylow97": 32
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CARBOHYDRATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_NAME_APPLE \u003d \"Apple\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_NAME_BANANA \u003d \"Banana\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_CALORIE_APPLE \u003d \"100\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_CALORIE_BANANA \u003d \"200\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_PROTEIN_APPLE \u003d \"3\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_PROTEIN_BANANA \u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_CARBOHYDRATE_APPLE \u003d \"40\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_CARBOHYDRATE_BANANA \u003d \"50\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_FAT_APPLE \u003d \"1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_FAT_BANANA \u003d \"12\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_TAG_HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String VALID_TAG_SOFT \u003d \"soft\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String NAME_DESC_APPLE \u003d \" \" + PREFIX_NAME + VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String NAME_DESC_BANANA \u003d \" \" + PREFIX_NAME + VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String CALORIE_DESC_APPLE \u003d \" \" + PREFIX_CALORIES + VALID_CALORIE_APPLE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String CALORIE_DESC_BANANA \u003d \" \" + PREFIX_CALORIES + VALID_CALORIE_BANANA;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String CARBOHYDRATE_DESC_APPLE \u003d \" \" + PREFIX_CARBOHYDRATE + VALID_CARBOHYDRATE_APPLE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String CARBOHYDRATE_DESC_BANANA \u003d \" \" + PREFIX_CARBOHYDRATE + VALID_CARBOHYDRATE_BANANA;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String PROTEIN_DESC_APPLE \u003d \" \" + PREFIX_PROTEIN + VALID_PROTEIN_APPLE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String PROTEIN_DESC_BANANA \u003d \" \" + PREFIX_PROTEIN + VALID_PROTEIN_BANANA;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String FAT_DESC_APPLE \u003d \" \" + PREFIX_FAT + VALID_FAT_APPLE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String FAT_DESC_BANANA \u003d \" \" + PREFIX_FAT + VALID_FAT_BANANA;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String TAG_DESC_HARD \u003d \" \" + PREFIX_TAG + VALID_TAG_HARD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String TAG_DESC_SOFT \u003d \" \" + PREFIX_TAG + VALID_TAG_SOFT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Choco\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_CALORIE_DESC \u003d \" \" + PREFIX_CALORIES + \"1a\"; // \u0027a\u0027 not allowed in calorie"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_PROTEIN_DESC \u003d \" \" + PREFIX_PROTEIN; // empty string not allowed for protein"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_CARBOHYDRATE_DESC \u003d \" \" + PREFIX_CARBOHYDRATE + \"bob\"; // only integers allowed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_FAT_DESC \u003d \" \" + PREFIX_FAT; // empty string not allowed for fat"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"#^#^#*#*\"; // symbols not allowed in tags"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord expectedFoodRecord \u003d new FoodRecord(actualModel.getFoodRecord());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedFoodRecord, actualModel.getFoodRecord());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * {@code model}\u0027s Food Record."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static void showFoodAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFoodRecord().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d model.getFilteredFoodRecord().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        model.updateFilteredFoodRecord(new NameContainsKeywordsPredicate(food.getName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(1, model.getFilteredFoodRecord().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 117,
      "eugenetyc": 3
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Contains integration tests (interaction with the Model and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_existingFoodDelete_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodRecord().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(foodToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFoodRecord(), model.getConsumptionRecord(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_nonExistingFoodDelete_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new FoodBuilder().withName(\"Definitely does not exists\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(food);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_FOOD_DOES_NOT_EXISTS_IN_RECORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        showFoodAtIndex(model, TypicalIndexes.INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodRecord().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(foodToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food firstFood \u003d model.getFilteredFoodRecord().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food secondFood \u003d model.getFilteredFoodRecord().get(TypicalIndexes.INDEX_SECOND_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(firstFood);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(secondFood);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(firstFood);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        model.updateFilteredFoodRecord(p -\u003e false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(model.getFilteredFoodRecord().isEmpty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 7,
      "jeremylow97": 96
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.core.Messages.MESSAGE_FOODS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.CalorieContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.CarbohydrateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.FatContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.ProteinContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d prepareNameContainsKeywordsPredicate(\"Roti John\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d prepareNameContainsKeywordsPredicate(\"Strawberry Sandwich\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // same predicate -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void execute_invalidNameKeywords_exceptionThrown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // Name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS, () -\u003e prepareNameContainsKeywordsPredicate(\"\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS, () -\u003e prepareNameContainsKeywordsPredicate(\" \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS, () -\u003e prepareNameContainsKeywordsPredicate(\"-1!!!\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS, () -\u003e prepareNameContainsKeywordsPredicate(\"?#!\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS, () -\u003e prepareNameContainsKeywordsPredicate(\"?# !\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS, () -\u003e prepareNameContainsKeywordsPredicate(\"Chicken ?#!\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void execute_invalidTagKeywords_exceptionThrown() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // Tag"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS, () -\u003e prepareTagContainsKeywordsPredicate(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS, () -\u003e prepareTagContainsKeywordsPredicate(\"   \"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS, () -\u003e prepareTagContainsKeywordsPredicate(\"GuiltFood!\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS, () -\u003e prepareTagContainsKeywordsPredicate(\"GuiltFood Haha\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS, () -\u003e prepareTagContainsKeywordsPredicate(\"!?!@#\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void execute_invalidNutritionalValueKeywords_exceptionThrown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // Calorie"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Calorie.MESSAGE_CONSTRAINTS, () -\u003e prepareCalorieContainsKeywordsPredicate(\"\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Calorie.MESSAGE_CONSTRAINTS, () -\u003e prepareCalorieContainsKeywordsPredicate(\"   \"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Calorie.MESSAGE_CONSTRAINTS, () -\u003e prepareCalorieContainsKeywordsPredicate(\"a\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Calorie.MESSAGE_CONSTRAINTS, () -\u003e prepareCalorieContainsKeywordsPredicate(\"-1\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // Protein"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Protein.MESSAGE_CONSTRAINTS, () -\u003e prepareProteinContainsKeywordsPredicate(\"\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Protein.MESSAGE_CONSTRAINTS, () -\u003e prepareProteinContainsKeywordsPredicate(\"    \"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Protein.MESSAGE_CONSTRAINTS, () -\u003e prepareProteinContainsKeywordsPredicate(\"a\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Protein.MESSAGE_CONSTRAINTS, () -\u003e prepareProteinContainsKeywordsPredicate(\"-1\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // Carbohydrate"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Carbohydrate.MESSAGE_CONSTRAINTS, () -\u003e prepareCarbohydrateContainsKeywordsPredicate(\"\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Carbohydrate.MESSAGE_CONSTRAINTS, () -\u003e prepareCarbohydrateContainsKeywordsPredicate(\"   \"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Carbohydrate.MESSAGE_CONSTRAINTS, () -\u003e prepareCarbohydrateContainsKeywordsPredicate(\"b\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Carbohydrate.MESSAGE_CONSTRAINTS, () -\u003e prepareCarbohydrateContainsKeywordsPredicate(\"-1\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // Fat"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Fat.MESSAGE_CONSTRAINTS, () -\u003e prepareFatContainsKeywordsPredicate(\"\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Fat.MESSAGE_CONSTRAINTS, () -\u003e prepareFatContainsKeywordsPredicate(\"  \"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Fat.MESSAGE_CONSTRAINTS, () -\u003e prepareFatContainsKeywordsPredicate(\"a\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Fat.MESSAGE_CONSTRAINTS, () -\u003e prepareFatContainsKeywordsPredicate(\"-1\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void execute_multipleNameKeywordsSingleNamePrefix_multipleFoodItemsFound() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FOODS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNameContainsKeywordsPredicate(\"Kurz Banana Milkshake Kunz\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.updateFilteredFoodRecord(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(Arrays.asList(TypicalFoodItems.BANANA_MILKSHAKE), model.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void execute_singleKeywordForCalorie_multipleFoodItemsFound() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FOODS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CalorieContainsKeywordsPredicate predicate \u003d prepareCalorieContainsKeywordsPredicate(\"300\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        expectedModel.updateFilteredFoodRecord(predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assertEquals(Arrays.asList(TypicalFoodItems.CHOCOLATE_BAR, TypicalFoodItems.GRANOLA),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                model.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void execute_singleKeywordForProtein_multipleFoodItemsFound() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FOODS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ProteinContainsKeywordsPredicate predicate \u003d prepareProteinContainsKeywordsPredicate(\"20\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        expectedModel.updateFilteredFoodRecord(predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assertEquals(Arrays.asList(TypicalFoodItems.ALMOND, TypicalFoodItems.DUCK_RICE),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                model.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void execute_singleKeywordForCarbohydrate_multipleFoodItemsFound() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FOODS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CarbohydrateContainsKeywordsPredicate predicate \u003d prepareCarbohydrateContainsKeywordsPredicate(\"20\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        expectedModel.updateFilteredFoodRecord(predicate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                Arrays.asList(TypicalFoodItems.ALMOND, TypicalFoodItems.FISH_AND_CHIPS),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                model.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void execute_singleKeywordForFat_foodItemFound() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FOODS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FatContainsKeywordsPredicate predicate \u003d prepareFatContainsKeywordsPredicate(\"20\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        expectedModel.updateFilteredFoodRecord(predicate);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assertEquals(Arrays.asList(TypicalFoodItems.DUCK_RICE),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                model.getFilteredFoodRecord());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNameContainsKeywordsPredicate(String userInput) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new NameContainsKeywordsPredicate(new Name(userInput));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses {@code userInput} into a {@code CalorieContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private CalorieContainsKeywordsPredicate prepareCalorieContainsKeywordsPredicate(String userInput) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new CalorieContainsKeywordsPredicate(new Calorie(userInput));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses {@code userInput} into a {@code ProteinContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private ProteinContainsKeywordsPredicate prepareProteinContainsKeywordsPredicate(String userInput) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new ProteinContainsKeywordsPredicate(new Protein(userInput));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses {@code userInput} into a {@code CarbohydrateContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private CarbohydrateContainsKeywordsPredicate prepareCarbohydrateContainsKeywordsPredicate(String userInput) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new CarbohydrateContainsKeywordsPredicate(new Carbohydrate(userInput));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses {@code userInput} into a {@code FatContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private FatContainsKeywordsPredicate prepareFatContainsKeywordsPredicate(String userInput) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new FatContainsKeywordsPredicate(new Fat(userInput));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Parses {@code userInput} into a {@code TagContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    private TagContainsKeywordsPredicate prepareTagContainsKeywordsPredicate(String userInput) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        tagList.add(new Tag(userInput));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        return new TagContainsKeywordsPredicate(tagList);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 1,
      "jeremylow97": 57,
      "eugenetyc": 191
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static life.calgo.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 1,
      "jeremylow97": 4,
      "-": 15
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodRecord(), model.getConsumptionRecord(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, TypicalIndexes.INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 5,
      "jeremylow97": 37
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/NomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.testutil.TypicalDailyFoodLog;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "public class NomCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void constructor_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        DailyFoodLog validDailyFoodLog \u003d TypicalDailyFoodLog.getAppleOnlyLog();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new NomCommand(validDailyFoodLog, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void constructor_nullDailyFoodLog_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new NomCommand(null, validFood));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void execute_existingFoodAcceptedByDailyFoodLog_nomSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        Food validApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        DailyFoodLog validDailyFoodLog \u003d TypicalDailyFoodLog.getAppleOnlyLog();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        CommandResult commandResult \u003d new NomCommand(validDailyFoodLog, validApple).execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        assertEquals(String.format(NomCommand.MESSAGE_SUCCESS, validApple), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        assertTrue(model.getCurrentFilteredDailyList().contains(validApple));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void execute_validFood_nomSuccessful() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        Food validApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        DailyFoodLog validDailyFoodLog \u003d TypicalDailyFoodLog.getAppleOnlyLog();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        CommandResult commandResult \u003d new NomCommand(validDailyFoodLog, validApple).execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        assertEquals(String.format(NomCommand.MESSAGE_SUCCESS, validApple), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        assertTrue(model.getCurrentFilteredDailyList().contains(validApple));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        Food apple \u003d new FoodBuilder().withName(\"Apple\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        Food banana \u003d new FoodBuilder().withName(\"Banana\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        DailyFoodLog validDailyFoodLog \u003d TypicalDailyFoodLog.DAILY_FOOD_LOG_TODAY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        NomCommand nomAppleCommand \u003d new NomCommand(validDailyFoodLog, apple);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        NomCommand nomBananaCommand \u003d new NomCommand(validDailyFoodLog, banana);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        assertTrue(nomAppleCommand.equals(nomAppleCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        NomCommand nomAppleCommandCopy \u003d new NomCommand(validDailyFoodLog, apple);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        assertTrue(nomAppleCommand.equals(nomAppleCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        assertFalse(nomAppleCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        assertFalse(nomAppleCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        // different command object -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        assertFalse(nomAppleCommand.equals(nomBananaCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 89
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/StomachCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "public class StomachCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "            new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void constructor_nullDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new StomachCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new StomachCommand(date).execute(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 36
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/UpdateCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code UpdateCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UpdateCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        model \u003d new ModelManager(TypicalFoodItems.getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_newFood_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.addFood(validFood);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new UpdateCommand(validFood), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                String.format(UpdateCommand.MESSAGE_SUCCESS, validFood), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_existingFood_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food validFood \u003d new FoodBuilder().withName(\"Almond\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food existingFood \u003d model.getFoodRecord().getFoodList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodRecord(), model.getConsumptionRecord(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedModel.setFood(existingFood, validFood);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandSuccess(new UpdateCommand(validFood), model,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                String.format(UpdateCommand.MESSAGE_UPDATE_EXISTING_FOOD_SUCCESS, validFood), expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 7,
      "jeremylow97": 48
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/commands/UpdateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.getTypicalFoodRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.DisplayFood;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodRecord(), new ConsumptionRecord(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            new UserPrefs(), new DailyGoal());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new UpdateCommand(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_foodAcceptedByModel_updateSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandResult commandResult \u003d new UpdateCommand(validFood).execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(String.format(UpdateCommand.MESSAGE_SUCCESS, validFood), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(model.hasFood(validFood));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_existingFood_updateSuccessful() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedFood \u003d new FoodBuilder().withProtein(\"222222\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(editedFood);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        model.addFood(validFood);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandResult commandResult \u003d updateCommand.execute(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(String.format(UpdateCommand.MESSAGE_UPDATE_EXISTING_FOOD_SUCCESS, editedFood),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(model.hasFood(editedFood));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void execute_existingFoodSameValues_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food existingFoodSameValues \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(existingFoodSameValues);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        model.addFood(validFood);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertCommandFailure(updateCommand, model,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                String.format(UpdateCommand.MESSAGE_UPDATE_EXISTING_FOOD_SAME_VALUES_FAILED,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                existingFoodSameValues.getName().fullName));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food apple \u003d new FoodBuilder().withName(\"Apple\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food banana \u003d new FoodBuilder().withName(\"Banana\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UpdateCommand addAppleCommand \u003d new UpdateCommand(apple);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UpdateCommand addBananaCommand \u003d new UpdateCommand(banana);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UpdateCommand addAppleCommandCopy \u003d new UpdateCommand(apple);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(addAppleCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(addAppleCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(addAppleCommand.equals(addBananaCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public Path getFoodRecordFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        public void setFoodRecordFilePath(Path foodRecordFilePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        public ReadOnlyConsumptionRecord getConsumptionRecord() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void setFoodRecord(ReadOnlyFoodRecord newData) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public ReadOnlyFoodRecord getFoodRecord() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public Food getExistingFood(Food toAdd) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodRecord() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void updateFilteredFoodRecord(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        public ObservableList\u003cDisplayFood\u003e getCurrentFilteredDailyList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        public void updateCurrentFilteredDailyList(Predicate\u003cDisplayFood\u003e predicate, LocalDate date) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        public void updateConsumedLists(Food food) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public Optional\u003cFood\u003e getFoodByName(Name parseName) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean hasLogWithSameDate(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean hasLogWithSameDate(LocalDate date) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void addLog(DailyFoodLog foodLog) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void updateLog(DailyFoodLog logAfterConsumption) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public DailyFoodLog getLogByDate(LocalDate localDate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        public void updateDailyGoal(int targetDailyCalories) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean isGoalMade() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public DailyGoal getDailyGoal() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        public double getRemainingCalories() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        public LocalDate getDate() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        public void updateDate(LocalDate date) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        public ArrayList\u003cDailyFoodLog\u003e getPastWeekLogs() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private class ModelStubWithFood extends ModelStub {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        private final Food food;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        ModelStubWithFood(Food food) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            this.food \u003d food;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return this.food.isSameFood(food);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private class ModelStubAcceptingFoodAdded extends ModelStub {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        final ArrayList\u003cFood\u003e foodItemsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return foodItemsAdded.stream().anyMatch(food::isSameFood);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            foodItemsAdded.add(food);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public ReadOnlyFoodRecord getFoodRecord() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return new FoodRecord();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 20,
      "ray-97": 17,
      "jeremylow97": 278,
      "eugenetyc": 1
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/CalgoParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class CalgoParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private final CalgoParser parser \u003d new CalgoParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_update() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        UpdateCommand command \u003d (UpdateCommand) parser.parseCommand(FoodUtil.getUpdateCommand(food));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(new UpdateCommand(food), command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String foodName \u003d \"Apple\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food foodToDelete \u003d new FoodBuilder().withName(foodName)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCalorie(\"0\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCarbohydrate(\"0\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(\"0\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCarbohydrate(\"0\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withFat(\"0\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" n/\" + foodName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(new DeleteCommand(foodToDelete), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        String keywords \u003d \"Hamburger and Fries\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                FindCommand.COMMAND_WORD + \" n/\" + keywords);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(new Name(keywords))), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\", model));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                ParseException.class, Messages.MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        parser.parseCommand(\"unknownCommand\", model));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 13,
      "jeremylow97": 81,
      "eugenetyc": 4
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new FoodBuilder().withName(\"Apple\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCalorie(\"0\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(\"0\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCarbohydrate(\"0\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withFat(\"0\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" n/Apple\", new DeleteCommand(food));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 37
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.CalorieContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.CarbohydrateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.FatContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.ProteinContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // only find keyword"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"find\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                FindCommandParser.MESSAGE_EXCESS_FIND_FILTERS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // By Name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FindCommand expectedFindCommandByName \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(new Name(\"Strawberry Jam\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find n/Strawberry Jam\", expectedFindCommandByName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find n/  Strawberry   Jam  \","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                expectedFindCommandByName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // By Calorie"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FindCommand expectedFindCommandByCalorie \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                new FindCommand(new CalorieContainsKeywordsPredicate(new Calorie(\"111\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find cal/111\", expectedFindCommandByCalorie);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find cal/  111  \", expectedFindCommandByCalorie);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // By Protein"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FindCommand expectedFindCommandByProtein \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                new FindCommand(new ProteinContainsKeywordsPredicate(new Protein(\"123\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find p/123\", expectedFindCommandByProtein);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find p/  123  \", expectedFindCommandByProtein);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // By Carbohydrate"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FindCommand expectedFindCommandByCarbohydrate \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                new FindCommand(new CarbohydrateContainsKeywordsPredicate(new Carbohydrate(\"99\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find c/99\", expectedFindCommandByCarbohydrate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find c/  99  \", expectedFindCommandByCarbohydrate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // By Fat"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FindCommand expectedFindCommandByFat \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                new FindCommand(new FatContainsKeywordsPredicate(new Fat(\"69\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find f/69\", expectedFindCommandByFat);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find f/  69 \", expectedFindCommandByFat);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // By Tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        tagList.add(new Tag(\"Sweet\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        FindCommand expectedFindCommandByTag \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                new FindCommand(new TagContainsKeywordsPredicate(tagList));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find t/Sweet\", expectedFindCommandByTag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"find t/  Sweet  \", expectedFindCommandByTag);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public void parse_invalidArguments_returnsException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // more than 1 Prefix of same type"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"find n/cake n/1\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                FindCommandParser.MESSAGE_EXCESS_FIND_FILTERS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // 2 of different Prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"find n/cake f/1\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                FindCommandParser.MESSAGE_EXCESS_FIND_FILTERS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // 3 of different Prefix in different order"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"find n/cake c/1 cal/100\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                FindCommandParser.MESSAGE_EXCESS_FIND_FILTERS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        // Multiple Prefix of multiple types"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"find n/cake n/chicken c/1 cal/100 cal/50\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                FindCommandParser.MESSAGE_EXCESS_FIND_FILTERS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 21,
      "eugenetyc": 96
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/NomCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.NomCommandParser.MESSAGE_NONEXISTENT_FOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.ParserUtil.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.ParserUtil.MESSAGE_INVALID_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.ParserUtil.MESSAGE_NON_POSITIVE_PORTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.logic.parser.ParserUtil.MESSAGE_PORTION_LENGTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.commands.NomCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.testutil.TypicalDailyFoodLog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class NomCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private ModelManager modelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private NomCommandParser nomCommandParser \u003d new NomCommandParser(new ModelManager());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        nomCommandParser \u003d new NomCommandParser(modelManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        modelManager.addFood(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_missingNamePrefix_parseExceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, NomCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertThrows(ParseException.class, expectedMessage, () -\u003e nomCommandParser.parse(\"nom\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_missingNameValue_parseExceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertThrows(ParseException.class, expectedMessage, () -\u003e nomCommandParser.parse(\"nom n/\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_foodNotInFoodRecord_parseExceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NONEXISTENT_FOOD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertThrows(ParseException.class, expectedMessage, () -\u003e nomCommandParser.parse(\"nom n/SHaRk fIn SoUp\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_invalidDateFormat_parseExceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ParseException.class, expectedMessage, () -\u003e nomCommandParser.parse(\"nom n/Apple d/2020/09/08\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_nonExistentDate_parseExceptionThrown() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ParseException.class, expectedMessage, () -\u003e nomCommandParser.parse(\"nom n/Apple d/2020-02-31\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_negativePortion_parseExceptionThrown() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NON_POSITIVE_PORTION;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                ParseException.class, expectedMessage, () -\u003e nomCommandParser.parse(\"nom n/Apple portion/-1\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_overSizedPortion_parseExceptionThrown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String expectedMessage \u003d MESSAGE_PORTION_LENGTH;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                expectedMessage, () -\u003e nomCommandParser.parse(\"nom n/Apple portion/99999999999\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_negativeRating_parseExceptionThrown() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_RATING;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertThrows(ParseException.class, expectedMessage, () -\u003e nomCommandParser.parse(\"nom n/Apple r/-1\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_doubleForRating_parseExceptionThrown() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_RATING;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertThrows(ParseException.class, expectedMessage, () -\u003e nomCommandParser.parse(\"nom n/Apple r/1.5\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_ratingOutOfRange_parseExceptionThrown() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_RATING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertThrows(ParseException.class, expectedMessage, () -\u003e nomCommandParser.parse(\"nom n/Apple r/11\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_validFoodSentenceCase_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String userInput \u003d \"nom n/Apple\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog appleOnlyLog \u003d TypicalDailyFoodLog.getAppleOnlyLog();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertParseSuccess(nomCommandParser, userInput, new NomCommand(appleOnlyLog, TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_validFoodLowerCase_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String userInput \u003d \"nom n/apple\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog appleOnlyLog \u003d TypicalDailyFoodLog.getAppleOnlyLog();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertParseSuccess(nomCommandParser, userInput, new NomCommand(appleOnlyLog, TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_validFoodUpperCase_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String userInput \u003d \"nom n/APPLE\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog appleOnlyLog \u003d TypicalDailyFoodLog.getAppleOnlyLog();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertParseSuccess(nomCommandParser, userInput, new NomCommand(appleOnlyLog, TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_validDate_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String userInput \u003d \"nom n/Apple d/\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog appleOnlyLog \u003d TypicalDailyFoodLog.getAppleOnlyLog();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertParseSuccess(nomCommandParser, userInput, new NomCommand(appleOnlyLog, TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void parse_validPortion_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        String userInput \u003d \"nom n/Apple portion/1\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog appleOnlyLog \u003d TypicalDailyFoodLog.getAppleOnlyLog();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertParseSuccess(nomCommandParser, userInput, new NomCommand(appleOnlyLog, TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 133
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_NAME \u003d \"@APPLE!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_CALORIE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_CARBOHYDRATE \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_PROTEIN \u003d \"ABC!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_FAT \u003d \"IAMNOTFAT?!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_TAG \u003d \"# u a dum\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_NAME \u003d \"Apple\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_CALORIE \u003d \"100\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_PROTEIN \u003d \"10\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_CARBOHYDRATE \u003d \"5\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_FAT \u003d \"2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"hard\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"healthy\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCalorie_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCalorie((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCalorie_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCalorie(INVALID_CALORIE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCalorie_validValueWithoutWhitespace_returnsCalorie() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Calorie expectedCalorie \u003d new Calorie(VALID_CALORIE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedCalorie, ParserUtil.parseCalorie(VALID_CALORIE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCalorie_validValueWithWhitespace_returnsTrimmedCalorie() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String calorieWithWhitespace \u003d WHITESPACE + VALID_CALORIE + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Calorie expectedCalorie \u003d new Calorie(VALID_CALORIE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedCalorie, ParserUtil.parseCalorie(calorieWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseProtein_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseProtein((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseProtein_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseProtein(INVALID_PROTEIN));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseProtein_validValueWithoutWhitespace_returnsProtein() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Protein expectedProtein \u003d new Protein(VALID_PROTEIN);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedProtein, ParserUtil.parseProtein(VALID_PROTEIN));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseProtein_validValueWithWhitespace_returnsTrimmedProtein() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String proteinWithWhitespace \u003d WHITESPACE + VALID_PROTEIN + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Protein expectedProtein \u003d new Protein(VALID_PROTEIN);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedProtein, ParserUtil.parseProtein(proteinWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCarbohydrate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCarbohydrate((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCarbohydrate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCarbohydrate(INVALID_CARBOHYDRATE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCarbohydrate_validValueWithoutWhitespace_returnsCarbohydrate() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Carbohydrate expectedCarbohydrate \u003d new Carbohydrate(VALID_CARBOHYDRATE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedCarbohydrate, ParserUtil.parseCarbohydrate(VALID_CARBOHYDRATE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseCarbohydrate_validValueWithWhitespace_returnsTrimmedCarbohydrate() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String carbohydrateWithWhitespace \u003d WHITESPACE + VALID_CARBOHYDRATE + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Carbohydrate expectedCarbohydrate \u003d new Carbohydrate(VALID_CARBOHYDRATE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedCarbohydrate, ParserUtil.parseCarbohydrate(carbohydrateWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseFat_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFat((String) null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseFat_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseFat(INVALID_FAT));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseFat_validValueWithoutWhitespace_returnsFat() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Fat expectedFat \u003d new Fat(VALID_FAT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedFat, ParserUtil.parseFat(VALID_FAT));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseFat_validValueWithWhitespace_returnsTrimmedFat() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String fatWithWhitespace \u003d WHITESPACE + VALID_FAT + WHITESPACE;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Fat expectedFat \u003d new Fat(VALID_FAT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedFat, ParserUtil.parseFat(fatWithWhitespace));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 227
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/StomachCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static life.calgo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static life.calgo.logic.parser.ParserUtil.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.logic.commands.StomachCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "import life.calgo.testutil.TypicalDailyFoodLog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "public class StomachCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private StomachCommandParser parser \u003d new StomachCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    private DailyFoodLog dailyLog \u003d TypicalDailyFoodLog.getAppleOnlyLog();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void parse_validArgs_returnsStomachCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        String userInput \u003d \"stomach\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, new StomachCommand(date));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        String invalidUserInput \u003d \"stomach 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        CommandParserTestUtil.assertParseFailure("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                parser, invalidUserInput, String.format(expectedMessage, StomachCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void parse_invalidDateFormat_parseExceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        String invalidUserInput \u003d \"stomach d/2020/09/08\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                expectedMessage, () -\u003e parser.parse(invalidUserInput));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    public void parse_nonExistentDate_parseExceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        String invalidUserInput \u003d \"stomach d/2020-02-31\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "                expectedMessage, () -\u003e parser.parse(invalidUserInput));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "J-Dan23"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "J-Dan23": 53
    }
  },
  {
    "path": "src/test/java/life/calgo/logic/parser/UpdateCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CALORIE_DESC_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CALORIE_DESC_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CARBOHYDRATE_DESC_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.CARBOHYDRATE_DESC_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.FAT_DESC_APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.FAT_DESC_BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_CALORIE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_CARBOHYDRATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_FAT_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_PROTEIN_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.PROTEIN_DESC_APPLE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.PROTEIN_DESC_BANANA;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.TAG_DESC_HARD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.TAG_DESC_SOFT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_CALORIE_BANANA;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_CARBOHYDRATE_BANANA;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_PROTEIN_BANANA;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.commands.CommandTestUtil.VALID_TAG_SOFT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(TypicalFoodItems.BANANA).withTags(VALID_TAG_SOFT).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BANANA"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CALORIE_DESC_BANANA + PROTEIN_DESC_BANANA"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_APPLE + NAME_DESC_BANANA"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CALORIE_DESC_BANANA + PROTEIN_DESC_BANANA"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple calorie - last calorie accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_BANANA + CALORIE_DESC_APPLE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CALORIE_DESC_BANANA + PROTEIN_DESC_BANANA"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple protein - last protein accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_APPLE + PROTEIN_DESC_BANANA"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple carbohydrate - last carbohydrate accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_APPLE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple fat - last fat accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_APPLE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + CARBOHYDRATE_DESC_BANANA + FAT_DESC_APPLE + FAT_DESC_BANANA"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + TAG_DESC_SOFT, new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food expectedFoodMultipleTags \u003d new FoodBuilder(TypicalFoodItems.BANANA)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withTags(VALID_TAG_SOFT, VALID_TAG_HARD)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT, new UpdateCommand(expectedFoodMultipleTags));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(TypicalFoodItems.APPLE).withTags().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_APPLE + CALORIE_DESC_APPLE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + PROTEIN_DESC_APPLE + CARBOHYDRATE_DESC_APPLE + FAT_DESC_APPLE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                new UpdateCommand(expectedFood));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + VALID_CALORIE_BANANA"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + VALID_PROTEIN_BANANA + CARBOHYDRATE_DESC_BANANA,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + PROTEIN_DESC_BANANA + VALID_CARBOHYDRATE_BANANA,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_BANANA + VALID_CALORIE_BANANA"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + VALID_PROTEIN_BANANA + VALID_CARBOHYDRATE_BANANA,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_NAME_DESC + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid calorie"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + INVALID_CALORIE_DESC"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT, Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid protein"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + INVALID_PROTEIN_DESC + CARBOHYDRATE_DESC_BANANA"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT, Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid carbohydrate"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + INVALID_CARBOHYDRATE_DESC"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT, Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid fat"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + INVALID_CARBOHYDRATE_DESC"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + INVALID_FAT_DESC + TAG_DESC_HARD + TAG_DESC_SOFT, Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_BANANA + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + PROTEIN_DESC_BANANA + CARBOHYDRATE_DESC_BANANA"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                + FAT_DESC_BANANA + INVALID_TAG_DESC + VALID_TAG_SOFT, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_NAME_DESC + CALORIE_DESC_BANANA"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + PROTEIN_DESC_BANANA + INVALID_CARBOHYDRATE_DESC + FAT_DESC_BANANA,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BANANA"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + CALORIE_DESC_BANANA + PROTEIN_DESC_BANANA"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        + CARBOHYDRATE_DESC_BANANA + FAT_DESC_BANANA + TAG_DESC_HARD + TAG_DESC_SOFT,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 177
    }
  },
  {
    "path": "src/test/java/life/calgo/model/FoodRecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodRecordTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final FoodRecord foodRecord \u003d new FoodRecord();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(Collections.emptyList(), foodRecord.getFoodList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e foodRecord.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void resetData_withValidReadOnlyFoodRecord_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord newData \u003d TypicalFoodItems.getTypicalFoodRecord();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodRecord.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(newData, foodRecord);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void resetData_withDuplicateFoodItems_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(CommandTestUtil.VALID_PROTEIN_APPLE).withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        List\u003cFood\u003e newFoods \u003d Arrays.asList(TypicalFoodItems.APPLE, editedApple);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecordStub newData \u003d new FoodRecordStub(newFoods);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DuplicateFoodException.class, () -\u003e foodRecord.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_nullFoodItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e foodRecord.hasFood(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_foodNoteInFoodRecord_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(foodRecord.hasFood(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_foodInFoodRecord_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodRecord.addFood(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(foodRecord.hasFood(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_foodWithSameIdentityFieldsInFoodRecord_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodRecord.addFood(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(CommandTestUtil.VALID_PROTEIN_APPLE).withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(foodRecord.hasFood(editedApple));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void getFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e foodRecord.getFoodList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static class FoodRecordStub implements ReadOnlyFoodRecord {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        private final ObservableList\u003cFood\u003e foods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecordStub(Collection\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            this.foods.setAll(foods);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            return foods;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 102
    }
  },
  {
    "path": "src/test/java/life/calgo/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.model.Model.PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.BANANA_MILKSHAKE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodRecordBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(new FoodRecord(), new FoodRecord(modelManager.getFoodRecord()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        userPrefs.setFoodRecordFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        userPrefs.setFoodRecordFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodRecordFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFoodRecordFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodRecordFilePath_validPath_setsFoodRecordFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Path path \u003d Paths.get(\"food/record/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        modelManager.setFoodRecordFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(path, modelManager.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFood(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_foodNotInFoodRecord_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(modelManager.hasFood(APPLE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void hasFood_personInFoodRecord_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        modelManager.addFood(APPLE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(modelManager.hasFood(APPLE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFoodRecord().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord foodRecord \u003d new FoodRecordBuilder().withFood(APPLE).withFood(BANANA_MILKSHAKE).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord differentFoodRecord \u003d new FoodRecord();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ConsumptionRecord consumptionRecord \u003d new ConsumptionRecord();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        DailyGoal dailyGoal \u003d new DailyGoal();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        modelManager \u003d new ModelManager(foodRecord, consumptionRecord, userPrefs, dailyGoal);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(foodRecord, consumptionRecord, userPrefs, dailyGoal);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFoodRecord, consumptionRecord,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                userPrefs, dailyGoal)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Name keywords \u003d APPLE.getName();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        modelManager.updateFilteredFoodRecord(new NameContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodRecord, consumptionRecord, userPrefs, dailyGoal)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        modelManager.updateFilteredFoodRecord(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        differentUserPrefs.setFoodRecordFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodRecord, consumptionRecord,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                differentUserPrefs, dailyGoal)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 8,
      "jeremylow97": 32,
      "eugenetyc": 4,
      "-": 94
    }
  },
  {
    "path": "src/test/java/life/calgo/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodRecordFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFoodRecordFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/life/calgo/model/day/DailyFoodLogTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.testutil.TypicalDailyFoodLog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class DailyFoodLogTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void copy_typicalDailyFoodLog_returnsTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertTrue(TypicalDailyFoodLog.DAILY_FOOD_LOG_TODAY"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                .equals(TypicalDailyFoodLog.DAILY_FOOD_LOG_TODAY.copy()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void getRating_ratingOf_returnsTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertEquals(TypicalDailyFoodLog.DAILY_FOOD_LOG_TODAY.getRating(TypicalFoodItems.BANANA),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                (double) (6 + 9) / 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void getFoodByIndex_typicalDailyFoodLog_returnsTrue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertEquals(TypicalFoodItems.ALMOND, TypicalDailyFoodLog.DAILY_FOOD_LOG_TODAY.getFoodByIndex(0).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 30
    }
  },
  {
    "path": "src/test/java/life/calgo/model/day/DailyGoalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class DailyGoalTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void constructor_nullDailyGoal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DailyGoal((Integer) null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void constructor_invalidDailyGoal_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        int invalidGoal \u003d -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new DailyGoal(invalidGoal));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Acceptance tests for DailyGoal"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void isValidGoal() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // null daily goal"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e DailyGoal.isValidGoal(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // perform Boundary Value Analysis"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // invalid daily goal"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertFalse(DailyGoal.isValidGoal(DailyGoal.DUMMY_VALUE)); // Default value that is not valid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertFalse(DailyGoal.isValidGoal(-1)); // Negative value"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertFalse(DailyGoal.isValidGoal(DailyGoal.MAXIMUM_ACCEPTABLE_CALORIES + 1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // valid daily goal"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertTrue(DailyGoal.isValidGoal(DailyGoal.MINIMUM_ACCEPTABLE_CALORIES));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertTrue(DailyGoal.isValidGoal(DailyGoal.MINIMUM_HEALTHY_CALORIES + 1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertTrue(DailyGoal.isValidGoal(DailyGoal.MAXIMUM_ACCEPTABLE_CALORIES));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertTrue(DailyGoal.isValidGoal(DailyGoal.MAXIMUM_ACCEPTABLE_CALORIES - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertTrue(DailyGoal.isValidGoal(DailyGoal.MINIMUM_HEALTHY_CALORIES));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertTrue(DailyGoal.isValidGoal(DailyGoal.MINIMUM_HEALTHY_CALORIES + 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertTrue(DailyGoal.isValidGoal(DailyGoal.MINIMUM_HEALTHY_CALORIES - 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 47
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/CalorieTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class CalorieTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Calorie(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_invalidCalorie_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String invalidCalorie \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Calorie(invalidCalorie));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void isValidCalorie() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null calorie"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Calorie.isValidCalorie(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid calorie"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // valid calorie"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Calorie.isValidCalorie(\"122\")); // normal calorie number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Calorie.isValidCalorie(\"124293842033123\")); // long calorie numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 39
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/CarbohydrateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class CarbohydrateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Carbohydrate(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_invalidCarbohydrate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String invalidCarbohydrate \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Carbohydrate(invalidCarbohydrate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void isValidCarbohydrate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null carbohydrate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Carbohydrate.isValidCarbohydrate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid carbohydrate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Carbohydrate.isValidCarbohydrate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Carbohydrate.isValidCarbohydrate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Carbohydrate.isValidCarbohydrate(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Carbohydrate.isValidCarbohydrate(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Carbohydrate.isValidCarbohydrate(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // valid carbohydrate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Carbohydrate.isValidCarbohydrate(\"122\")); // normal carbohydrate number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Carbohydrate.isValidCarbohydrate(\"124293842033123\")); // long carbohydrate numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 39
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/FatTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FatTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Fat(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_invalidFat_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String invalidFat \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Fat(invalidFat));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void isValidFat() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null fat"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Fat.isValidFat(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid fat"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Fat.isValidFat(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Fat.isValidFat(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Fat.isValidFat(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Fat.isValidFat(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Fat.isValidFat(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // valid fat"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Fat.isValidFat(\"122\")); // normal fat number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Fat.isValidFat(\"124293842033123\")); // long fat numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 39
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e food.getTags().remove(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void isSameFood() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(TypicalFoodItems.APPLE.isSameFood(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.isSameFood(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCalorie(CommandTestUtil.VALID_CALORIE_BANANA)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withFat(CommandTestUtil.VALID_PROTEIN_BANANA).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(TypicalFoodItems.APPLE.isSameFood(editedApple));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withName(CommandTestUtil.VALID_NAME_BANANA).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.isSameFood(editedApple));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food aliceCopy \u003d new FoodBuilder(TypicalFoodItems.APPLE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(TypicalFoodItems.APPLE.equals(aliceCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(TypicalFoodItems.APPLE.equals(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(TypicalFoodItems.BANANA_MILKSHAKE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withName(CommandTestUtil.VALID_NAME_BANANA).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different calorie -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withCalorie(CommandTestUtil.VALID_CALORIE_BANANA).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different fat -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withFat(CommandTestUtil.VALID_FAT_BANANA).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different protein -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withProtein(CommandTestUtil.VALID_PROTEIN_BANANA).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different carbohydrate -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withCarbohydrate(CommandTestUtil.VALID_CARBOHYDRATE_BANANA).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same name, different tags -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE).withTags(CommandTestUtil.VALID_TAG_HARD).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(TypicalFoodItems.APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 84
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.model.food.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Name firstPredicateKeywordsName \u003d new Name(\"Kiwi\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Name secondPredicateKeywordsName \u003d new Name(\"Kiwi Jam\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordsName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordsName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                new NameContainsKeywordsPredicate(firstPredicateKeywordsName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(new Name(\"Apple\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(new Name(\"Apple Banana\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(new Name(\"Banana Chocolate\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Apple Chocolate\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(new Name(\"aPPle bANANA\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "                \"Names should only contain alphanumeric characters and spaces, \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                + \"and it should not be blank.\", () -\u003e new NameContainsKeywordsPredicate(new Name(\"\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(new Name(\"Chocolate\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 1,
      "jeremylow97": 55,
      "eugenetyc": 15
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Name.isValidName(\"apple*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Name.isValidName(\"pineapple black\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Name.isValidName(\"100\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Name.isValidName(\"apple the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Name.isValidName(\"Banana Milk\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Name.isValidName(\"Banana Pineapple Strawberry Grass Mud Juice\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 12,
      "-": 29
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/ProteinTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class ProteinTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Protein(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void constructor_invalidProtein_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String invalidProtein \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Protein(invalidProtein));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void isValidProtein() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // null fat"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Protein.isValidProtein(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // invalid fat"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Protein.isValidProtein(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Protein.isValidProtein(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Protein.isValidProtein(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Protein.isValidProtein(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(Protein.isValidProtein(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // valid fat"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Protein.isValidProtein(\"122\")); // normal fat number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(Protein.isValidProtein(\"124293842033123\")); // long fat numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 39
    }
  },
  {
    "path": "src/test/java/life/calgo/model/food/UniqueFoodListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class UniqueFoodListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private final UniqueFoodList uniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void contains_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void contains_foodNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(uniqueFoodList.contains(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void contains_foodInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(uniqueFoodList.contains(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void contains_foodWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(CommandTestUtil.VALID_PROTEIN_APPLE).withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertTrue(uniqueFoodList.contains(editedApple));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void add_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void add_duplicateFood_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DuplicateFoodException.class, () -\u003e uniqueFoodList.add(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_nullTargetFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFood(null, TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_nullEditedFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFood(TypicalFoodItems.APPLE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_targetFoodNotInList_throwsFoodNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(FoodNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                uniqueFoodList.setFood(TypicalFoodItems.APPLE, TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_editedFoodIsSameFood_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.setFood(TypicalFoodItems.APPLE, TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedUniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_editedFoodHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Food editedApple \u003d new FoodBuilder(TypicalFoodItems.APPLE)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .withProtein(CommandTestUtil.VALID_PROTEIN_APPLE).withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.setFood(TypicalFoodItems.APPLE, editedApple);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedUniqueFoodList.add(editedApple);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_editedFoodHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.setFood(TypicalFoodItems.APPLE, TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedUniqueFoodList.add(TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFood_editedFoodHasNonUniqueIdentity_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DuplicateFoodException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                uniqueFoodList.setFood(TypicalFoodItems.APPLE, TypicalFoodItems.BANANA_MILKSHAKE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void remove_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void remove_foodDoesNotExist_throwsFoodNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(FoodNotFoundException.class, () -\u003e uniqueFoodList.remove(TypicalFoodItems.APPLE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void remove_existingFood_removesFood() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.remove(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodItems_nullUniqueFoodList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFoods((UniqueFoodList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodItems_uniqueFoodList_replacesOwnListWithProvidedUniqueFoodList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedUniqueFoodList.add(TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.setFoods(expectedUniqueFoodList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodItems_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFoods((List\u003cFood\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodItems_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.add(TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        List\u003cFood\u003e foodList \u003d Collections.singletonList(TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        uniqueFoodList.setFoods(foodList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        expectedUniqueFoodList.add(TypicalFoodItems.BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void setFoodItems_listWithDuplicateFoodItems_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        List\u003cFood\u003e listWithDuplicateFoods \u003d Arrays.asList(TypicalFoodItems.APPLE, TypicalFoodItems.APPLE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DuplicateFoodException.class, () -\u003e uniqueFoodList.setFoods(listWithDuplicateFoods));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            -\u003e uniqueFoodList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 172
    }
  },
  {
    "path": "src/test/java/life/calgo/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 6,
      "-": 20
    }
  },
  {
    "path": "src/test/java/life/calgo/storage/JsonAdaptedFoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.storage.JsonAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.BANANA_MILKSHAKE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class JsonAdaptedFoodTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_NAME \u003d \"@APPLE!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_CALORIE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_CARBOHYDRATE \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_PROTEIN \u003d \"ABC!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_FAT \u003d \"IAMNOTFAT?!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String INVALID_TAG \u003d \"# u a dum\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_NAME \u003d BANANA_MILKSHAKE.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_CALORIE \u003d BANANA_MILKSHAKE.getCalorie().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_PROTEIN \u003d BANANA_MILKSHAKE.getProtein().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_CARBOHYDRATE \u003d BANANA_MILKSHAKE.getFat().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final String VALID_FAT \u003d BANANA_MILKSHAKE.getFat().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BANANA_MILKSHAKE.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_validFoodDetails_returnsFood() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(BANANA_MILKSHAKE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(BANANA_MILKSHAKE, food.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(INVALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(null, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidCalorie_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, INVALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d Calorie.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_nullCalorie_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, null, VALID_PROTEIN,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Calorie.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidCarbohydrate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        INVALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d Carbohydrate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_nullCarbohydrate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                null, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Carbohydrate.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidProtein_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, INVALID_PROTEIN,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d Protein.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_nullProtein_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, null,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                VALID_CARBOHYDRATE, VALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Protein.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidFat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                        VALID_CARBOHYDRATE, INVALID_FAT, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d Fat.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_nullFat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                VALID_CARBOHYDRATE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Fat.class.getSimpleName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_CALORIE, VALID_PROTEIN,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                VALID_CARBOHYDRATE, VALID_FAT, invalidTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, food::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 133
    }
  },
  {
    "path": "src/test/java/life/calgo/storage/JsonFoodRecordStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class JsonFoodRecordStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFoodRecordStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void readFoodRecord_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readFoodRecord(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFoodRecord\u003e readFoodRecord(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return new JsonFoodRecordStorage(Paths.get(filePath)).readFoodRecord(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertFalse(readFoodRecord(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readFoodRecord(\"notJsonFormatFoodRecord.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void readFoodRecord_invalidFoodFoodRecord_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readFoodRecord(\"invalidFoodItemFoodRecord.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void readFoodRecord_invalidAndValidFoodFoodRecord_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                DataConversionException.class, () -\u003e readFoodRecord(\"invalidAndValidFoodItemFoodRecord.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void readAndSaveFoodRecord_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFoodRecord.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord original \u003d TypicalFoodItems.getTypicalFoodRecord();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonFoodRecordStorage jsonFoodRecordStorage \u003d new JsonFoodRecordStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        jsonFoodRecordStorage.saveFoodRecord(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        ReadOnlyFoodRecord readBack \u003d jsonFoodRecordStorage.readFoodRecord(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(original, new FoodRecord(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        original.addFood(TypicalFoodItems.ZINGER_BURGER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        original.removeFood(TypicalFoodItems.DUCK_RICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        jsonFoodRecordStorage.saveFoodRecord(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        readBack \u003d jsonFoodRecordStorage.readFoodRecord(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(original, new FoodRecord(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        original.addFood(TypicalFoodItems.YELLOW_SAUCE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        jsonFoodRecordStorage.saveFoodRecord(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        readBack \u003d jsonFoodRecordStorage.readFoodRecord().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(original, new FoodRecord(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void saveFoodRecord_nullFoodRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveFoodRecord(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private void saveFoodRecord(ReadOnlyFoodRecord foodRecord, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            new JsonFoodRecordStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                    .saveFoodRecord(foodRecord, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void saveFoodRecord_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveFoodRecord(new FoodRecord(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 112
    }
  },
  {
    "path": "src/test/java/life/calgo/storage/JsonGoalStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.ReadOnlyGoal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.model.day.DailyGoal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "import life.calgo.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "public class JsonGoalStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonGoalStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Tests for Reading"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // test if JsonGoalStorage reads from null file path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void readGoal_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readGoal(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // test if JsonGoalStorage reads from non existent file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertFalse(readGoal(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // test if JsonGoalStorage reads from an incorrect json format file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readGoal(\"notJsonFormatGoal.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // test if JsonGoalStorage reads from an invalid json file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void readGoal_invalidGoal_throwDataConversionException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readGoal(\"invalidGoal.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Tests for Saving"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // test if JsonGoalStorage will save a Null Daily Goal."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveDailyGoal_nullDailyGoal_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveGoal(null, \"AnyFile.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // tests for Reading and Saving"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void readAndSaveGoal_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempGoal.json\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        DailyGoal testGoal \u003d new DailyGoal(DailyGoal.MINIMUM_HEALTHY_CALORIES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        JsonGoalStorage jsonGoalStorage \u003d new JsonGoalStorage(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // Save in new file and read back without any loss or change of data"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        jsonGoalStorage.saveGoal(testGoal, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        ReadOnlyGoal readBackGoal \u003d jsonGoalStorage.readGoal(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertEquals(testGoal, new DailyGoal(readBackGoal));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        testGoal \u003d testGoal.updateDailyGoal(DailyGoal.MAXIMUM_ACCEPTABLE_CALORIES);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        jsonGoalStorage.saveGoal(testGoal, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        readBackGoal \u003d jsonGoalStorage.readGoal(filePath).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertEquals(testGoal, new DailyGoal(readBackGoal));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        testGoal \u003d testGoal.updateDailyGoal(DailyGoal.MINIMUM_ACCEPTABLE_CALORIES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        jsonGoalStorage.saveGoal(testGoal); // file path not specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        readBackGoal \u003d jsonGoalStorage.readGoal().get(); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        assertEquals(testGoal, new DailyGoal(readBackGoal));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // test if JsonGoalStorage will save a valid Goal at a null file path."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    public void saveDailyGoal_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveGoal(new DailyGoal(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    // Utility Methods"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private java.util.Optional\u003cReadOnlyGoal\u003e readGoal(String filePath) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return new JsonGoalStorage(Paths.get(filePath)).readGoal(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     * Saves {@code dailyGoal} at the specified {@code filePath}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    private void saveGoal(DailyGoal dailyGoal, String filePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            new JsonGoalStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "                    .saveGoal(dailyGoal, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the goal file\", e);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "buddhavineeth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "buddhavineeth": 115
    }
  },
  {
    "path": "src/test/java/life/calgo/storage/JsonSerializableFoodRecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.testutil.TypicalFoodItems;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class JsonSerializableFoodRecordTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFoodRecordTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final Path TYPICAL_FOOD_ITEMS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFoodItemsFoodRecord.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final Path INVALID_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFoodItemFoodRecord.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private static final Path DUPLICATE_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFoodItemFoodRecord.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_typicalFoodItemsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonSerializableFoodRecord dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FOOD_ITEMS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                JsonSerializableFoodRecord.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord foodRecordFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord typicalFoodItemsFoodRecord \u003d TypicalFoodItems.getTypicalFoodRecord();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(foodRecordFromFile, typicalFoodItemsFoodRecord);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonSerializableFoodRecord dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FOOD_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                JsonSerializableFoodRecord.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonSerializableFoodRecord dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FOOD_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                JsonSerializableFoodRecord.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFoodRecord.MESSAGE_DUPLICATE_FOOD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 47
    }
  },
  {
    "path": "src/test/java/life/calgo/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        userPrefs.setFoodRecordFilePath(Paths.get(\"foodrecord.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/life/calgo/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.TypicalFoodItems.getTypicalFoodRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ReadOnlyConsumptionRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.ReadOnlyFoodRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.testutil.ConsumptionRecordBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonFoodRecordStorage foodRecordStorage \u003d new JsonFoodRecordStorage(getTempFilePath(\"fc\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        JsonConsumptionRecordStorage consumptionRecordStorage \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "                new JsonConsumptionRecordStorage(getTempFilePath(\"cc\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        JsonGoalStorage goalStorage \u003d new JsonGoalStorage(getTempFilePath(\"goal\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        storageManager \u003d new StorageManager(foodRecordStorage, consumptionRecordStorage, userPrefsStorage, goalStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public void foodRecordReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord original \u003d getTypicalFoodRecord();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        storageManager.saveFoodRecord(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        ReadOnlyFoodRecord retrieved \u003d storageManager.readFoodRecord().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertEquals(original, new FoodRecord(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public void consumptionRecordReadSave() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ConsumptionRecord original \u003d new ConsumptionRecordBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        storageManager.saveConsumptionRecord(original);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ReadOnlyConsumptionRecord retrieved \u003d storageManager.readConsumptionRecord().get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        assertEquals(original, new ConsumptionRecord(retrieved));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        assertNotNull(storageManager.getFoodRecordFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 12,
      "jeremylow97": 16,
      "-": 54
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/ConsumptionRecordBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.ConsumptionRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * A utility class to help with building ConsumptionRecord objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class ConsumptionRecordBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private ConsumptionRecord consumptionRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecordBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord \u003d new ConsumptionRecord();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Returns a {@code ConsumptionRecordBuilder} based on a {@code DailyFoodLog}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecordBuilder withLog(DailyFoodLog dailyFoodLog) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        consumptionRecord.addLog(dailyFoodLog);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public ConsumptionRecord build() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return consumptionRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 29
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/FoodBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Calorie;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Fat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Protein;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Food Name\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String DEFAULT_CALORIE \u003d \"1230\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String DEFAULT_PROTEIN \u003d \"123\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String DEFAULT_CARBOHYDRATE \u003d \"456\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final String DEFAULT_FAT \u003d \"789\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Calorie calorie;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Protein protein;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Carbohydrate carbohydrate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Fat fat;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        calorie \u003d new Calorie(DEFAULT_CALORIE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        protein \u003d new Protein(DEFAULT_PROTEIN);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        carbohydrate \u003d new Carbohydrate(DEFAULT_CARBOHYDRATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        fat \u003d new Fat(DEFAULT_FAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        name \u003d foodToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        calorie \u003d foodToCopy.getCalorie();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        protein \u003d foodToCopy.getProtein();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        carbohydrate \u003d foodToCopy.getCarbohydrate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        fat \u003d foodToCopy.getFat();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Sets the {@code Name} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Food} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Sets the {@code Calorie} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withCalorie(String calorie) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.calorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Sets the {@code Protein} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withProtein(String protein) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.protein \u003d new Protein(protein);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Sets the {@code Carbohydrate} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withCarbohydrate(String carbohydrate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.carbohydrate \u003d new Carbohydrate(carbohydrate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodBuilder withFat(String fat) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.fat \u003d new Fat(fat);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return new Food(name, calorie, protein, carbohydrate, fat, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 106
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/FoodRecordBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodRecordBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private FoodRecord foodRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodRecordBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodRecord \u003d new FoodRecord();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodRecordBuilder(FoodRecord foodRecord) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        this.foodRecord \u003d foodRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Adds a new {@code Food} to the {@code FoodRecord} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodRecordBuilder withFood(Food food) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        foodRecord.addFood(food);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public FoodRecord build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return foodRecord;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 35
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/FoodUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_CARBOHYDRATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_PROTEIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class FoodUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static String getUpdateCommand(Food food) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return UpdateCommand.COMMAND_WORD + \" \" + getPersonDetails(food);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static String getPersonDetails(Food food) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        sb.append(PREFIX_NAME + food.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        sb.append(PREFIX_CALORIES + food.getCalorie().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        sb.append(PREFIX_PROTEIN + food.getProtein().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        sb.append(PREFIX_CARBOHYDRATE + food.getCarbohydrate().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        sb.append(PREFIX_FAT + food.getFat().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        food.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 41
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns the middle index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodRecord().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns the last index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodRecord().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns the food in the {@code model}\u0027s food list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static Food getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return model.getFilteredFoodRecord().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/TypicalDailyFoodLog.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ray-97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.day.DailyFoodLog;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ray-97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ray-97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ray-97"
        },
        "content": " * Utility class for DailyFoodLog related tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ray-97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ray-97"
        },
        "content": "public class TypicalDailyFoodLog {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    private static final LocalDate CURRENT_DATE \u003d LocalDate.now();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static final DailyFoodLog DAILY_FOOD_LOG_TODAY \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ray-97"
        },
        "content": "            new DailyFoodLog(buildFoods(), buildRatings(), CURRENT_DATE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static DailyFoodLog getAppleOnlyLog() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        DailyFoodLog appleOnlyFoodLog \u003d new DailyFoodLog().consume(TypicalFoodItems.APPLE, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return appleOnlyFoodLog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Helper method to create food to portion map needed to build DailyFoodLog."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static LinkedHashMap\u003cFood, Double\u003e buildFoods() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, Double\u003e foods \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods.put(TypicalFoodItems.ALMOND, 3.0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods.put(TypicalFoodItems.BANANA, 6.9);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods.put(TypicalFoodItems.BANANA_MILKSHAKE, 1.0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods.put(TypicalFoodItems.DUCK_RICE, 1.0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        foods.put(TypicalFoodItems.YELLOW_SAUCE, 2.4);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     * Helper method to create food to ratings map needed to build DailyFoodLog."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ray-97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    public static LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e buildRatings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        LinkedHashMap\u003cFood, ArrayList\u003cInteger\u003e\u003e ratings \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ArrayList\u003cInteger\u003e ratingsArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(4);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.put(TypicalFoodItems.ALMOND, new ArrayList\u003c\u003e(ratingsArrayList));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(6);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(9);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.put(TypicalFoodItems.BANANA, new ArrayList\u003c\u003e(ratingsArrayList));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(8);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.put(TypicalFoodItems.BANANA_MILKSHAKE, new ArrayList\u003c\u003e(ratingsArrayList));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.add(0, 8);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.put(TypicalFoodItems.DUCK_RICE, new ArrayList\u003c\u003e(ratingsArrayList));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratingsArrayList.set(1, 10);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        ratings.put(TypicalFoodItems.YELLOW_SAUCE, new ArrayList\u003c\u003e(ratingsArrayList));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ray-97"
        },
        "content": "        return ratings;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ray-97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ray-97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ray-97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ray-97": 67
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/TypicalFoodItems.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.FoodRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class TypicalFoodItems {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food ALMOND \u003d new FoodBuilder().withName(\"Almond\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"95\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"20\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"20\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"10\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withTags(\"fruit\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food BANANA_MILKSHAKE \u003d new FoodBuilder().withName(\"Banana Milkshake\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"200\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"10\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"40\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"15\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withTags(\"dairy\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food CHOCOLATE_BAR \u003d new FoodBuilder().withName(\"Chocolate Bar\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"300\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"12\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"90\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"30\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withTags(\"snack\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food DUCK_RICE \u003d new FoodBuilder().withName(\"Duck Rice\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"238\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"20\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"120\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"20\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withTags(\"favourite\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food EGG_OMELETTE \u003d new FoodBuilder().withName(\"Egg Omelette\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"233\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"25\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"10\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"14\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food FISH_AND_CHIPS \u003d new FoodBuilder().withName(\"Fish and Chips\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"400\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"30\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"20\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"40\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food GRANOLA \u003d new FoodBuilder().withName(\"Granola\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"300\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"10\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"40\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"3\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    // Manually added - Food\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food APPLE \u003d new FoodBuilder().withName(\"Apple\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"100\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"3\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"40\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"1\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food BANANA \u003d new FoodBuilder().withName(\"Banana\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"200\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"1\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"50\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"12\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    // Manually added for other testing purposes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food ZINGER_BURGER \u003d new FoodBuilder().withName(\"Zinger Burger\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"1200\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"33\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"400\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"12\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Food YELLOW_SAUCE \u003d new FoodBuilder().withName(\"Yellow Sauce\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withCalorie(\"20000\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"111\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"520\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            .withFat(\"132\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "    public static final Food RAINBOW_SAUCE \u003d new FoodBuilder().withName(\"Rainbow Sauce\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCalorie(\"30000\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withProtein(\"1234\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withCarbohydrate(\"6969\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "            .withFat(\"20\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    private TypicalFoodItems() {} // prevents instantiation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenetyc"
        },
        "content": "     * Returns an {@code FoodRecord} with all the typical persons."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static FoodRecord getTypicalFoodRecord() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        FoodRecord ab \u003d new FoodRecord();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        for (Food food : getTypicalFoodItems()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "            ab.addFood(food);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     * Returns a list with all the typical persons."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static List\u003cFood\u003e getTypicalFoodItems() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                ALMOND, BANANA_MILKSHAKE, CHOCOLATE_BAR,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "                DUCK_RICE, EGG_OMELETTE, FISH_AND_CHIPS, GRANOLA));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 78,
      "eugenetyc": 28
    }
  },
  {
    "path": "src/test/java/life/calgo/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Index INDEX_FIRST_FOOD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Index INDEX_SECOND_FOOD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "    public static final Index INDEX_THIRD_FOOD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 12
    }
  },
  {
    "path": "src/test/java/life/calgo/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/life/calgo/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "package life.calgo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import static life.calgo.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "import life.calgo.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003c?import life.calgo.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremylow97"
        },
        "content": "\u003cfx:root type\u003d\"life.calgo.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeremylow97": 1,
      "-": 5
    }
  }
]
